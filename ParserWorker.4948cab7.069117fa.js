// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"ParserWorker.4948cab7.js":[function(require,module,exports) {
var define;
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e261) { throw _e261; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e262) { didErr = true; err = _e262; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

parcelRequire = function (e, r, t, n) {
  var i,
      o = "function" == typeof parcelRequire && parcelRequire,
      u = "function" == typeof require && require;

  function f(t, n) {
    if (!r[t]) {
      if (!e[t]) {
        var i = "function" == typeof parcelRequire && parcelRequire;
        if (!n && i) return i(t, !0);
        if (o) return o(t, !0);
        if (u && "string" == typeof t) return u(t);
        var c = new Error("Cannot find module '" + t + "'");
        throw c.code = "MODULE_NOT_FOUND", c;
      }

      p.resolve = function (r) {
        return e[t][1][r] || r;
      }, p.cache = {};
      var l = r[t] = new f.Module(t);
      e[t][0].call(l.exports, p, l, l.exports, this);
    }

    return r[t].exports;

    function p(e) {
      return f(p.resolve(e));
    }
  }

  f.isParcelRequire = !0, f.Module = function (e) {
    this.id = e, this.bundle = f, this.exports = {};
  }, f.modules = e, f.cache = r, f.parent = o, f.register = function (r, t) {
    e[r] = [function (e, r) {
      r.exports = t;
    }, {}];
  };

  for (var c = 0; c < t.length; c++) {
    try {
      f(t[c]);
    } catch (e) {
      i || (i = e);
    }
  }

  if (t.length) {
    var l = f(t[t.length - 1]);
    "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? module.exports = l : "function" == typeof define && define.amd ? define(function () {
      return l;
    }) : n && (this[n] = l);
  }

  if (parcelRequire = f, i) throw i;
  return f;
}({
  "dKqR": [function (require, module, exports) {
    "use strict";

    var _Tg;

    Object.defineProperty(exports, "__esModule", {
      value: !0
    }), exports.AxisHelper = vx, exports.BinaryTextureLoader = Mx, exports.Bone = iu, exports.BoundingBoxHelper = yx, exports.BufferAttribute = Si, exports.BufferGeometry = ji, exports.Camera = ys, exports.CanvasRenderer = Tx, exports.CompressedTextureLoader = Sd, exports.CubicInterpolant = rd, exports.Curve = Rd, exports.DataTextureLoader = Ad, exports.DiscreteInterpolant = sd, exports.DynamicBufferAttribute = lx, exports.EdgesHelper = _x, exports.EventDispatcher = In, exports.FileLoader = wd, exports.Float16BufferAttribute = Di, exports.Float32Attribute = gx, exports.Float32BufferAttribute = Ii, exports.Float64Attribute = xx, exports.Float64BufferAttribute = Bi, exports.GLBufferAttribute = Af, exports.ImageBitmapLoader = Bm, exports.ImmediateRenderObject = zf, exports.InstancedBufferAttribute = Lm, exports.InstancedBufferGeometry = Am, exports.InstancedInterleavedBuffer = Ef, exports.InstancedMesh = pu, exports.Int16Attribute = px, exports.Int16BufferAttribute = Li, exports.Int32Attribute = mx, exports.Int32BufferAttribute = Ci, exports.Int8Attribute = cx, exports.Int8BufferAttribute = Ti, exports.InterleavedBuffer = Ch, exports.InterleavedBufferAttribute = Dh, exports.Interpolant = nd, exports.JSONLoader = Ex, exports.LensFlare = Lx, exports.Line = yu, exports.LineSegments = wu, exports.LinearInterpolant = id, exports.Loader = _d, exports.LoadingManager = vd, exports.Material = di, exports.Mesh = cs, exports.MeshFaceMaterial = $g, exports.MeshPhysicalMaterial = Xp, exports.MeshStandardMaterial = qp, exports.MultiMaterial = tx, exports.Object3D = Jr, exports.ParametricGeometry = exports.ParametricBufferGeometry = Dp, exports.Particle = nx, exports.ParticleBasicMaterial = sx, exports.ParticleSystem = rx, exports.ParticleSystemMaterial = ox, exports.PerspectiveCamera = _s, exports.PointCloud = ex, exports.PointCloudMaterial = ix, exports.Points = Ru, exports.PropertyBinding = bf, exports.QuaternionLinearInterpolant = hd, exports.Raycaster = Lf, exports.ShaderMaterial = vs, exports.SkinnedMesh = ru, exports.TextureLoader = Ld, exports.Uint16Attribute = dx, exports.Uint16BufferAttribute = Ri, exports.Uint32Attribute = fx, exports.Uint32BufferAttribute = Pi, exports.Uint8Attribute = hx, exports.Uint8BufferAttribute = Ei, exports.Uint8ClampedAttribute = ux, exports.Uint8ClampedBufferAttribute = Ai, exports.Vertex = ax, exports.WebGLRenderTargetCube = Sx, exports.WebGLRenderer = Th, exports.WebGLUtils = vh, exports.WireframeHelper = bx, exports.XHRLoader = wx, exports.FlatShading = exports.FaceColors = exports.ExtrudeGeometry = exports.ExtrudeBufferGeometry = exports.Euler = exports.EquirectangularRefractionMapping = exports.EquirectangularReflectionMapping = exports.EqualStencilFunc = exports.EqualDepth = exports.EllipseCurve = exports.EdgesGeometry = exports.DynamicReadUsage = exports.DynamicDrawUsage = exports.DynamicCopyUsage = exports.DstColorFactor = exports.DstAlphaFactor = exports.DoubleSide = exports.DodecahedronGeometry = exports.DodecahedronBufferGeometry = exports.DirectionalLightHelper = exports.DirectionalLight = exports.DepthTexture = exports.DepthStencilFormat = exports.DepthFormat = exports.DefaultLoadingManager = exports.DecrementWrapStencilOp = exports.DecrementStencilOp = exports.DataUtils = exports.DataTexture3D = exports.DataTexture2DArray = exports.DataTexture = exports.Cylindrical = exports.CylinderGeometry = exports.CylinderBufferGeometry = exports.CustomToneMapping = exports.CustomBlending = exports.CurvePath = exports.CullFaceNone = exports.CullFaceFrontBack = exports.CullFaceFront = exports.CullFaceBack = exports.CubicBezierCurve3 = exports.CubicBezierCurve = exports.CubeUVRefractionMapping = exports.CubeUVReflectionMapping = exports.CubeTextureLoader = exports.CubeTexture = exports.CubeRefractionMapping = exports.CubeReflectionMapping = exports.CubeCamera = exports.ConeGeometry = exports.ConeBufferGeometry = exports.CompressedTexture = exports.ColorKeyframeTrack = exports.Color = exports.Clock = exports.ClampToEdgeWrapping = exports.CircleGeometry = exports.CircleBufferGeometry = exports.CineonToneMapping = exports.CatmullRomCurve3 = exports.CanvasTexture = exports.CameraHelper = exports.Cache = exports.ByteType = exports.BufferGeometryLoader = exports.BoxHelper = exports.BoxGeometry = exports.BoxBufferGeometry = exports.Box3Helper = exports.Box3 = exports.Box2 = exports.BooleanKeyframeTrack = exports.BasicShadowMap = exports.BasicDepthPacking = exports.BackSide = exports.AxesHelper = exports.AudioLoader = exports.AudioListener = exports.AudioContext = exports.AudioAnalyser = exports.Audio = exports.ArrowHelper = exports.ArrayCamera = exports.ArcCurve = exports.AnimationUtils = exports.AnimationObjectGroup = exports.AnimationMixer = exports.AnimationLoader = exports.AnimationClip = exports.AmbientLightProbe = exports.AmbientLight = exports.AlwaysStencilFunc = exports.AlwaysDepth = exports.AlphaFormat = exports.AdditiveBlending = exports.AdditiveAnimationBlendMode = exports.AddOperation = exports.AddEquation = exports.ACESFilmicToneMapping = void 0, exports.NumberKeyframeTrack = exports.NotEqualStencilFunc = exports.NotEqualDepth = exports.NormalBlending = exports.NormalAnimationBlendMode = exports.NoToneMapping = exports.NoColors = exports.NoBlending = exports.NeverStencilFunc = exports.NeverDepth = exports.NearestMipmapNearestFilter = exports.NearestMipmapLinearFilter = exports.NearestMipMapNearestFilter = exports.NearestMipMapLinearFilter = exports.NearestFilter = exports.MultiplyOperation = exports.MultiplyBlending = exports.MixOperation = exports.MirroredRepeatWrapping = exports.MinEquation = exports.MeshToonMaterial = exports.MeshPhongMaterial = exports.MeshNormalMaterial = exports.MeshMatcapMaterial = exports.MeshLambertMaterial = exports.MeshDistanceMaterial = exports.MeshDepthMaterial = exports.MeshBasicMaterial = exports.MaxEquation = exports.Matrix4 = exports.Matrix3 = exports.MathUtils = exports.Math = exports.MaterialLoader = exports.MOUSE = exports.LuminanceFormat = exports.LuminanceAlphaFormat = exports.LoopRepeat = exports.LoopPingPong = exports.LoopOnce = exports.LogLuvEncoding = exports.LoaderUtils = exports.LinearToneMapping = exports.LinearMipmapNearestFilter = exports.LinearMipmapLinearFilter = exports.LinearMipMapNearestFilter = exports.LinearMipMapLinearFilter = exports.LinearFilter = exports.LinearEncoding = exports.LineStrip = exports.LinePieces = exports.LineLoop = exports.LineDashedMaterial = exports.LineCurve3 = exports.LineCurve = exports.LineBasicMaterial = exports.Line3 = exports.LightProbe = exports.Light = exports.LessStencilFunc = exports.LessEqualStencilFunc = exports.LessEqualDepth = exports.LessDepth = exports.Layers = exports.LatheGeometry = exports.LatheBufferGeometry = exports.LOD = exports.KeyframeTrack = exports.KeepStencilOp = exports.InvertStencilOp = exports.InterpolateSmooth = exports.InterpolateLinear = exports.InterpolateDiscrete = exports.IntType = exports.IncrementWrapStencilOp = exports.IncrementStencilOp = exports.ImageUtils = exports.ImageLoader = exports.IcosahedronGeometry = exports.IcosahedronBufferGeometry = exports.HemisphereLightProbe = exports.HemisphereLightHelper = exports.HemisphereLight = exports.HalfFloatType = exports.Group = exports.GridHelper = exports.GreaterStencilFunc = exports.GreaterEqualStencilFunc = exports.GreaterEqualDepth = exports.GreaterDepth = exports.GammaEncoding = exports.GLSL3 = exports.GLSL1 = exports.Frustum = exports.FrontSide = exports.FontLoader = exports.Font = exports.FogExp2 = exports.Fog = exports.FloatType = void 0, exports.Shape = exports.ShadowMaterial = exports.ShaderLib = exports.ShaderChunk = exports.SceneUtils = exports.Scene = exports.SRGB8_ALPHA8_ASTC_8x8_Format = exports.SRGB8_ALPHA8_ASTC_8x6_Format = exports.SRGB8_ALPHA8_ASTC_8x5_Format = exports.SRGB8_ALPHA8_ASTC_6x6_Format = exports.SRGB8_ALPHA8_ASTC_6x5_Format = exports.SRGB8_ALPHA8_ASTC_5x5_Format = exports.SRGB8_ALPHA8_ASTC_5x4_Format = exports.SRGB8_ALPHA8_ASTC_4x4_Format = exports.SRGB8_ALPHA8_ASTC_12x12_Format = exports.SRGB8_ALPHA8_ASTC_12x10_Format = exports.SRGB8_ALPHA8_ASTC_10x8_Format = exports.SRGB8_ALPHA8_ASTC_10x6_Format = exports.SRGB8_ALPHA8_ASTC_10x5_Format = exports.SRGB8_ALPHA8_ASTC_10x10_Format = exports.RingGeometry = exports.RingBufferGeometry = exports.ReverseSubtractEquation = exports.ReplaceStencilOp = exports.RepeatWrapping = exports.ReinhardToneMapping = exports.RedIntegerFormat = exports.RedFormat = exports.RectAreaLight = exports.Ray = exports.RawShaderMaterial = exports.RGIntegerFormat = exports.RGFormat = exports.RGB_S3TC_DXT1_Format = exports.RGB_PVRTC_4BPPV1_Format = exports.RGB_PVRTC_2BPPV1_Format = exports.RGB_ETC2_Format = exports.RGB_ETC1_Format = exports.RGBM7Encoding = exports.RGBM16Encoding = exports.RGBIntegerFormat = exports.RGBFormat = exports.RGBEFormat = exports.RGBEEncoding = exports.RGBDEncoding = exports.RGBA_S3TC_DXT5_Format = exports.RGBA_S3TC_DXT3_Format = exports.RGBA_S3TC_DXT1_Format = exports.RGBA_PVRTC_4BPPV1_Format = exports.RGBA_PVRTC_2BPPV1_Format = exports.RGBA_ETC2_EAC_Format = exports.RGBA_BPTC_Format = exports.RGBA_ASTC_8x8_Format = exports.RGBA_ASTC_8x6_Format = exports.RGBA_ASTC_8x5_Format = exports.RGBA_ASTC_6x6_Format = exports.RGBA_ASTC_6x5_Format = exports.RGBA_ASTC_5x5_Format = exports.RGBA_ASTC_5x4_Format = exports.RGBA_ASTC_4x4_Format = exports.RGBA_ASTC_12x12_Format = exports.RGBA_ASTC_12x10_Format = exports.RGBA_ASTC_10x8_Format = exports.RGBA_ASTC_10x6_Format = exports.RGBA_ASTC_10x5_Format = exports.RGBA_ASTC_10x10_Format = exports.RGBAIntegerFormat = exports.RGBAFormat = exports.RGBADepthPacking = exports.REVISION = exports.QuaternionKeyframeTrack = exports.Quaternion = exports.QuadraticBezierCurve3 = exports.QuadraticBezierCurve = exports.PropertyMixer = exports.PositionalAudio = exports.PolyhedronGeometry = exports.PolyhedronBufferGeometry = exports.PolarGridHelper = exports.PointsMaterial = exports.PointLightHelper = exports.PointLight = exports.PlaneHelper = exports.PlaneGeometry = exports.PlaneBufferGeometry = exports.Plane = exports.Path = exports.PMREMGenerator = exports.PCFSoftShadowMap = exports.PCFShadowMap = exports.OrthographicCamera = exports.OneMinusSrcColorFactor = exports.OneMinusSrcAlphaFactor = exports.OneMinusDstColorFactor = exports.OneMinusDstAlphaFactor = exports.OneFactor = exports.OctahedronGeometry = exports.OctahedronBufferGeometry = exports.ObjectSpaceNormalMap = exports.ObjectLoader = void 0, exports.sRGBEncoding = exports.ZeroStencilOp = exports.ZeroSlopeEnding = exports.ZeroFactor = exports.ZeroCurvatureEnding = exports.WrapAroundEnding = exports.WireframeGeometry = exports.WebGLRenderTarget = exports.WebGLMultisampleRenderTarget = exports.WebGLCubeRenderTarget = exports.WebGL1Renderer = exports.VideoTexture = exports.VertexColors = exports.VectorKeyframeTrack = exports.Vector4 = exports.Vector3 = exports.Vector2 = exports.VSMShadowMap = exports.UnsignedShortType = exports.UnsignedShort565Type = exports.UnsignedShort5551Type = exports.UnsignedShort4444Type = exports.UnsignedIntType = exports.UnsignedInt248Type = exports.UnsignedByteType = exports.UniformsUtils = exports.UniformsLib = exports.Uniform = exports.UVMapping = exports.TubeGeometry = exports.TubeBufferGeometry = exports.TrianglesDrawMode = exports.TriangleStripDrawMode = exports.TriangleFanDrawMode = exports.Triangle = exports.TorusKnotGeometry = exports.TorusKnotBufferGeometry = exports.TorusGeometry = exports.TorusBufferGeometry = exports.Texture = exports.TextGeometry = exports.TextBufferGeometry = exports.TetrahedronGeometry = exports.TetrahedronBufferGeometry = exports.TangentSpaceNormalMap = exports.TOUCH = exports.SubtractiveBlending = exports.SubtractEquation = exports.StringKeyframeTrack = exports.StreamReadUsage = exports.StreamDrawUsage = exports.StreamCopyUsage = exports.StereoCamera = exports.StaticReadUsage = exports.StaticDrawUsage = exports.StaticCopyUsage = exports.SrcColorFactor = exports.SrcAlphaSaturateFactor = exports.SrcAlphaFactor = exports.SpriteMaterial = exports.Sprite = exports.SpotLightHelper = exports.SpotLight = exports.SplineCurve = exports.SphericalHarmonics3 = exports.Spherical = exports.SphereGeometry = exports.SphereBufferGeometry = exports.Sphere = exports.SmoothShading = exports.SkeletonHelper = exports.Skeleton = exports.ShortType = exports.ShapeUtils = exports.ShapePath = exports.ShapeGeometry = exports.ShapeBufferGeometry = void 0;
    var t = "127";
    exports.REVISION = "127";
    var e = {
      LEFT: 0,
      MIDDLE: 1,
      RIGHT: 2,
      ROTATE: 0,
      DOLLY: 1,
      PAN: 2
    };
    exports.MOUSE = e;
    var n = {
      ROTATE: 0,
      PAN: 1,
      DOLLY_PAN: 2,
      DOLLY_ROTATE: 3
    };
    exports.TOUCH = n;
    var r = 0;
    exports.CullFaceNone = r;
    var i = 1;
    exports.CullFaceBack = i;
    var s = 2;
    exports.CullFaceFront = s;
    var o = 3;
    exports.CullFaceFrontBack = 3;
    var a = 0;
    exports.BasicShadowMap = 0;
    var l = 1;
    exports.PCFShadowMap = l;
    var c = 2;
    exports.PCFSoftShadowMap = c;
    var h = 3;
    exports.VSMShadowMap = h;
    var u = 0;
    exports.FrontSide = u;
    var p = 1;
    exports.BackSide = p;
    var d = 2;
    exports.DoubleSide = d;
    var m = 1;
    exports.FlatShading = 1;
    var f = 2;
    exports.SmoothShading = 2;
    var g = 0;
    exports.NoBlending = g;
    var x = 1;
    exports.NormalBlending = x;
    var v = 2;
    exports.AdditiveBlending = v;
    var y = 3;
    exports.SubtractiveBlending = y;
    var _ = 4;
    exports.MultiplyBlending = _;
    var b = 5;
    exports.CustomBlending = b;
    var w = 100;
    exports.AddEquation = w;
    var M = 101;
    exports.SubtractEquation = M;
    var S = 102;
    exports.ReverseSubtractEquation = S;
    var T = 103;
    exports.MinEquation = T;
    var E = 104;
    exports.MaxEquation = E;
    var A = 200;
    exports.ZeroFactor = A;
    var L = 201;
    exports.OneFactor = L;
    var R = 202;
    exports.SrcColorFactor = R;
    var C = 203;
    exports.OneMinusSrcColorFactor = C;
    var P = 204;
    exports.SrcAlphaFactor = P;
    var D = 205;
    exports.OneMinusSrcAlphaFactor = D;
    var I = 206;
    exports.DstAlphaFactor = I;
    var B = 207;
    exports.OneMinusDstAlphaFactor = B;
    var N = 208;
    exports.DstColorFactor = N;
    var F = 209;
    exports.OneMinusDstColorFactor = F;
    var O = 210;
    exports.SrcAlphaSaturateFactor = O;
    var z = 0;
    exports.NeverDepth = z;
    var G = 1;
    exports.AlwaysDepth = G;
    var H = 2;
    exports.LessDepth = H;
    var U = 3;
    exports.LessEqualDepth = U;
    var k = 4;
    exports.EqualDepth = k;
    var V = 5;
    exports.GreaterEqualDepth = V;
    var W = 6;
    exports.GreaterDepth = W;
    var j = 7;
    exports.NotEqualDepth = j;
    var q = 0;
    exports.MultiplyOperation = q;
    var X = 1;
    exports.MixOperation = X;
    var Y = 2;
    exports.AddOperation = Y;
    var Z = 0;
    exports.NoToneMapping = Z;
    var J = 1;
    exports.LinearToneMapping = J;
    var Q = 2;
    exports.ReinhardToneMapping = Q;
    var K = 3;
    exports.CineonToneMapping = K;
    var $ = 4;
    exports.ACESFilmicToneMapping = $;
    var tt = 5;
    exports.CustomToneMapping = tt;
    var et = 300;
    exports.UVMapping = et;
    var nt = 301;
    exports.CubeReflectionMapping = nt;
    var rt = 302;
    exports.CubeRefractionMapping = rt;
    var it = 303;
    exports.EquirectangularReflectionMapping = it;
    var st = 304;
    exports.EquirectangularRefractionMapping = st;
    var ot = 306;
    exports.CubeUVReflectionMapping = ot;
    var at = 307;
    exports.CubeUVRefractionMapping = at;
    var lt = 1e3;
    exports.RepeatWrapping = lt;
    var ct = 1001;
    exports.ClampToEdgeWrapping = ct;
    var ht = 1002;
    exports.MirroredRepeatWrapping = ht;
    var ut = 1003;
    exports.NearestFilter = ut;
    var pt = 1004;
    exports.NearestMipmapNearestFilter = pt;
    var dt = 1004;
    exports.NearestMipMapNearestFilter = 1004;
    var mt = 1005;
    exports.NearestMipmapLinearFilter = mt;
    var ft = 1005;
    exports.NearestMipMapLinearFilter = 1005;
    var gt = 1006;
    exports.LinearFilter = gt;
    var xt = 1007;
    exports.LinearMipmapNearestFilter = xt;
    var vt = 1007;
    exports.LinearMipMapNearestFilter = 1007;
    var yt = 1008;
    exports.LinearMipmapLinearFilter = yt;
    var _t = 1008;
    exports.LinearMipMapLinearFilter = 1008;
    var bt = 1009;
    exports.UnsignedByteType = bt;
    var wt = 1010;
    exports.ByteType = wt;
    var Mt = 1011;
    exports.ShortType = Mt;
    var St = 1012;
    exports.UnsignedShortType = St;
    var Tt = 1013;
    exports.IntType = Tt;
    var Et = 1014;
    exports.UnsignedIntType = Et;
    var At = 1015;
    exports.FloatType = At;
    var Lt = 1016;
    exports.HalfFloatType = Lt;
    var Rt = 1017;
    exports.UnsignedShort4444Type = Rt;
    var Ct = 1018;
    exports.UnsignedShort5551Type = Ct;
    var Pt = 1019;
    exports.UnsignedShort565Type = Pt;
    var Dt = 1020;
    exports.UnsignedInt248Type = Dt;
    var It = 1021;
    exports.AlphaFormat = It;
    var Bt = 1022;
    exports.RGBFormat = Bt;
    var Nt = 1023;
    exports.RGBAFormat = Nt;
    var Ft = 1024;
    exports.LuminanceFormat = Ft;
    var Ot = 1025;
    exports.LuminanceAlphaFormat = Ot;
    var zt = Nt;
    exports.RGBEFormat = zt;
    var Gt = 1026;
    exports.DepthFormat = Gt;
    var Ht = 1027;
    exports.DepthStencilFormat = Ht;
    var Ut = 1028;
    exports.RedFormat = Ut;
    var kt = 1029;
    exports.RedIntegerFormat = kt;
    var Vt = 1030;
    exports.RGFormat = Vt;
    var Wt = 1031;
    exports.RGIntegerFormat = Wt;
    var jt = 1032;
    exports.RGBIntegerFormat = jt;
    var qt = 1033;
    exports.RGBAIntegerFormat = qt;
    var Xt = 33776;
    exports.RGB_S3TC_DXT1_Format = Xt;
    var Yt = 33777;
    exports.RGBA_S3TC_DXT1_Format = Yt;
    var Zt = 33778;
    exports.RGBA_S3TC_DXT3_Format = Zt;
    var Jt = 33779;
    exports.RGBA_S3TC_DXT5_Format = Jt;
    var Qt = 35840;
    exports.RGB_PVRTC_4BPPV1_Format = Qt;
    var Kt = 35841;
    exports.RGB_PVRTC_2BPPV1_Format = Kt;
    var $t = 35842;
    exports.RGBA_PVRTC_4BPPV1_Format = $t;
    var te = 35843;
    exports.RGBA_PVRTC_2BPPV1_Format = te;
    var ee = 36196;
    exports.RGB_ETC1_Format = ee;
    var ne = 37492;
    exports.RGB_ETC2_Format = ne;
    var re = 37496;
    exports.RGBA_ETC2_EAC_Format = re;
    var ie = 37808;
    exports.RGBA_ASTC_4x4_Format = ie;
    var se = 37809;
    exports.RGBA_ASTC_5x4_Format = se;
    var oe = 37810;
    exports.RGBA_ASTC_5x5_Format = oe;
    var ae = 37811;
    exports.RGBA_ASTC_6x5_Format = ae;
    var le = 37812;
    exports.RGBA_ASTC_6x6_Format = le;
    var ce = 37813;
    exports.RGBA_ASTC_8x5_Format = ce;
    var he = 37814;
    exports.RGBA_ASTC_8x6_Format = he;
    var ue = 37815;
    exports.RGBA_ASTC_8x8_Format = ue;
    var pe = 37816;
    exports.RGBA_ASTC_10x5_Format = pe;
    var de = 37817;
    exports.RGBA_ASTC_10x6_Format = de;
    var me = 37818;
    exports.RGBA_ASTC_10x8_Format = me;
    var fe = 37819;
    exports.RGBA_ASTC_10x10_Format = fe;
    var ge = 37820;
    exports.RGBA_ASTC_12x10_Format = ge;
    var xe = 37821;
    exports.RGBA_ASTC_12x12_Format = xe;
    var ve = 36492;
    exports.RGBA_BPTC_Format = ve;
    var ye = 37840;
    exports.SRGB8_ALPHA8_ASTC_4x4_Format = ye;
    var _e = 37841;
    exports.SRGB8_ALPHA8_ASTC_5x4_Format = _e;
    var be = 37842;
    exports.SRGB8_ALPHA8_ASTC_5x5_Format = be;
    var we = 37843;
    exports.SRGB8_ALPHA8_ASTC_6x5_Format = we;
    var Me = 37844;
    exports.SRGB8_ALPHA8_ASTC_6x6_Format = Me;
    var Se = 37845;
    exports.SRGB8_ALPHA8_ASTC_8x5_Format = Se;
    var Te = 37846;
    exports.SRGB8_ALPHA8_ASTC_8x6_Format = Te;
    var Ee = 37847;
    exports.SRGB8_ALPHA8_ASTC_8x8_Format = Ee;
    var Ae = 37848;
    exports.SRGB8_ALPHA8_ASTC_10x5_Format = Ae;
    var Le = 37849;
    exports.SRGB8_ALPHA8_ASTC_10x6_Format = Le;
    var Re = 37850;
    exports.SRGB8_ALPHA8_ASTC_10x8_Format = Re;
    var Ce = 37851;
    exports.SRGB8_ALPHA8_ASTC_10x10_Format = Ce;
    var Pe = 37852;
    exports.SRGB8_ALPHA8_ASTC_12x10_Format = Pe;
    var De = 37853;
    exports.SRGB8_ALPHA8_ASTC_12x12_Format = De;
    var Ie = 2200;
    exports.LoopOnce = Ie;
    var Be = 2201;
    exports.LoopRepeat = Be;
    var Ne = 2202;
    exports.LoopPingPong = Ne;
    var Fe = 2300;
    exports.InterpolateDiscrete = Fe;
    var Oe = 2301;
    exports.InterpolateLinear = Oe;
    var ze = 2302;
    exports.InterpolateSmooth = ze;
    var Ge = 2400;
    exports.ZeroCurvatureEnding = Ge;
    var He = 2401;
    exports.ZeroSlopeEnding = He;
    var Ue = 2402;
    exports.WrapAroundEnding = Ue;
    var ke = 2500;
    exports.NormalAnimationBlendMode = ke;
    var Ve = 2501;
    exports.AdditiveAnimationBlendMode = Ve;
    var We = 0;
    exports.TrianglesDrawMode = 0;
    var je = 1;
    exports.TriangleStripDrawMode = 1;
    var qe = 2;
    exports.TriangleFanDrawMode = 2;
    var Xe = 3e3;
    exports.LinearEncoding = Xe;
    var Ye = 3001;
    exports.sRGBEncoding = Ye;
    var Ze = 3007;
    exports.GammaEncoding = Ze;
    var Je = 3002;
    exports.RGBEEncoding = Je;
    var Qe = 3003;
    exports.LogLuvEncoding = Qe;
    var Ke = 3004;
    exports.RGBM7Encoding = Ke;
    var $e = 3005;
    exports.RGBM16Encoding = $e;
    var tn = 3006;
    exports.RGBDEncoding = tn;
    var en = 3200;
    exports.BasicDepthPacking = en;
    var nn = 3201;
    exports.RGBADepthPacking = nn;
    var rn = 0;
    exports.TangentSpaceNormalMap = rn;
    var sn = 1;
    exports.ObjectSpaceNormalMap = sn;
    var on = 0;
    exports.ZeroStencilOp = 0;
    var an = 7680;
    exports.KeepStencilOp = an;
    var ln = 7681;
    exports.ReplaceStencilOp = 7681;
    var cn = 7682;
    exports.IncrementStencilOp = 7682;
    var hn = 7683;
    exports.DecrementStencilOp = 7683;
    var un = 34055;
    exports.IncrementWrapStencilOp = 34055;
    var pn = 34056;
    exports.DecrementWrapStencilOp = 34056;
    var dn = 5386;
    exports.InvertStencilOp = 5386;
    var mn = 512;
    exports.NeverStencilFunc = 512;
    var fn = 513;
    exports.LessStencilFunc = 513;
    var gn = 514;
    exports.EqualStencilFunc = 514;
    var xn = 515;
    exports.LessEqualStencilFunc = 515;
    var vn = 516;
    exports.GreaterStencilFunc = 516;
    var yn = 517;
    exports.NotEqualStencilFunc = 517;
    var _n = 518;
    exports.GreaterEqualStencilFunc = 518;
    var bn = 519;
    exports.AlwaysStencilFunc = bn;
    var wn = 35044;
    exports.StaticDrawUsage = wn;
    var Mn = 35048;
    exports.DynamicDrawUsage = Mn;
    var Sn = 35040;
    exports.StreamDrawUsage = 35040;
    var Tn = 35045;
    exports.StaticReadUsage = 35045;
    var En = 35049;
    exports.DynamicReadUsage = 35049;
    var An = 35041;
    exports.StreamReadUsage = 35041;
    var Ln = 35046;
    exports.StaticCopyUsage = 35046;
    var Rn = 35050;
    exports.DynamicCopyUsage = 35050;
    var Cn = 35042;
    exports.StreamCopyUsage = 35042;
    var Pn = "100";
    exports.GLSL1 = "100";
    var Dn = "300 es";

    function In() {}

    exports.GLSL3 = Dn, Object.assign(In.prototype, {
      addEventListener: function addEventListener(t, e) {
        void 0 === this._listeners && (this._listeners = {});
        var n = this._listeners;
        void 0 === n[t] && (n[t] = []), -1 === n[t].indexOf(e) && n[t].push(e);
      },
      hasEventListener: function hasEventListener(t, e) {
        if (void 0 === this._listeners) return !1;
        var n = this._listeners;
        return void 0 !== n[t] && -1 !== n[t].indexOf(e);
      },
      removeEventListener: function removeEventListener(t, e) {
        if (void 0 === this._listeners) return;
        var n = this._listeners[t];

        if (void 0 !== n) {
          var _t2 = n.indexOf(e);

          -1 !== _t2 && n.splice(_t2, 1);
        }
      },
      dispatchEvent: function dispatchEvent(t) {
        if (void 0 === this._listeners) return;
        var e = this._listeners[t.type];

        if (void 0 !== e) {
          t.target = this;

          var _n2 = e.slice(0);

          for (var _e2 = 0, _r2 = _n2.length; _e2 < _r2; _e2++) {
            _n2[_e2].call(this, t);
          }

          t.target = null;
        }
      }
    });
    var Bn = [];

    for (var Rx = 0; Rx < 256; Rx++) {
      Bn[Rx] = (Rx < 16 ? "0" : "") + Rx.toString(16);
    }

    var Nn = 1234567;
    var Fn = {
      DEG2RAD: Math.PI / 180,
      RAD2DEG: 180 / Math.PI,
      generateUUID: function generateUUID() {
        var t = 4294967295 * Math.random() | 0,
            e = 4294967295 * Math.random() | 0,
            n = 4294967295 * Math.random() | 0,
            r = 4294967295 * Math.random() | 0;
        return (Bn[255 & t] + Bn[t >> 8 & 255] + Bn[t >> 16 & 255] + Bn[t >> 24 & 255] + "-" + Bn[255 & e] + Bn[e >> 8 & 255] + "-" + Bn[e >> 16 & 15 | 64] + Bn[e >> 24 & 255] + "-" + Bn[63 & n | 128] + Bn[n >> 8 & 255] + "-" + Bn[n >> 16 & 255] + Bn[n >> 24 & 255] + Bn[255 & r] + Bn[r >> 8 & 255] + Bn[r >> 16 & 255] + Bn[r >> 24 & 255]).toUpperCase();
      },
      clamp: function clamp(t, e, n) {
        return Math.max(e, Math.min(n, t));
      },
      euclideanModulo: function euclideanModulo(t, e) {
        return (t % e + e) % e;
      },
      mapLinear: function mapLinear(t, e, n, r, i) {
        return r + (t - e) * (i - r) / (n - e);
      },
      inverseLerp: function inverseLerp(t, e, n) {
        return t !== e ? (n - t) / (e - t) : 0;
      },
      lerp: function lerp(t, e, n) {
        return (1 - n) * t + n * e;
      },
      damp: function damp(t, e, n, r) {
        return Fn.lerp(t, e, 1 - Math.exp(-n * r));
      },
      pingpong: function pingpong(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        return e - Math.abs(Fn.euclideanModulo(t, 2 * e) - e);
      },
      smoothstep: function smoothstep(t, e, n) {
        return t <= e ? 0 : t >= n ? 1 : (t = (t - e) / (n - e)) * t * (3 - 2 * t);
      },
      smootherstep: function smootherstep(t, e, n) {
        return t <= e ? 0 : t >= n ? 1 : (t = (t - e) / (n - e)) * t * t * (t * (6 * t - 15) + 10);
      },
      randInt: function randInt(t, e) {
        return t + Math.floor(Math.random() * (e - t + 1));
      },
      randFloat: function randFloat(t, e) {
        return t + Math.random() * (e - t);
      },
      randFloatSpread: function randFloatSpread(t) {
        return t * (.5 - Math.random());
      },
      seededRandom: function seededRandom(t) {
        return void 0 !== t && (Nn = t % 2147483647), ((Nn = 16807 * Nn % 2147483647) - 1) / 2147483646;
      },
      degToRad: function degToRad(t) {
        return t * Fn.DEG2RAD;
      },
      radToDeg: function radToDeg(t) {
        return t * Fn.RAD2DEG;
      },
      isPowerOfTwo: function isPowerOfTwo(t) {
        return 0 == (t & t - 1) && 0 !== t;
      },
      ceilPowerOfTwo: function ceilPowerOfTwo(t) {
        return Math.pow(2, Math.ceil(Math.log(t) / Math.LN2));
      },
      floorPowerOfTwo: function floorPowerOfTwo(t) {
        return Math.pow(2, Math.floor(Math.log(t) / Math.LN2));
      },
      setQuaternionFromProperEuler: function setQuaternionFromProperEuler(t, e, n, r, i) {
        var s = Math.cos,
            o = Math.sin,
            a = s(n / 2),
            l = o(n / 2),
            c = s((e + r) / 2),
            h = o((e + r) / 2),
            u = s((e - r) / 2),
            p = o((e - r) / 2),
            d = s((r - e) / 2),
            m = o((r - e) / 2);

        switch (i) {
          case "XYX":
            t.set(a * h, l * u, l * p, a * c);
            break;

          case "YZY":
            t.set(l * p, a * h, l * u, a * c);
            break;

          case "ZXZ":
            t.set(l * u, l * p, a * h, a * c);
            break;

          case "XZX":
            t.set(a * h, l * m, l * d, a * c);
            break;

          case "YXY":
            t.set(l * d, a * h, l * m, a * c);
            break;

          case "ZYZ":
            t.set(l * m, l * d, a * h, a * c);
            break;

          default:
            console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + i);
        }
      }
    };
    exports.MathUtils = exports.Math = Fn;

    var On = /*#__PURE__*/function () {
      function On() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        _classCallCheck(this, On);

        this.x = t, this.y = e;
      }

      _createClass(On, [{
        key: "width",
        get: function get() {
          return this.x;
        },
        set: function set(t) {
          this.x = t;
        }
      }, {
        key: "height",
        get: function get() {
          return this.y;
        },
        set: function set(t) {
          this.y = t;
        }
      }, {
        key: "set",
        value: function set(t, e) {
          return this.x = t, this.y = e, this;
        }
      }, {
        key: "setScalar",
        value: function setScalar(t) {
          return this.x = t, this.y = t, this;
        }
      }, {
        key: "setX",
        value: function setX(t) {
          return this.x = t, this;
        }
      }, {
        key: "setY",
        value: function setY(t) {
          return this.y = t, this;
        }
      }, {
        key: "setComponent",
        value: function setComponent(t, e) {
          switch (t) {
            case 0:
              this.x = e;
              break;

            case 1:
              this.y = e;
              break;

            default:
              throw new Error("index is out of range: " + t);
          }

          return this;
        }
      }, {
        key: "getComponent",
        value: function getComponent(t) {
          switch (t) {
            case 0:
              return this.x;

            case 1:
              return this.y;

            default:
              throw new Error("index is out of range: " + t);
          }
        }
      }, {
        key: "clone",
        value: function clone() {
          return new this.constructor(this.x, this.y);
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return this.x = t.x, this.y = t.y, this;
        }
      }, {
        key: "add",
        value: function add(t, e) {
          return void 0 !== e ? (console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(t, e)) : (this.x += t.x, this.y += t.y, this);
        }
      }, {
        key: "addScalar",
        value: function addScalar(t) {
          return this.x += t, this.y += t, this;
        }
      }, {
        key: "addVectors",
        value: function addVectors(t, e) {
          return this.x = t.x + e.x, this.y = t.y + e.y, this;
        }
      }, {
        key: "addScaledVector",
        value: function addScaledVector(t, e) {
          return this.x += t.x * e, this.y += t.y * e, this;
        }
      }, {
        key: "sub",
        value: function sub(t, e) {
          return void 0 !== e ? (console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(t, e)) : (this.x -= t.x, this.y -= t.y, this);
        }
      }, {
        key: "subScalar",
        value: function subScalar(t) {
          return this.x -= t, this.y -= t, this;
        }
      }, {
        key: "subVectors",
        value: function subVectors(t, e) {
          return this.x = t.x - e.x, this.y = t.y - e.y, this;
        }
      }, {
        key: "multiply",
        value: function multiply(t) {
          return this.x *= t.x, this.y *= t.y, this;
        }
      }, {
        key: "multiplyScalar",
        value: function multiplyScalar(t) {
          return this.x *= t, this.y *= t, this;
        }
      }, {
        key: "divide",
        value: function divide(t) {
          return this.x /= t.x, this.y /= t.y, this;
        }
      }, {
        key: "divideScalar",
        value: function divideScalar(t) {
          return this.multiplyScalar(1 / t);
        }
      }, {
        key: "applyMatrix3",
        value: function applyMatrix3(t) {
          var e = this.x,
              n = this.y,
              r = t.elements;
          return this.x = r[0] * e + r[3] * n + r[6], this.y = r[1] * e + r[4] * n + r[7], this;
        }
      }, {
        key: "min",
        value: function min(t) {
          return this.x = Math.min(this.x, t.x), this.y = Math.min(this.y, t.y), this;
        }
      }, {
        key: "max",
        value: function max(t) {
          return this.x = Math.max(this.x, t.x), this.y = Math.max(this.y, t.y), this;
        }
      }, {
        key: "clamp",
        value: function clamp(t, e) {
          return this.x = Math.max(t.x, Math.min(e.x, this.x)), this.y = Math.max(t.y, Math.min(e.y, this.y)), this;
        }
      }, {
        key: "clampScalar",
        value: function clampScalar(t, e) {
          return this.x = Math.max(t, Math.min(e, this.x)), this.y = Math.max(t, Math.min(e, this.y)), this;
        }
      }, {
        key: "clampLength",
        value: function clampLength(t, e) {
          var n = this.length();
          return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)));
        }
      }, {
        key: "floor",
        value: function floor() {
          return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this;
        }
      }, {
        key: "ceil",
        value: function ceil() {
          return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this;
        }
      }, {
        key: "round",
        value: function round() {
          return this.x = Math.round(this.x), this.y = Math.round(this.y), this;
        }
      }, {
        key: "roundToZero",
        value: function roundToZero() {
          return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this;
        }
      }, {
        key: "negate",
        value: function negate() {
          return this.x = -this.x, this.y = -this.y, this;
        }
      }, {
        key: "dot",
        value: function dot(t) {
          return this.x * t.x + this.y * t.y;
        }
      }, {
        key: "cross",
        value: function cross(t) {
          return this.x * t.y - this.y * t.x;
        }
      }, {
        key: "lengthSq",
        value: function lengthSq() {
          return this.x * this.x + this.y * this.y;
        }
      }, {
        key: "length",
        value: function length() {
          return Math.sqrt(this.x * this.x + this.y * this.y);
        }
      }, {
        key: "manhattanLength",
        value: function manhattanLength() {
          return Math.abs(this.x) + Math.abs(this.y);
        }
      }, {
        key: "normalize",
        value: function normalize() {
          return this.divideScalar(this.length() || 1);
        }
      }, {
        key: "angle",
        value: function angle() {
          return Math.atan2(-this.y, -this.x) + Math.PI;
        }
      }, {
        key: "distanceTo",
        value: function distanceTo(t) {
          return Math.sqrt(this.distanceToSquared(t));
        }
      }, {
        key: "distanceToSquared",
        value: function distanceToSquared(t) {
          var e = this.x - t.x,
              n = this.y - t.y;
          return e * e + n * n;
        }
      }, {
        key: "manhattanDistanceTo",
        value: function manhattanDistanceTo(t) {
          return Math.abs(this.x - t.x) + Math.abs(this.y - t.y);
        }
      }, {
        key: "setLength",
        value: function setLength(t) {
          return this.normalize().multiplyScalar(t);
        }
      }, {
        key: "lerp",
        value: function lerp(t, e) {
          return this.x += (t.x - this.x) * e, this.y += (t.y - this.y) * e, this;
        }
      }, {
        key: "lerpVectors",
        value: function lerpVectors(t, e, n) {
          return this.x = t.x + (e.x - t.x) * n, this.y = t.y + (e.y - t.y) * n, this;
        }
      }, {
        key: "equals",
        value: function equals(t) {
          return t.x === this.x && t.y === this.y;
        }
      }, {
        key: "fromArray",
        value: function fromArray(t) {
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          return this.x = t[e], this.y = t[e + 1], this;
        }
      }, {
        key: "toArray",
        value: function toArray() {
          var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          return t[e] = this.x, t[e + 1] = this.y, t;
        }
      }, {
        key: "fromBufferAttribute",
        value: function fromBufferAttribute(t, e, n) {
          return void 0 !== n && console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."), this.x = t.getX(e), this.y = t.getY(e), this;
        }
      }, {
        key: "rotateAround",
        value: function rotateAround(t, e) {
          var n = Math.cos(e),
              r = Math.sin(e),
              i = this.x - t.x,
              s = this.y - t.y;
          return this.x = i * n - s * r + t.x, this.y = i * r + s * n + t.y, this;
        }
      }, {
        key: "random",
        value: function random() {
          return this.x = Math.random(), this.y = Math.random(), this;
        }
      }]);

      return On;
    }();

    exports.Vector2 = On, On.prototype.isVector2 = !0;

    var zn = /*#__PURE__*/function () {
      function zn() {
        _classCallCheck(this, zn);

        this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1], arguments.length > 0 && console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
      }

      _createClass(zn, [{
        key: "set",
        value: function set(t, e, n, r, i, s, o, a, l) {
          var c = this.elements;
          return c[0] = t, c[1] = r, c[2] = o, c[3] = e, c[4] = i, c[5] = a, c[6] = n, c[7] = s, c[8] = l, this;
        }
      }, {
        key: "identity",
        value: function identity() {
          return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this;
        }
      }, {
        key: "copy",
        value: function copy(t) {
          var e = this.elements,
              n = t.elements;
          return e[0] = n[0], e[1] = n[1], e[2] = n[2], e[3] = n[3], e[4] = n[4], e[5] = n[5], e[6] = n[6], e[7] = n[7], e[8] = n[8], this;
        }
      }, {
        key: "extractBasis",
        value: function extractBasis(t, e, n) {
          return t.setFromMatrix3Column(this, 0), e.setFromMatrix3Column(this, 1), n.setFromMatrix3Column(this, 2), this;
        }
      }, {
        key: "setFromMatrix4",
        value: function setFromMatrix4(t) {
          var e = t.elements;
          return this.set(e[0], e[4], e[8], e[1], e[5], e[9], e[2], e[6], e[10]), this;
        }
      }, {
        key: "multiply",
        value: function multiply(t) {
          return this.multiplyMatrices(this, t);
        }
      }, {
        key: "premultiply",
        value: function premultiply(t) {
          return this.multiplyMatrices(t, this);
        }
      }, {
        key: "multiplyMatrices",
        value: function multiplyMatrices(t, e) {
          var n = t.elements,
              r = e.elements,
              i = this.elements,
              s = n[0],
              o = n[3],
              a = n[6],
              l = n[1],
              c = n[4],
              h = n[7],
              u = n[2],
              p = n[5],
              d = n[8],
              m = r[0],
              f = r[3],
              g = r[6],
              x = r[1],
              v = r[4],
              y = r[7],
              _ = r[2],
              b = r[5],
              w = r[8];
          return i[0] = s * m + o * x + a * _, i[3] = s * f + o * v + a * b, i[6] = s * g + o * y + a * w, i[1] = l * m + c * x + h * _, i[4] = l * f + c * v + h * b, i[7] = l * g + c * y + h * w, i[2] = u * m + p * x + d * _, i[5] = u * f + p * v + d * b, i[8] = u * g + p * y + d * w, this;
        }
      }, {
        key: "multiplyScalar",
        value: function multiplyScalar(t) {
          var e = this.elements;
          return e[0] *= t, e[3] *= t, e[6] *= t, e[1] *= t, e[4] *= t, e[7] *= t, e[2] *= t, e[5] *= t, e[8] *= t, this;
        }
      }, {
        key: "determinant",
        value: function determinant() {
          var t = this.elements,
              e = t[0],
              n = t[1],
              r = t[2],
              i = t[3],
              s = t[4],
              o = t[5],
              a = t[6],
              l = t[7],
              c = t[8];
          return e * s * c - e * o * l - n * i * c + n * o * a + r * i * l - r * s * a;
        }
      }, {
        key: "invert",
        value: function invert() {
          var t = this.elements,
              e = t[0],
              n = t[1],
              r = t[2],
              i = t[3],
              s = t[4],
              o = t[5],
              a = t[6],
              l = t[7],
              c = t[8],
              h = c * s - o * l,
              u = o * a - c * i,
              p = l * i - s * a,
              d = e * h + n * u + r * p;
          if (0 === d) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
          var m = 1 / d;
          return t[0] = h * m, t[1] = (r * l - c * n) * m, t[2] = (o * n - r * s) * m, t[3] = u * m, t[4] = (c * e - r * a) * m, t[5] = (r * i - o * e) * m, t[6] = p * m, t[7] = (n * a - l * e) * m, t[8] = (s * e - n * i) * m, this;
        }
      }, {
        key: "transpose",
        value: function transpose() {
          var t;
          var e = this.elements;
          return t = e[1], e[1] = e[3], e[3] = t, t = e[2], e[2] = e[6], e[6] = t, t = e[5], e[5] = e[7], e[7] = t, this;
        }
      }, {
        key: "getNormalMatrix",
        value: function getNormalMatrix(t) {
          return this.setFromMatrix4(t).invert().transpose();
        }
      }, {
        key: "transposeIntoArray",
        value: function transposeIntoArray(t) {
          var e = this.elements;
          return t[0] = e[0], t[1] = e[3], t[2] = e[6], t[3] = e[1], t[4] = e[4], t[5] = e[7], t[6] = e[2], t[7] = e[5], t[8] = e[8], this;
        }
      }, {
        key: "setUvTransform",
        value: function setUvTransform(t, e, n, r, i, s, o) {
          var a = Math.cos(i),
              l = Math.sin(i);
          return this.set(n * a, n * l, -n * (a * s + l * o) + s + t, -r * l, r * a, -r * (-l * s + a * o) + o + e, 0, 0, 1), this;
        }
      }, {
        key: "scale",
        value: function scale(t, e) {
          var n = this.elements;
          return n[0] *= t, n[3] *= t, n[6] *= t, n[1] *= e, n[4] *= e, n[7] *= e, this;
        }
      }, {
        key: "rotate",
        value: function rotate(t) {
          var e = Math.cos(t),
              n = Math.sin(t),
              r = this.elements,
              i = r[0],
              s = r[3],
              o = r[6],
              a = r[1],
              l = r[4],
              c = r[7];
          return r[0] = e * i + n * a, r[3] = e * s + n * l, r[6] = e * o + n * c, r[1] = -n * i + e * a, r[4] = -n * s + e * l, r[7] = -n * o + e * c, this;
        }
      }, {
        key: "translate",
        value: function translate(t, e) {
          var n = this.elements;
          return n[0] += t * n[2], n[3] += t * n[5], n[6] += t * n[8], n[1] += e * n[2], n[4] += e * n[5], n[7] += e * n[8], this;
        }
      }, {
        key: "equals",
        value: function equals(t) {
          var e = this.elements,
              n = t.elements;

          for (var _r3 = 0; _r3 < 9; _r3++) {
            if (e[_r3] !== n[_r3]) return !1;
          }

          return !0;
        }
      }, {
        key: "fromArray",
        value: function fromArray(t) {
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

          for (var _n3 = 0; _n3 < 9; _n3++) {
            this.elements[_n3] = t[_n3 + e];
          }

          return this;
        }
      }, {
        key: "toArray",
        value: function toArray() {
          var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          var n = this.elements;
          return t[e] = n[0], t[e + 1] = n[1], t[e + 2] = n[2], t[e + 3] = n[3], t[e + 4] = n[4], t[e + 5] = n[5], t[e + 6] = n[6], t[e + 7] = n[7], t[e + 8] = n[8], t;
        }
      }, {
        key: "clone",
        value: function clone() {
          return new this.constructor().fromArray(this.elements);
        }
      }]);

      return zn;
    }();

    var Gn;
    exports.Matrix3 = zn, zn.prototype.isMatrix3 = !0;
    var Hn = {
      getDataURL: function getDataURL(t) {
        if (/^data:/i.test(t.src)) return t.src;
        if ("undefined" == typeof HTMLCanvasElement) return t.src;
        var e;
        if (t instanceof HTMLCanvasElement) e = t;else {
          void 0 === Gn && (Gn = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas")), Gn.width = t.width, Gn.height = t.height;

          var _n4 = Gn.getContext("2d");

          t instanceof ImageData ? _n4.putImageData(t, 0, 0) : _n4.drawImage(t, 0, 0, t.width, t.height), e = Gn;
        }
        return e.width > 2048 || e.height > 2048 ? (console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", t), e.toDataURL("image/jpeg", .6)) : e.toDataURL("image/png");
      }
    };
    exports.ImageUtils = Hn;
    var Un = 0;

    var kn = /*#__PURE__*/function (_In) {
      _inherits(kn, _In);

      var _super = _createSuper(kn);

      function kn() {
        var _this;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : kn.DEFAULT_IMAGE;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : kn.DEFAULT_MAPPING;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ct;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ct;
        var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : gt;
        var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : yt;
        var o = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : Nt;
        var a = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : bt;
        var l = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;
        var c = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : Xe;

        _classCallCheck(this, kn);

        _this = _super.call(this), Object.defineProperty(_assertThisInitialized(_this), "id", {
          value: Un++
        }), _this.uuid = Fn.generateUUID(), _this.name = "", _this.image = t, _this.mipmaps = [], _this.mapping = e, _this.wrapS = n, _this.wrapT = r, _this.magFilter = i, _this.minFilter = s, _this.anisotropy = l, _this.format = o, _this.internalFormat = null, _this.type = a, _this.offset = new On(0, 0), _this.repeat = new On(1, 1), _this.center = new On(0, 0), _this.rotation = 0, _this.matrixAutoUpdate = !0, _this.matrix = new zn(), _this.generateMipmaps = !0, _this.premultiplyAlpha = !1, _this.flipY = !0, _this.unpackAlignment = 4, _this.encoding = c, _this.version = 0, _this.onUpdate = null;
        return _this;
      }

      _createClass(kn, [{
        key: "updateMatrix",
        value: function updateMatrix() {
          this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
        }
      }, {
        key: "clone",
        value: function clone() {
          return new this.constructor().copy(this);
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return this.name = t.name, this.image = t.image, this.mipmaps = t.mipmaps.slice(0), this.mapping = t.mapping, this.wrapS = t.wrapS, this.wrapT = t.wrapT, this.magFilter = t.magFilter, this.minFilter = t.minFilter, this.anisotropy = t.anisotropy, this.format = t.format, this.internalFormat = t.internalFormat, this.type = t.type, this.offset.copy(t.offset), this.repeat.copy(t.repeat), this.center.copy(t.center), this.rotation = t.rotation, this.matrixAutoUpdate = t.matrixAutoUpdate, this.matrix.copy(t.matrix), this.generateMipmaps = t.generateMipmaps, this.premultiplyAlpha = t.premultiplyAlpha, this.flipY = t.flipY, this.unpackAlignment = t.unpackAlignment, this.encoding = t.encoding, this;
        }
      }, {
        key: "toJSON",
        value: function toJSON(t) {
          var e = void 0 === t || "string" == typeof t;
          if (!e && void 0 !== t.textures[this.uuid]) return t.textures[this.uuid];
          var n = {
            metadata: {
              version: 4.5,
              type: "Texture",
              generator: "Texture.toJSON"
            },
            uuid: this.uuid,
            name: this.name,
            mapping: this.mapping,
            repeat: [this.repeat.x, this.repeat.y],
            offset: [this.offset.x, this.offset.y],
            center: [this.center.x, this.center.y],
            rotation: this.rotation,
            wrap: [this.wrapS, this.wrapT],
            format: this.format,
            type: this.type,
            encoding: this.encoding,
            minFilter: this.minFilter,
            magFilter: this.magFilter,
            anisotropy: this.anisotropy,
            flipY: this.flipY,
            premultiplyAlpha: this.premultiplyAlpha,
            unpackAlignment: this.unpackAlignment
          };

          if (void 0 !== this.image) {
            var _r4 = this.image;

            if (void 0 === _r4.uuid && (_r4.uuid = Fn.generateUUID()), !e && void 0 === t.images[_r4.uuid]) {
              var _e3;

              if (Array.isArray(_r4)) {
                _e3 = [];

                for (var _t3 = 0, _n5 = _r4.length; _t3 < _n5; _t3++) {
                  _r4[_t3].isDataTexture ? _e3.push(Vn(_r4[_t3].image)) : _e3.push(Vn(_r4[_t3]));
                }
              } else _e3 = Vn(_r4);

              t.images[_r4.uuid] = {
                uuid: _r4.uuid,
                url: _e3
              };
            }

            n.image = _r4.uuid;
          }

          return e || (t.textures[this.uuid] = n), n;
        }
      }, {
        key: "dispose",
        value: function dispose() {
          this.dispatchEvent({
            type: "dispose"
          });
        }
      }, {
        key: "transformUv",
        value: function transformUv(t) {
          if (this.mapping !== et) return t;
          if (t.applyMatrix3(this.matrix), t.x < 0 || t.x > 1) switch (this.wrapS) {
            case lt:
              t.x = t.x - Math.floor(t.x);
              break;

            case ct:
              t.x = t.x < 0 ? 0 : 1;
              break;

            case ht:
              1 === Math.abs(Math.floor(t.x) % 2) ? t.x = Math.ceil(t.x) - t.x : t.x = t.x - Math.floor(t.x);
          }
          if (t.y < 0 || t.y > 1) switch (this.wrapT) {
            case lt:
              t.y = t.y - Math.floor(t.y);
              break;

            case ct:
              t.y = t.y < 0 ? 0 : 1;
              break;

            case ht:
              1 === Math.abs(Math.floor(t.y) % 2) ? t.y = Math.ceil(t.y) - t.y : t.y = t.y - Math.floor(t.y);
          }
          return this.flipY && (t.y = 1 - t.y), t;
        }
      }, {
        key: "needsUpdate",
        set: function set(t) {
          !0 === t && this.version++;
        }
      }]);

      return kn;
    }(In);

    function Vn(t) {
      return "undefined" != typeof HTMLImageElement && t instanceof HTMLImageElement || "undefined" != typeof HTMLCanvasElement && t instanceof HTMLCanvasElement || "undefined" != typeof ImageBitmap && t instanceof ImageBitmap ? Hn.getDataURL(t) : t.data ? {
        data: Array.prototype.slice.call(t.data),
        width: t.width,
        height: t.height,
        type: t.data.constructor.name
      } : (console.warn("THREE.Texture: Unable to serialize Texture."), {});
    }

    exports.Texture = kn, kn.DEFAULT_IMAGE = void 0, kn.DEFAULT_MAPPING = et, kn.prototype.isTexture = !0;

    var Wn = /*#__PURE__*/function () {
      function Wn() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

        _classCallCheck(this, Wn);

        this.x = t, this.y = e, this.z = n, this.w = r;
      }

      _createClass(Wn, [{
        key: "width",
        get: function get() {
          return this.z;
        },
        set: function set(t) {
          this.z = t;
        }
      }, {
        key: "height",
        get: function get() {
          return this.w;
        },
        set: function set(t) {
          this.w = t;
        }
      }, {
        key: "set",
        value: function set(t, e, n, r) {
          return this.x = t, this.y = e, this.z = n, this.w = r, this;
        }
      }, {
        key: "setScalar",
        value: function setScalar(t) {
          return this.x = t, this.y = t, this.z = t, this.w = t, this;
        }
      }, {
        key: "setX",
        value: function setX(t) {
          return this.x = t, this;
        }
      }, {
        key: "setY",
        value: function setY(t) {
          return this.y = t, this;
        }
      }, {
        key: "setZ",
        value: function setZ(t) {
          return this.z = t, this;
        }
      }, {
        key: "setW",
        value: function setW(t) {
          return this.w = t, this;
        }
      }, {
        key: "setComponent",
        value: function setComponent(t, e) {
          switch (t) {
            case 0:
              this.x = e;
              break;

            case 1:
              this.y = e;
              break;

            case 2:
              this.z = e;
              break;

            case 3:
              this.w = e;
              break;

            default:
              throw new Error("index is out of range: " + t);
          }

          return this;
        }
      }, {
        key: "getComponent",
        value: function getComponent(t) {
          switch (t) {
            case 0:
              return this.x;

            case 1:
              return this.y;

            case 2:
              return this.z;

            case 3:
              return this.w;

            default:
              throw new Error("index is out of range: " + t);
          }
        }
      }, {
        key: "clone",
        value: function clone() {
          return new this.constructor(this.x, this.y, this.z, this.w);
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return this.x = t.x, this.y = t.y, this.z = t.z, this.w = void 0 !== t.w ? t.w : 1, this;
        }
      }, {
        key: "add",
        value: function add(t, e) {
          return void 0 !== e ? (console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(t, e)) : (this.x += t.x, this.y += t.y, this.z += t.z, this.w += t.w, this);
        }
      }, {
        key: "addScalar",
        value: function addScalar(t) {
          return this.x += t, this.y += t, this.z += t, this.w += t, this;
        }
      }, {
        key: "addVectors",
        value: function addVectors(t, e) {
          return this.x = t.x + e.x, this.y = t.y + e.y, this.z = t.z + e.z, this.w = t.w + e.w, this;
        }
      }, {
        key: "addScaledVector",
        value: function addScaledVector(t, e) {
          return this.x += t.x * e, this.y += t.y * e, this.z += t.z * e, this.w += t.w * e, this;
        }
      }, {
        key: "sub",
        value: function sub(t, e) {
          return void 0 !== e ? (console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(t, e)) : (this.x -= t.x, this.y -= t.y, this.z -= t.z, this.w -= t.w, this);
        }
      }, {
        key: "subScalar",
        value: function subScalar(t) {
          return this.x -= t, this.y -= t, this.z -= t, this.w -= t, this;
        }
      }, {
        key: "subVectors",
        value: function subVectors(t, e) {
          return this.x = t.x - e.x, this.y = t.y - e.y, this.z = t.z - e.z, this.w = t.w - e.w, this;
        }
      }, {
        key: "multiply",
        value: function multiply(t) {
          return this.x *= t.x, this.y *= t.y, this.z *= t.z, this.w *= t.w, this;
        }
      }, {
        key: "multiplyScalar",
        value: function multiplyScalar(t) {
          return this.x *= t, this.y *= t, this.z *= t, this.w *= t, this;
        }
      }, {
        key: "applyMatrix4",
        value: function applyMatrix4(t) {
          var e = this.x,
              n = this.y,
              r = this.z,
              i = this.w,
              s = t.elements;
          return this.x = s[0] * e + s[4] * n + s[8] * r + s[12] * i, this.y = s[1] * e + s[5] * n + s[9] * r + s[13] * i, this.z = s[2] * e + s[6] * n + s[10] * r + s[14] * i, this.w = s[3] * e + s[7] * n + s[11] * r + s[15] * i, this;
        }
      }, {
        key: "divideScalar",
        value: function divideScalar(t) {
          return this.multiplyScalar(1 / t);
        }
      }, {
        key: "setAxisAngleFromQuaternion",
        value: function setAxisAngleFromQuaternion(t) {
          this.w = 2 * Math.acos(t.w);
          var e = Math.sqrt(1 - t.w * t.w);
          return e < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = t.x / e, this.y = t.y / e, this.z = t.z / e), this;
        }
      }, {
        key: "setAxisAngleFromRotationMatrix",
        value: function setAxisAngleFromRotationMatrix(t) {
          var e, n, r, i;
          var s = t.elements,
              o = s[0],
              a = s[4],
              l = s[8],
              c = s[1],
              h = s[5],
              u = s[9],
              p = s[2],
              d = s[6],
              m = s[10];

          if (Math.abs(a - c) < .01 && Math.abs(l - p) < .01 && Math.abs(u - d) < .01) {
            if (Math.abs(a + c) < .1 && Math.abs(l + p) < .1 && Math.abs(u + d) < .1 && Math.abs(o + h + m - 3) < .1) return this.set(1, 0, 0, 0), this;
            e = Math.PI;

            var _t4 = (o + 1) / 2,
                _s2 = (h + 1) / 2,
                _f2 = (m + 1) / 2,
                _g2 = (a + c) / 4,
                _x2 = (l + p) / 4,
                _v = (u + d) / 4;

            return _t4 > _s2 && _t4 > _f2 ? _t4 < .01 ? (n = 0, r = .707106781, i = .707106781) : (r = _g2 / (n = Math.sqrt(_t4)), i = _x2 / n) : _s2 > _f2 ? _s2 < .01 ? (n = .707106781, r = 0, i = .707106781) : (n = _g2 / (r = Math.sqrt(_s2)), i = _v / r) : _f2 < .01 ? (n = .707106781, r = .707106781, i = 0) : (n = _x2 / (i = Math.sqrt(_f2)), r = _v / i), this.set(n, r, i, e), this;
          }

          var f = Math.sqrt((d - u) * (d - u) + (l - p) * (l - p) + (c - a) * (c - a));
          return Math.abs(f) < .001 && (f = 1), this.x = (d - u) / f, this.y = (l - p) / f, this.z = (c - a) / f, this.w = Math.acos((o + h + m - 1) / 2), this;
        }
      }, {
        key: "min",
        value: function min(t) {
          return this.x = Math.min(this.x, t.x), this.y = Math.min(this.y, t.y), this.z = Math.min(this.z, t.z), this.w = Math.min(this.w, t.w), this;
        }
      }, {
        key: "max",
        value: function max(t) {
          return this.x = Math.max(this.x, t.x), this.y = Math.max(this.y, t.y), this.z = Math.max(this.z, t.z), this.w = Math.max(this.w, t.w), this;
        }
      }, {
        key: "clamp",
        value: function clamp(t, e) {
          return this.x = Math.max(t.x, Math.min(e.x, this.x)), this.y = Math.max(t.y, Math.min(e.y, this.y)), this.z = Math.max(t.z, Math.min(e.z, this.z)), this.w = Math.max(t.w, Math.min(e.w, this.w)), this;
        }
      }, {
        key: "clampScalar",
        value: function clampScalar(t, e) {
          return this.x = Math.max(t, Math.min(e, this.x)), this.y = Math.max(t, Math.min(e, this.y)), this.z = Math.max(t, Math.min(e, this.z)), this.w = Math.max(t, Math.min(e, this.w)), this;
        }
      }, {
        key: "clampLength",
        value: function clampLength(t, e) {
          var n = this.length();
          return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)));
        }
      }, {
        key: "floor",
        value: function floor() {
          return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this;
        }
      }, {
        key: "ceil",
        value: function ceil() {
          return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this;
        }
      }, {
        key: "round",
        value: function round() {
          return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this;
        }
      }, {
        key: "roundToZero",
        value: function roundToZero() {
          return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z), this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w), this;
        }
      }, {
        key: "negate",
        value: function negate() {
          return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this;
        }
      }, {
        key: "dot",
        value: function dot(t) {
          return this.x * t.x + this.y * t.y + this.z * t.z + this.w * t.w;
        }
      }, {
        key: "lengthSq",
        value: function lengthSq() {
          return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
        }
      }, {
        key: "length",
        value: function length() {
          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
        }
      }, {
        key: "manhattanLength",
        value: function manhattanLength() {
          return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
        }
      }, {
        key: "normalize",
        value: function normalize() {
          return this.divideScalar(this.length() || 1);
        }
      }, {
        key: "setLength",
        value: function setLength(t) {
          return this.normalize().multiplyScalar(t);
        }
      }, {
        key: "lerp",
        value: function lerp(t, e) {
          return this.x += (t.x - this.x) * e, this.y += (t.y - this.y) * e, this.z += (t.z - this.z) * e, this.w += (t.w - this.w) * e, this;
        }
      }, {
        key: "lerpVectors",
        value: function lerpVectors(t, e, n) {
          return this.x = t.x + (e.x - t.x) * n, this.y = t.y + (e.y - t.y) * n, this.z = t.z + (e.z - t.z) * n, this.w = t.w + (e.w - t.w) * n, this;
        }
      }, {
        key: "equals",
        value: function equals(t) {
          return t.x === this.x && t.y === this.y && t.z === this.z && t.w === this.w;
        }
      }, {
        key: "fromArray",
        value: function fromArray(t) {
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          return this.x = t[e], this.y = t[e + 1], this.z = t[e + 2], this.w = t[e + 3], this;
        }
      }, {
        key: "toArray",
        value: function toArray() {
          var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          return t[e] = this.x, t[e + 1] = this.y, t[e + 2] = this.z, t[e + 3] = this.w, t;
        }
      }, {
        key: "fromBufferAttribute",
        value: function fromBufferAttribute(t, e, n) {
          return void 0 !== n && console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."), this.x = t.getX(e), this.y = t.getY(e), this.z = t.getZ(e), this.w = t.getW(e), this;
        }
      }, {
        key: "random",
        value: function random() {
          return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this.w = Math.random(), this;
        }
      }]);

      return Wn;
    }();

    exports.Vector4 = Wn, Wn.prototype.isVector4 = !0;

    var jn = /*#__PURE__*/function (_In2) {
      _inherits(jn, _In2);

      var _super2 = _createSuper(jn);

      function jn(t, e, n) {
        var _this2;

        _classCallCheck(this, jn);

        _this2 = _super2.call(this), _this2.width = t, _this2.height = e, _this2.depth = 1, _this2.scissor = new Wn(0, 0, t, e), _this2.scissorTest = !1, _this2.viewport = new Wn(0, 0, t, e), n = n || {}, _this2.texture = new kn(void 0, n.mapping, n.wrapS, n.wrapT, n.magFilter, n.minFilter, n.format, n.type, n.anisotropy, n.encoding), _this2.texture.image = {}, _this2.texture.image.width = t, _this2.texture.image.height = e, _this2.texture.image.depth = 1, _this2.texture.generateMipmaps = void 0 !== n.generateMipmaps && n.generateMipmaps, _this2.texture.minFilter = void 0 !== n.minFilter ? n.minFilter : gt, _this2.depthBuffer = void 0 === n.depthBuffer || n.depthBuffer, _this2.stencilBuffer = void 0 !== n.stencilBuffer && n.stencilBuffer, _this2.depthTexture = void 0 !== n.depthTexture ? n.depthTexture : null;
        return _this2;
      }

      _createClass(jn, [{
        key: "setTexture",
        value: function setTexture(t) {
          t.image = {
            width: this.width,
            height: this.height,
            depth: this.depth
          }, this.texture = t;
        }
      }, {
        key: "setSize",
        value: function setSize(t, e) {
          var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
          this.width === t && this.height === e && this.depth === n || (this.width = t, this.height = e, this.depth = n, this.texture.image.width = t, this.texture.image.height = e, this.texture.image.depth = n, this.dispose()), this.viewport.set(0, 0, t, e), this.scissor.set(0, 0, t, e);
        }
      }, {
        key: "clone",
        value: function clone() {
          return new this.constructor().copy(this);
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return this.width = t.width, this.height = t.height, this.depth = t.depth, this.viewport.copy(t.viewport), this.texture = t.texture.clone(), this.depthBuffer = t.depthBuffer, this.stencilBuffer = t.stencilBuffer, this.depthTexture = t.depthTexture, this;
        }
      }, {
        key: "dispose",
        value: function dispose() {
          this.dispatchEvent({
            type: "dispose"
          });
        }
      }]);

      return jn;
    }(In);

    exports.WebGLRenderTarget = jn, jn.prototype.isWebGLRenderTarget = !0;

    var qn = /*#__PURE__*/function (_jn) {
      _inherits(qn, _jn);

      var _super3 = _createSuper(qn);

      function qn(t, e, n) {
        var _this3;

        _classCallCheck(this, qn);

        _this3 = _super3.call(this, t, e, n), _this3.samples = 4;
        return _this3;
      }

      _createClass(qn, [{
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(qn.prototype), "copy", this).call(this, t), this.samples = t.samples, this;
        }
      }]);

      return qn;
    }(jn);

    exports.WebGLMultisampleRenderTarget = qn, qn.prototype.isWebGLMultisampleRenderTarget = !0;

    var Xn = /*#__PURE__*/function () {
      function Xn() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

        _classCallCheck(this, Xn);

        this._x = t, this._y = e, this._z = n, this._w = r;
      }

      _createClass(Xn, [{
        key: "x",
        get: function get() {
          return this._x;
        },
        set: function set(t) {
          this._x = t, this._onChangeCallback();
        }
      }, {
        key: "y",
        get: function get() {
          return this._y;
        },
        set: function set(t) {
          this._y = t, this._onChangeCallback();
        }
      }, {
        key: "z",
        get: function get() {
          return this._z;
        },
        set: function set(t) {
          this._z = t, this._onChangeCallback();
        }
      }, {
        key: "w",
        get: function get() {
          return this._w;
        },
        set: function set(t) {
          this._w = t, this._onChangeCallback();
        }
      }, {
        key: "set",
        value: function set(t, e, n, r) {
          return this._x = t, this._y = e, this._z = n, this._w = r, this._onChangeCallback(), this;
        }
      }, {
        key: "clone",
        value: function clone() {
          return new this.constructor(this._x, this._y, this._z, this._w);
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return this._x = t.x, this._y = t.y, this._z = t.z, this._w = t.w, this._onChangeCallback(), this;
        }
      }, {
        key: "setFromEuler",
        value: function setFromEuler(t, e) {
          if (!t || !t.isEuler) throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
          var n = t._x,
              r = t._y,
              i = t._z,
              s = t._order,
              o = Math.cos,
              a = Math.sin,
              l = o(n / 2),
              c = o(r / 2),
              h = o(i / 2),
              u = a(n / 2),
              p = a(r / 2),
              d = a(i / 2);

          switch (s) {
            case "XYZ":
              this._x = u * c * h + l * p * d, this._y = l * p * h - u * c * d, this._z = l * c * d + u * p * h, this._w = l * c * h - u * p * d;
              break;

            case "YXZ":
              this._x = u * c * h + l * p * d, this._y = l * p * h - u * c * d, this._z = l * c * d - u * p * h, this._w = l * c * h + u * p * d;
              break;

            case "ZXY":
              this._x = u * c * h - l * p * d, this._y = l * p * h + u * c * d, this._z = l * c * d + u * p * h, this._w = l * c * h - u * p * d;
              break;

            case "ZYX":
              this._x = u * c * h - l * p * d, this._y = l * p * h + u * c * d, this._z = l * c * d - u * p * h, this._w = l * c * h + u * p * d;
              break;

            case "YZX":
              this._x = u * c * h + l * p * d, this._y = l * p * h + u * c * d, this._z = l * c * d - u * p * h, this._w = l * c * h - u * p * d;
              break;

            case "XZY":
              this._x = u * c * h - l * p * d, this._y = l * p * h - u * c * d, this._z = l * c * d + u * p * h, this._w = l * c * h + u * p * d;
              break;

            default:
              console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + s);
          }

          return !1 !== e && this._onChangeCallback(), this;
        }
      }, {
        key: "setFromAxisAngle",
        value: function setFromAxisAngle(t, e) {
          var n = e / 2,
              r = Math.sin(n);
          return this._x = t.x * r, this._y = t.y * r, this._z = t.z * r, this._w = Math.cos(n), this._onChangeCallback(), this;
        }
      }, {
        key: "setFromRotationMatrix",
        value: function setFromRotationMatrix(t) {
          var e = t.elements,
              n = e[0],
              r = e[4],
              i = e[8],
              s = e[1],
              o = e[5],
              a = e[9],
              l = e[2],
              c = e[6],
              h = e[10],
              u = n + o + h;

          if (u > 0) {
            var _t5 = .5 / Math.sqrt(u + 1);

            this._w = .25 / _t5, this._x = (c - a) * _t5, this._y = (i - l) * _t5, this._z = (s - r) * _t5;
          } else if (n > o && n > h) {
            var _t6 = 2 * Math.sqrt(1 + n - o - h);

            this._w = (c - a) / _t6, this._x = .25 * _t6, this._y = (r + s) / _t6, this._z = (i + l) / _t6;
          } else if (o > h) {
            var _t7 = 2 * Math.sqrt(1 + o - n - h);

            this._w = (i - l) / _t7, this._x = (r + s) / _t7, this._y = .25 * _t7, this._z = (a + c) / _t7;
          } else {
            var _t8 = 2 * Math.sqrt(1 + h - n - o);

            this._w = (s - r) / _t8, this._x = (i + l) / _t8, this._y = (a + c) / _t8, this._z = .25 * _t8;
          }

          return this._onChangeCallback(), this;
        }
      }, {
        key: "setFromUnitVectors",
        value: function setFromUnitVectors(t, e) {
          var n = t.dot(e) + 1;
          return n < Number.EPSILON ? (n = 0, Math.abs(t.x) > Math.abs(t.z) ? (this._x = -t.y, this._y = t.x, this._z = 0, this._w = n) : (this._x = 0, this._y = -t.z, this._z = t.y, this._w = n)) : (this._x = t.y * e.z - t.z * e.y, this._y = t.z * e.x - t.x * e.z, this._z = t.x * e.y - t.y * e.x, this._w = n), this.normalize();
        }
      }, {
        key: "angleTo",
        value: function angleTo(t) {
          return 2 * Math.acos(Math.abs(Fn.clamp(this.dot(t), -1, 1)));
        }
      }, {
        key: "rotateTowards",
        value: function rotateTowards(t, e) {
          var n = this.angleTo(t);
          if (0 === n) return this;
          var r = Math.min(1, e / n);
          return this.slerp(t, r), this;
        }
      }, {
        key: "identity",
        value: function identity() {
          return this.set(0, 0, 0, 1);
        }
      }, {
        key: "invert",
        value: function invert() {
          return this.conjugate();
        }
      }, {
        key: "conjugate",
        value: function conjugate() {
          return this._x *= -1, this._y *= -1, this._z *= -1, this._onChangeCallback(), this;
        }
      }, {
        key: "dot",
        value: function dot(t) {
          return this._x * t._x + this._y * t._y + this._z * t._z + this._w * t._w;
        }
      }, {
        key: "lengthSq",
        value: function lengthSq() {
          return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
        }
      }, {
        key: "length",
        value: function length() {
          return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
        }
      }, {
        key: "normalize",
        value: function normalize() {
          var t = this.length();
          return 0 === t ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (t = 1 / t, this._x = this._x * t, this._y = this._y * t, this._z = this._z * t, this._w = this._w * t), this._onChangeCallback(), this;
        }
      }, {
        key: "multiply",
        value: function multiply(t, e) {
          return void 0 !== e ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."), this.multiplyQuaternions(t, e)) : this.multiplyQuaternions(this, t);
        }
      }, {
        key: "premultiply",
        value: function premultiply(t) {
          return this.multiplyQuaternions(t, this);
        }
      }, {
        key: "multiplyQuaternions",
        value: function multiplyQuaternions(t, e) {
          var n = t._x,
              r = t._y,
              i = t._z,
              s = t._w,
              o = e._x,
              a = e._y,
              l = e._z,
              c = e._w;
          return this._x = n * c + s * o + r * l - i * a, this._y = r * c + s * a + i * o - n * l, this._z = i * c + s * l + n * a - r * o, this._w = s * c - n * o - r * a - i * l, this._onChangeCallback(), this;
        }
      }, {
        key: "slerp",
        value: function slerp(t, e) {
          if (0 === e) return this;
          if (1 === e) return this.copy(t);
          var n = this._x,
              r = this._y,
              i = this._z,
              s = this._w;
          var o = s * t._w + n * t._x + r * t._y + i * t._z;
          if (o < 0 ? (this._w = -t._w, this._x = -t._x, this._y = -t._y, this._z = -t._z, o = -o) : this.copy(t), o >= 1) return this._w = s, this._x = n, this._y = r, this._z = i, this;
          var a = 1 - o * o;

          if (a <= Number.EPSILON) {
            var _t9 = 1 - e;

            return this._w = _t9 * s + e * this._w, this._x = _t9 * n + e * this._x, this._y = _t9 * r + e * this._y, this._z = _t9 * i + e * this._z, this.normalize(), this._onChangeCallback(), this;
          }

          var l = Math.sqrt(a),
              c = Math.atan2(l, o),
              h = Math.sin((1 - e) * c) / l,
              u = Math.sin(e * c) / l;
          return this._w = s * h + this._w * u, this._x = n * h + this._x * u, this._y = r * h + this._y * u, this._z = i * h + this._z * u, this._onChangeCallback(), this;
        }
      }, {
        key: "slerpQuaternions",
        value: function slerpQuaternions(t, e, n) {
          this.copy(t).slerp(e, n);
        }
      }, {
        key: "equals",
        value: function equals(t) {
          return t._x === this._x && t._y === this._y && t._z === this._z && t._w === this._w;
        }
      }, {
        key: "fromArray",
        value: function fromArray(t) {
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          return this._x = t[e], this._y = t[e + 1], this._z = t[e + 2], this._w = t[e + 3], this._onChangeCallback(), this;
        }
      }, {
        key: "toArray",
        value: function toArray() {
          var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          return t[e] = this._x, t[e + 1] = this._y, t[e + 2] = this._z, t[e + 3] = this._w, t;
        }
      }, {
        key: "fromBufferAttribute",
        value: function fromBufferAttribute(t, e) {
          return this._x = t.getX(e), this._y = t.getY(e), this._z = t.getZ(e), this._w = t.getW(e), this;
        }
      }, {
        key: "_onChange",
        value: function _onChange(t) {
          return this._onChangeCallback = t, this;
        }
      }, {
        key: "_onChangeCallback",
        value: function _onChangeCallback() {}
      }], [{
        key: "slerp",
        value: function slerp(t, e, n, r) {
          return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."), n.slerpQuaternions(t, e, r);
        }
      }, {
        key: "slerpFlat",
        value: function slerpFlat(t, e, n, r, i, s, o) {
          var a = n[r + 0],
              l = n[r + 1],
              c = n[r + 2],
              h = n[r + 3];
          var u = i[s + 0],
              p = i[s + 1],
              d = i[s + 2],
              m = i[s + 3];
          if (0 === o) return t[e + 0] = a, t[e + 1] = l, t[e + 2] = c, void (t[e + 3] = h);
          if (1 === o) return t[e + 0] = u, t[e + 1] = p, t[e + 2] = d, void (t[e + 3] = m);

          if (h !== m || a !== u || l !== p || c !== d) {
            var _t10 = 1 - o;

            var _e4 = a * u + l * p + c * d + h * m,
                _n6 = _e4 >= 0 ? 1 : -1,
                _r5 = 1 - _e4 * _e4;

            if (_r5 > Number.EPSILON) {
              var _i3 = Math.sqrt(_r5),
                  _s3 = Math.atan2(_i3, _e4 * _n6);

              _t10 = Math.sin(_t10 * _s3) / _i3, o = Math.sin(o * _s3) / _i3;
            }

            var _i2 = o * _n6;

            if (a = a * _t10 + u * _i2, l = l * _t10 + p * _i2, c = c * _t10 + d * _i2, h = h * _t10 + m * _i2, _t10 === 1 - o) {
              var _t11 = 1 / Math.sqrt(a * a + l * l + c * c + h * h);

              a *= _t11, l *= _t11, c *= _t11, h *= _t11;
            }
          }

          t[e] = a, t[e + 1] = l, t[e + 2] = c, t[e + 3] = h;
        }
      }, {
        key: "multiplyQuaternionsFlat",
        value: function multiplyQuaternionsFlat(t, e, n, r, i, s) {
          var o = n[r],
              a = n[r + 1],
              l = n[r + 2],
              c = n[r + 3],
              h = i[s],
              u = i[s + 1],
              p = i[s + 2],
              d = i[s + 3];
          return t[e] = o * d + c * h + a * p - l * u, t[e + 1] = a * d + c * u + l * h - o * p, t[e + 2] = l * d + c * p + o * u - a * h, t[e + 3] = c * d - o * h - a * u - l * p, t;
        }
      }]);

      return Xn;
    }();

    exports.Quaternion = Xn, Xn.prototype.isQuaternion = !0;

    var Yn = /*#__PURE__*/function () {
      function Yn() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

        _classCallCheck(this, Yn);

        this.x = t, this.y = e, this.z = n;
      }

      _createClass(Yn, [{
        key: "set",
        value: function set(t, e, n) {
          return void 0 === n && (n = this.z), this.x = t, this.y = e, this.z = n, this;
        }
      }, {
        key: "setScalar",
        value: function setScalar(t) {
          return this.x = t, this.y = t, this.z = t, this;
        }
      }, {
        key: "setX",
        value: function setX(t) {
          return this.x = t, this;
        }
      }, {
        key: "setY",
        value: function setY(t) {
          return this.y = t, this;
        }
      }, {
        key: "setZ",
        value: function setZ(t) {
          return this.z = t, this;
        }
      }, {
        key: "setComponent",
        value: function setComponent(t, e) {
          switch (t) {
            case 0:
              this.x = e;
              break;

            case 1:
              this.y = e;
              break;

            case 2:
              this.z = e;
              break;

            default:
              throw new Error("index is out of range: " + t);
          }

          return this;
        }
      }, {
        key: "getComponent",
        value: function getComponent(t) {
          switch (t) {
            case 0:
              return this.x;

            case 1:
              return this.y;

            case 2:
              return this.z;

            default:
              throw new Error("index is out of range: " + t);
          }
        }
      }, {
        key: "clone",
        value: function clone() {
          return new this.constructor(this.x, this.y, this.z);
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return this.x = t.x, this.y = t.y, this.z = t.z, this;
        }
      }, {
        key: "add",
        value: function add(t, e) {
          return void 0 !== e ? (console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(t, e)) : (this.x += t.x, this.y += t.y, this.z += t.z, this);
        }
      }, {
        key: "addScalar",
        value: function addScalar(t) {
          return this.x += t, this.y += t, this.z += t, this;
        }
      }, {
        key: "addVectors",
        value: function addVectors(t, e) {
          return this.x = t.x + e.x, this.y = t.y + e.y, this.z = t.z + e.z, this;
        }
      }, {
        key: "addScaledVector",
        value: function addScaledVector(t, e) {
          return this.x += t.x * e, this.y += t.y * e, this.z += t.z * e, this;
        }
      }, {
        key: "sub",
        value: function sub(t, e) {
          return void 0 !== e ? (console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(t, e)) : (this.x -= t.x, this.y -= t.y, this.z -= t.z, this);
        }
      }, {
        key: "subScalar",
        value: function subScalar(t) {
          return this.x -= t, this.y -= t, this.z -= t, this;
        }
      }, {
        key: "subVectors",
        value: function subVectors(t, e) {
          return this.x = t.x - e.x, this.y = t.y - e.y, this.z = t.z - e.z, this;
        }
      }, {
        key: "multiply",
        value: function multiply(t, e) {
          return void 0 !== e ? (console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."), this.multiplyVectors(t, e)) : (this.x *= t.x, this.y *= t.y, this.z *= t.z, this);
        }
      }, {
        key: "multiplyScalar",
        value: function multiplyScalar(t) {
          return this.x *= t, this.y *= t, this.z *= t, this;
        }
      }, {
        key: "multiplyVectors",
        value: function multiplyVectors(t, e) {
          return this.x = t.x * e.x, this.y = t.y * e.y, this.z = t.z * e.z, this;
        }
      }, {
        key: "applyEuler",
        value: function applyEuler(t) {
          return t && t.isEuler || console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."), this.applyQuaternion(Jn.setFromEuler(t));
        }
      }, {
        key: "applyAxisAngle",
        value: function applyAxisAngle(t, e) {
          return this.applyQuaternion(Jn.setFromAxisAngle(t, e));
        }
      }, {
        key: "applyMatrix3",
        value: function applyMatrix3(t) {
          var e = this.x,
              n = this.y,
              r = this.z,
              i = t.elements;
          return this.x = i[0] * e + i[3] * n + i[6] * r, this.y = i[1] * e + i[4] * n + i[7] * r, this.z = i[2] * e + i[5] * n + i[8] * r, this;
        }
      }, {
        key: "applyNormalMatrix",
        value: function applyNormalMatrix(t) {
          return this.applyMatrix3(t).normalize();
        }
      }, {
        key: "applyMatrix4",
        value: function applyMatrix4(t) {
          var e = this.x,
              n = this.y,
              r = this.z,
              i = t.elements,
              s = 1 / (i[3] * e + i[7] * n + i[11] * r + i[15]);
          return this.x = (i[0] * e + i[4] * n + i[8] * r + i[12]) * s, this.y = (i[1] * e + i[5] * n + i[9] * r + i[13]) * s, this.z = (i[2] * e + i[6] * n + i[10] * r + i[14]) * s, this;
        }
      }, {
        key: "applyQuaternion",
        value: function applyQuaternion(t) {
          var e = this.x,
              n = this.y,
              r = this.z,
              i = t.x,
              s = t.y,
              o = t.z,
              a = t.w,
              l = a * e + s * r - o * n,
              c = a * n + o * e - i * r,
              h = a * r + i * n - s * e,
              u = -i * e - s * n - o * r;
          return this.x = l * a + u * -i + c * -o - h * -s, this.y = c * a + u * -s + h * -i - l * -o, this.z = h * a + u * -o + l * -s - c * -i, this;
        }
      }, {
        key: "project",
        value: function project(t) {
          return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix);
        }
      }, {
        key: "unproject",
        value: function unproject(t) {
          return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld);
        }
      }, {
        key: "transformDirection",
        value: function transformDirection(t) {
          var e = this.x,
              n = this.y,
              r = this.z,
              i = t.elements;
          return this.x = i[0] * e + i[4] * n + i[8] * r, this.y = i[1] * e + i[5] * n + i[9] * r, this.z = i[2] * e + i[6] * n + i[10] * r, this.normalize();
        }
      }, {
        key: "divide",
        value: function divide(t) {
          return this.x /= t.x, this.y /= t.y, this.z /= t.z, this;
        }
      }, {
        key: "divideScalar",
        value: function divideScalar(t) {
          return this.multiplyScalar(1 / t);
        }
      }, {
        key: "min",
        value: function min(t) {
          return this.x = Math.min(this.x, t.x), this.y = Math.min(this.y, t.y), this.z = Math.min(this.z, t.z), this;
        }
      }, {
        key: "max",
        value: function max(t) {
          return this.x = Math.max(this.x, t.x), this.y = Math.max(this.y, t.y), this.z = Math.max(this.z, t.z), this;
        }
      }, {
        key: "clamp",
        value: function clamp(t, e) {
          return this.x = Math.max(t.x, Math.min(e.x, this.x)), this.y = Math.max(t.y, Math.min(e.y, this.y)), this.z = Math.max(t.z, Math.min(e.z, this.z)), this;
        }
      }, {
        key: "clampScalar",
        value: function clampScalar(t, e) {
          return this.x = Math.max(t, Math.min(e, this.x)), this.y = Math.max(t, Math.min(e, this.y)), this.z = Math.max(t, Math.min(e, this.z)), this;
        }
      }, {
        key: "clampLength",
        value: function clampLength(t, e) {
          var n = this.length();
          return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)));
        }
      }, {
        key: "floor",
        value: function floor() {
          return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this;
        }
      }, {
        key: "ceil",
        value: function ceil() {
          return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this;
        }
      }, {
        key: "round",
        value: function round() {
          return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this;
        }
      }, {
        key: "roundToZero",
        value: function roundToZero() {
          return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z), this;
        }
      }, {
        key: "negate",
        value: function negate() {
          return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
        }
      }, {
        key: "dot",
        value: function dot(t) {
          return this.x * t.x + this.y * t.y + this.z * t.z;
        }
      }, {
        key: "lengthSq",
        value: function lengthSq() {
          return this.x * this.x + this.y * this.y + this.z * this.z;
        }
      }, {
        key: "length",
        value: function length() {
          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
        }
      }, {
        key: "manhattanLength",
        value: function manhattanLength() {
          return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
        }
      }, {
        key: "normalize",
        value: function normalize() {
          return this.divideScalar(this.length() || 1);
        }
      }, {
        key: "setLength",
        value: function setLength(t) {
          return this.normalize().multiplyScalar(t);
        }
      }, {
        key: "lerp",
        value: function lerp(t, e) {
          return this.x += (t.x - this.x) * e, this.y += (t.y - this.y) * e, this.z += (t.z - this.z) * e, this;
        }
      }, {
        key: "lerpVectors",
        value: function lerpVectors(t, e, n) {
          return this.x = t.x + (e.x - t.x) * n, this.y = t.y + (e.y - t.y) * n, this.z = t.z + (e.z - t.z) * n, this;
        }
      }, {
        key: "cross",
        value: function cross(t, e) {
          return void 0 !== e ? (console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."), this.crossVectors(t, e)) : this.crossVectors(this, t);
        }
      }, {
        key: "crossVectors",
        value: function crossVectors(t, e) {
          var n = t.x,
              r = t.y,
              i = t.z,
              s = e.x,
              o = e.y,
              a = e.z;
          return this.x = r * a - i * o, this.y = i * s - n * a, this.z = n * o - r * s, this;
        }
      }, {
        key: "projectOnVector",
        value: function projectOnVector(t) {
          var e = t.lengthSq();
          if (0 === e) return this.set(0, 0, 0);
          var n = t.dot(this) / e;
          return this.copy(t).multiplyScalar(n);
        }
      }, {
        key: "projectOnPlane",
        value: function projectOnPlane(t) {
          return Zn.copy(this).projectOnVector(t), this.sub(Zn);
        }
      }, {
        key: "reflect",
        value: function reflect(t) {
          return this.sub(Zn.copy(t).multiplyScalar(2 * this.dot(t)));
        }
      }, {
        key: "angleTo",
        value: function angleTo(t) {
          var e = Math.sqrt(this.lengthSq() * t.lengthSq());
          if (0 === e) return Math.PI / 2;
          var n = this.dot(t) / e;
          return Math.acos(Fn.clamp(n, -1, 1));
        }
      }, {
        key: "distanceTo",
        value: function distanceTo(t) {
          return Math.sqrt(this.distanceToSquared(t));
        }
      }, {
        key: "distanceToSquared",
        value: function distanceToSquared(t) {
          var e = this.x - t.x,
              n = this.y - t.y,
              r = this.z - t.z;
          return e * e + n * n + r * r;
        }
      }, {
        key: "manhattanDistanceTo",
        value: function manhattanDistanceTo(t) {
          return Math.abs(this.x - t.x) + Math.abs(this.y - t.y) + Math.abs(this.z - t.z);
        }
      }, {
        key: "setFromSpherical",
        value: function setFromSpherical(t) {
          return this.setFromSphericalCoords(t.radius, t.phi, t.theta);
        }
      }, {
        key: "setFromSphericalCoords",
        value: function setFromSphericalCoords(t, e, n) {
          var r = Math.sin(e) * t;
          return this.x = r * Math.sin(n), this.y = Math.cos(e) * t, this.z = r * Math.cos(n), this;
        }
      }, {
        key: "setFromCylindrical",
        value: function setFromCylindrical(t) {
          return this.setFromCylindricalCoords(t.radius, t.theta, t.y);
        }
      }, {
        key: "setFromCylindricalCoords",
        value: function setFromCylindricalCoords(t, e, n) {
          return this.x = t * Math.sin(e), this.y = n, this.z = t * Math.cos(e), this;
        }
      }, {
        key: "setFromMatrixPosition",
        value: function setFromMatrixPosition(t) {
          var e = t.elements;
          return this.x = e[12], this.y = e[13], this.z = e[14], this;
        }
      }, {
        key: "setFromMatrixScale",
        value: function setFromMatrixScale(t) {
          var e = this.setFromMatrixColumn(t, 0).length(),
              n = this.setFromMatrixColumn(t, 1).length(),
              r = this.setFromMatrixColumn(t, 2).length();
          return this.x = e, this.y = n, this.z = r, this;
        }
      }, {
        key: "setFromMatrixColumn",
        value: function setFromMatrixColumn(t, e) {
          return this.fromArray(t.elements, 4 * e);
        }
      }, {
        key: "setFromMatrix3Column",
        value: function setFromMatrix3Column(t, e) {
          return this.fromArray(t.elements, 3 * e);
        }
      }, {
        key: "equals",
        value: function equals(t) {
          return t.x === this.x && t.y === this.y && t.z === this.z;
        }
      }, {
        key: "fromArray",
        value: function fromArray(t) {
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          return this.x = t[e], this.y = t[e + 1], this.z = t[e + 2], this;
        }
      }, {
        key: "toArray",
        value: function toArray() {
          var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          return t[e] = this.x, t[e + 1] = this.y, t[e + 2] = this.z, t;
        }
      }, {
        key: "fromBufferAttribute",
        value: function fromBufferAttribute(t, e, n) {
          return void 0 !== n && console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."), this.x = t.getX(e), this.y = t.getY(e), this.z = t.getZ(e), this;
        }
      }, {
        key: "random",
        value: function random() {
          return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this;
        }
      }]);

      return Yn;
    }();

    exports.Vector3 = Yn, Yn.prototype.isVector3 = !0;
    var Zn = new Yn(),
        Jn = new Xn();

    var Qn = /*#__PURE__*/function () {
      function Qn() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Yn(1 / 0, 1 / 0, 1 / 0);
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Yn(-1 / 0, -1 / 0, -1 / 0);

        _classCallCheck(this, Qn);

        this.min = t, this.max = e;
      }

      _createClass(Qn, [{
        key: "set",
        value: function set(t, e) {
          return this.min.copy(t), this.max.copy(e), this;
        }
      }, {
        key: "setFromArray",
        value: function setFromArray(t) {
          var e = 1 / 0,
              n = 1 / 0,
              r = 1 / 0,
              i = -1 / 0,
              s = -1 / 0,
              o = -1 / 0;

          for (var _a2 = 0, _l2 = t.length; _a2 < _l2; _a2 += 3) {
            var _l3 = t[_a2],
                _c2 = t[_a2 + 1],
                _h2 = t[_a2 + 2];
            _l3 < e && (e = _l3), _c2 < n && (n = _c2), _h2 < r && (r = _h2), _l3 > i && (i = _l3), _c2 > s && (s = _c2), _h2 > o && (o = _h2);
          }

          return this.min.set(e, n, r), this.max.set(i, s, o), this;
        }
      }, {
        key: "setFromBufferAttribute",
        value: function setFromBufferAttribute(t) {
          var e = 1 / 0,
              n = 1 / 0,
              r = 1 / 0,
              i = -1 / 0,
              s = -1 / 0,
              o = -1 / 0;

          for (var _a3 = 0, _l4 = t.count; _a3 < _l4; _a3++) {
            var _l5 = t.getX(_a3),
                _c3 = t.getY(_a3),
                _h3 = t.getZ(_a3);

            _l5 < e && (e = _l5), _c3 < n && (n = _c3), _h3 < r && (r = _h3), _l5 > i && (i = _l5), _c3 > s && (s = _c3), _h3 > o && (o = _h3);
          }

          return this.min.set(e, n, r), this.max.set(i, s, o), this;
        }
      }, {
        key: "setFromPoints",
        value: function setFromPoints(t) {
          this.makeEmpty();

          for (var _e5 = 0, _n7 = t.length; _e5 < _n7; _e5++) {
            this.expandByPoint(t[_e5]);
          }

          return this;
        }
      }, {
        key: "setFromCenterAndSize",
        value: function setFromCenterAndSize(t, e) {
          var n = $n.copy(e).multiplyScalar(.5);
          return this.min.copy(t).sub(n), this.max.copy(t).add(n), this;
        }
      }, {
        key: "setFromObject",
        value: function setFromObject(t) {
          return this.makeEmpty(), this.expandByObject(t);
        }
      }, {
        key: "clone",
        value: function clone() {
          return new this.constructor().copy(this);
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return this.min.copy(t.min), this.max.copy(t.max), this;
        }
      }, {
        key: "makeEmpty",
        value: function makeEmpty() {
          return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this;
        }
      }, {
        key: "isEmpty",
        value: function isEmpty() {
          return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
        }
      }, {
        key: "getCenter",
        value: function getCenter(t) {
          return void 0 === t && (console.warn("THREE.Box3: .getCenter() target is now required"), t = new Yn()), this.isEmpty() ? t.set(0, 0, 0) : t.addVectors(this.min, this.max).multiplyScalar(.5);
        }
      }, {
        key: "getSize",
        value: function getSize(t) {
          return void 0 === t && (console.warn("THREE.Box3: .getSize() target is now required"), t = new Yn()), this.isEmpty() ? t.set(0, 0, 0) : t.subVectors(this.max, this.min);
        }
      }, {
        key: "expandByPoint",
        value: function expandByPoint(t) {
          return this.min.min(t), this.max.max(t), this;
        }
      }, {
        key: "expandByVector",
        value: function expandByVector(t) {
          return this.min.sub(t), this.max.add(t), this;
        }
      }, {
        key: "expandByScalar",
        value: function expandByScalar(t) {
          return this.min.addScalar(-t), this.max.addScalar(t), this;
        }
      }, {
        key: "expandByObject",
        value: function expandByObject(t) {
          t.updateWorldMatrix(!1, !1);
          var e = t.geometry;
          void 0 !== e && (null === e.boundingBox && e.computeBoundingBox(), tr.copy(e.boundingBox), tr.applyMatrix4(t.matrixWorld), this.union(tr));
          var n = t.children;

          for (var _r6 = 0, _i4 = n.length; _r6 < _i4; _r6++) {
            this.expandByObject(n[_r6]);
          }

          return this;
        }
      }, {
        key: "containsPoint",
        value: function containsPoint(t) {
          return !(t.x < this.min.x || t.x > this.max.x || t.y < this.min.y || t.y > this.max.y || t.z < this.min.z || t.z > this.max.z);
        }
      }, {
        key: "containsBox",
        value: function containsBox(t) {
          return this.min.x <= t.min.x && t.max.x <= this.max.x && this.min.y <= t.min.y && t.max.y <= this.max.y && this.min.z <= t.min.z && t.max.z <= this.max.z;
        }
      }, {
        key: "getParameter",
        value: function getParameter(t, e) {
          return void 0 === e && (console.warn("THREE.Box3: .getParameter() target is now required"), e = new Yn()), e.set((t.x - this.min.x) / (this.max.x - this.min.x), (t.y - this.min.y) / (this.max.y - this.min.y), (t.z - this.min.z) / (this.max.z - this.min.z));
        }
      }, {
        key: "intersectsBox",
        value: function intersectsBox(t) {
          return !(t.max.x < this.min.x || t.min.x > this.max.x || t.max.y < this.min.y || t.min.y > this.max.y || t.max.z < this.min.z || t.min.z > this.max.z);
        }
      }, {
        key: "intersectsSphere",
        value: function intersectsSphere(t) {
          return this.clampPoint(t.center, $n), $n.distanceToSquared(t.center) <= t.radius * t.radius;
        }
      }, {
        key: "intersectsPlane",
        value: function intersectsPlane(t) {
          var e, n;
          return t.normal.x > 0 ? (e = t.normal.x * this.min.x, n = t.normal.x * this.max.x) : (e = t.normal.x * this.max.x, n = t.normal.x * this.min.x), t.normal.y > 0 ? (e += t.normal.y * this.min.y, n += t.normal.y * this.max.y) : (e += t.normal.y * this.max.y, n += t.normal.y * this.min.y), t.normal.z > 0 ? (e += t.normal.z * this.min.z, n += t.normal.z * this.max.z) : (e += t.normal.z * this.max.z, n += t.normal.z * this.min.z), e <= -t.constant && n >= -t.constant;
        }
      }, {
        key: "intersectsTriangle",
        value: function intersectsTriangle(t) {
          if (this.isEmpty()) return !1;
          this.getCenter(ar), lr.subVectors(this.max, ar), er.subVectors(t.a, ar), nr.subVectors(t.b, ar), rr.subVectors(t.c, ar), ir.subVectors(nr, er), sr.subVectors(rr, nr), or.subVectors(er, rr);
          var e = [0, -ir.z, ir.y, 0, -sr.z, sr.y, 0, -or.z, or.y, ir.z, 0, -ir.x, sr.z, 0, -sr.x, or.z, 0, -or.x, -ir.y, ir.x, 0, -sr.y, sr.x, 0, -or.y, or.x, 0];
          return !!ur(e, er, nr, rr, lr) && !!ur(e = [1, 0, 0, 0, 1, 0, 0, 0, 1], er, nr, rr, lr) && (cr.crossVectors(ir, sr), ur(e = [cr.x, cr.y, cr.z], er, nr, rr, lr));
        }
      }, {
        key: "clampPoint",
        value: function clampPoint(t, e) {
          return void 0 === e && (console.warn("THREE.Box3: .clampPoint() target is now required"), e = new Yn()), e.copy(t).clamp(this.min, this.max);
        }
      }, {
        key: "distanceToPoint",
        value: function distanceToPoint(t) {
          return $n.copy(t).clamp(this.min, this.max).sub(t).length();
        }
      }, {
        key: "getBoundingSphere",
        value: function getBoundingSphere(t) {
          return void 0 === t && console.error("THREE.Box3: .getBoundingSphere() target is now required"), this.getCenter(t.center), t.radius = .5 * this.getSize($n).length(), t;
        }
      }, {
        key: "intersect",
        value: function intersect(t) {
          return this.min.max(t.min), this.max.min(t.max), this.isEmpty() && this.makeEmpty(), this;
        }
      }, {
        key: "union",
        value: function union(t) {
          return this.min.min(t.min), this.max.max(t.max), this;
        }
      }, {
        key: "applyMatrix4",
        value: function applyMatrix4(t) {
          return this.isEmpty() ? this : (Kn[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(t), Kn[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(t), Kn[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(t), Kn[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(t), Kn[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(t), Kn[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(t), Kn[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(t), Kn[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(t), this.setFromPoints(Kn), this);
        }
      }, {
        key: "translate",
        value: function translate(t) {
          return this.min.add(t), this.max.add(t), this;
        }
      }, {
        key: "equals",
        value: function equals(t) {
          return t.min.equals(this.min) && t.max.equals(this.max);
        }
      }]);

      return Qn;
    }();

    exports.Box3 = Qn, Qn.prototype.isBox3 = !0;
    var Kn = [new Yn(), new Yn(), new Yn(), new Yn(), new Yn(), new Yn(), new Yn(), new Yn()],
        $n = new Yn(),
        tr = new Qn(),
        er = new Yn(),
        nr = new Yn(),
        rr = new Yn(),
        ir = new Yn(),
        sr = new Yn(),
        or = new Yn(),
        ar = new Yn(),
        lr = new Yn(),
        cr = new Yn(),
        hr = new Yn();

    function ur(t, e, n, r, i) {
      for (var _s4 = 0, _o2 = t.length - 3; _s4 <= _o2; _s4 += 3) {
        hr.fromArray(t, _s4);

        var _o3 = i.x * Math.abs(hr.x) + i.y * Math.abs(hr.y) + i.z * Math.abs(hr.z),
            _a4 = e.dot(hr),
            _l6 = n.dot(hr),
            _c4 = r.dot(hr);

        if (Math.max(-Math.max(_a4, _l6, _c4), Math.min(_a4, _l6, _c4)) > _o3) return !1;
      }

      return !0;
    }

    var pr = new Qn(),
        dr = new Yn(),
        mr = new Yn(),
        fr = new Yn();

    var gr = /*#__PURE__*/function () {
      function gr() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Yn();
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;

        _classCallCheck(this, gr);

        this.center = t, this.radius = e;
      }

      _createClass(gr, [{
        key: "set",
        value: function set(t, e) {
          return this.center.copy(t), this.radius = e, this;
        }
      }, {
        key: "setFromPoints",
        value: function setFromPoints(t, e) {
          var n = this.center;
          void 0 !== e ? n.copy(e) : pr.setFromPoints(t).getCenter(n);
          var r = 0;

          for (var _i5 = 0, _s5 = t.length; _i5 < _s5; _i5++) {
            r = Math.max(r, n.distanceToSquared(t[_i5]));
          }

          return this.radius = Math.sqrt(r), this;
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return this.center.copy(t.center), this.radius = t.radius, this;
        }
      }, {
        key: "isEmpty",
        value: function isEmpty() {
          return this.radius < 0;
        }
      }, {
        key: "makeEmpty",
        value: function makeEmpty() {
          return this.center.set(0, 0, 0), this.radius = -1, this;
        }
      }, {
        key: "containsPoint",
        value: function containsPoint(t) {
          return t.distanceToSquared(this.center) <= this.radius * this.radius;
        }
      }, {
        key: "distanceToPoint",
        value: function distanceToPoint(t) {
          return t.distanceTo(this.center) - this.radius;
        }
      }, {
        key: "intersectsSphere",
        value: function intersectsSphere(t) {
          var e = this.radius + t.radius;
          return t.center.distanceToSquared(this.center) <= e * e;
        }
      }, {
        key: "intersectsBox",
        value: function intersectsBox(t) {
          return t.intersectsSphere(this);
        }
      }, {
        key: "intersectsPlane",
        value: function intersectsPlane(t) {
          return Math.abs(t.distanceToPoint(this.center)) <= this.radius;
        }
      }, {
        key: "clampPoint",
        value: function clampPoint(t, e) {
          var n = this.center.distanceToSquared(t);
          return void 0 === e && (console.warn("THREE.Sphere: .clampPoint() target is now required"), e = new Yn()), e.copy(t), n > this.radius * this.radius && (e.sub(this.center).normalize(), e.multiplyScalar(this.radius).add(this.center)), e;
        }
      }, {
        key: "getBoundingBox",
        value: function getBoundingBox(t) {
          return void 0 === t && (console.warn("THREE.Sphere: .getBoundingBox() target is now required"), t = new Qn()), this.isEmpty() ? (t.makeEmpty(), t) : (t.set(this.center, this.center), t.expandByScalar(this.radius), t);
        }
      }, {
        key: "applyMatrix4",
        value: function applyMatrix4(t) {
          return this.center.applyMatrix4(t), this.radius = this.radius * t.getMaxScaleOnAxis(), this;
        }
      }, {
        key: "translate",
        value: function translate(t) {
          return this.center.add(t), this;
        }
      }, {
        key: "expandByPoint",
        value: function expandByPoint(t) {
          fr.subVectors(t, this.center);
          var e = fr.lengthSq();

          if (e > this.radius * this.radius) {
            var _t12 = Math.sqrt(e),
                _n8 = .5 * (_t12 - this.radius);

            this.center.add(fr.multiplyScalar(_n8 / _t12)), this.radius += _n8;
          }

          return this;
        }
      }, {
        key: "union",
        value: function union(t) {
          return mr.subVectors(t.center, this.center).normalize().multiplyScalar(t.radius), this.expandByPoint(dr.copy(t.center).add(mr)), this.expandByPoint(dr.copy(t.center).sub(mr)), this;
        }
      }, {
        key: "equals",
        value: function equals(t) {
          return t.center.equals(this.center) && t.radius === this.radius;
        }
      }, {
        key: "clone",
        value: function clone() {
          return new this.constructor().copy(this);
        }
      }]);

      return gr;
    }();

    exports.Sphere = gr;

    var xr = new Yn(),
        vr = new Yn(),
        yr = new Yn(),
        _r = new Yn(),
        br = new Yn(),
        wr = new Yn(),
        Mr = new Yn();

    var Sr = /*#__PURE__*/function () {
      function Sr() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Yn();
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Yn(0, 0, -1);

        _classCallCheck(this, Sr);

        this.origin = t, this.direction = e;
      }

      _createClass(Sr, [{
        key: "set",
        value: function set(t, e) {
          return this.origin.copy(t), this.direction.copy(e), this;
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return this.origin.copy(t.origin), this.direction.copy(t.direction), this;
        }
      }, {
        key: "at",
        value: function at(t, e) {
          return void 0 === e && (console.warn("THREE.Ray: .at() target is now required"), e = new Yn()), e.copy(this.direction).multiplyScalar(t).add(this.origin);
        }
      }, {
        key: "lookAt",
        value: function lookAt(t) {
          return this.direction.copy(t).sub(this.origin).normalize(), this;
        }
      }, {
        key: "recast",
        value: function recast(t) {
          return this.origin.copy(this.at(t, xr)), this;
        }
      }, {
        key: "closestPointToPoint",
        value: function closestPointToPoint(t, e) {
          void 0 === e && (console.warn("THREE.Ray: .closestPointToPoint() target is now required"), e = new Yn()), e.subVectors(t, this.origin);
          var n = e.dot(this.direction);
          return n < 0 ? e.copy(this.origin) : e.copy(this.direction).multiplyScalar(n).add(this.origin);
        }
      }, {
        key: "distanceToPoint",
        value: function distanceToPoint(t) {
          return Math.sqrt(this.distanceSqToPoint(t));
        }
      }, {
        key: "distanceSqToPoint",
        value: function distanceSqToPoint(t) {
          var e = xr.subVectors(t, this.origin).dot(this.direction);
          return e < 0 ? this.origin.distanceToSquared(t) : (xr.copy(this.direction).multiplyScalar(e).add(this.origin), xr.distanceToSquared(t));
        }
      }, {
        key: "distanceSqToSegment",
        value: function distanceSqToSegment(t, e, n, r) {
          vr.copy(t).add(e).multiplyScalar(.5), yr.copy(e).sub(t).normalize(), _r.copy(this.origin).sub(vr);

          var i = .5 * t.distanceTo(e),
              s = -this.direction.dot(yr),
              o = _r.dot(this.direction),
              a = -_r.dot(yr),
              l = _r.lengthSq(),
              c = Math.abs(1 - s * s);

          var h, u, p, d;
          if (c > 0) {
            if (u = s * o - a, d = i * c, (h = s * a - o) >= 0) {
              if (u >= -d) {
                if (u <= d) {
                  var _t13 = 1 / c;

                  p = (h *= _t13) * (h + s * (u *= _t13) + 2 * o) + u * (s * h + u + 2 * a) + l;
                } else u = i, p = -(h = Math.max(0, -(s * u + o))) * h + u * (u + 2 * a) + l;
              } else u = -i, p = -(h = Math.max(0, -(s * u + o))) * h + u * (u + 2 * a) + l;
            } else u <= -d ? p = -(h = Math.max(0, -(-s * i + o))) * h + (u = h > 0 ? -i : Math.min(Math.max(-i, -a), i)) * (u + 2 * a) + l : u <= d ? (h = 0, p = (u = Math.min(Math.max(-i, -a), i)) * (u + 2 * a) + l) : p = -(h = Math.max(0, -(s * i + o))) * h + (u = h > 0 ? i : Math.min(Math.max(-i, -a), i)) * (u + 2 * a) + l;
          } else u = s > 0 ? -i : i, p = -(h = Math.max(0, -(s * u + o))) * h + u * (u + 2 * a) + l;
          return n && n.copy(this.direction).multiplyScalar(h).add(this.origin), r && r.copy(yr).multiplyScalar(u).add(vr), p;
        }
      }, {
        key: "intersectSphere",
        value: function intersectSphere(t, e) {
          xr.subVectors(t.center, this.origin);
          var n = xr.dot(this.direction),
              r = xr.dot(xr) - n * n,
              i = t.radius * t.radius;
          if (r > i) return null;
          var s = Math.sqrt(i - r),
              o = n - s,
              a = n + s;
          return o < 0 && a < 0 ? null : o < 0 ? this.at(a, e) : this.at(o, e);
        }
      }, {
        key: "intersectsSphere",
        value: function intersectsSphere(t) {
          return this.distanceSqToPoint(t.center) <= t.radius * t.radius;
        }
      }, {
        key: "distanceToPlane",
        value: function distanceToPlane(t) {
          var e = t.normal.dot(this.direction);
          if (0 === e) return 0 === t.distanceToPoint(this.origin) ? 0 : null;
          var n = -(this.origin.dot(t.normal) + t.constant) / e;
          return n >= 0 ? n : null;
        }
      }, {
        key: "intersectPlane",
        value: function intersectPlane(t, e) {
          var n = this.distanceToPlane(t);
          return null === n ? null : this.at(n, e);
        }
      }, {
        key: "intersectsPlane",
        value: function intersectsPlane(t) {
          var e = t.distanceToPoint(this.origin);
          return 0 === e || t.normal.dot(this.direction) * e < 0;
        }
      }, {
        key: "intersectBox",
        value: function intersectBox(t, e) {
          var n, r, i, s, o, a;
          var l = 1 / this.direction.x,
              c = 1 / this.direction.y,
              h = 1 / this.direction.z,
              u = this.origin;
          return l >= 0 ? (n = (t.min.x - u.x) * l, r = (t.max.x - u.x) * l) : (n = (t.max.x - u.x) * l, r = (t.min.x - u.x) * l), c >= 0 ? (i = (t.min.y - u.y) * c, s = (t.max.y - u.y) * c) : (i = (t.max.y - u.y) * c, s = (t.min.y - u.y) * c), n > s || i > r ? null : ((i > n || n != n) && (n = i), (s < r || r != r) && (r = s), h >= 0 ? (o = (t.min.z - u.z) * h, a = (t.max.z - u.z) * h) : (o = (t.max.z - u.z) * h, a = (t.min.z - u.z) * h), n > a || o > r ? null : ((o > n || n != n) && (n = o), (a < r || r != r) && (r = a), r < 0 ? null : this.at(n >= 0 ? n : r, e)));
        }
      }, {
        key: "intersectsBox",
        value: function intersectsBox(t) {
          return null !== this.intersectBox(t, xr);
        }
      }, {
        key: "intersectTriangle",
        value: function intersectTriangle(t, e, n, r, i) {
          br.subVectors(e, t), wr.subVectors(n, t), Mr.crossVectors(br, wr);
          var s,
              o = this.direction.dot(Mr);

          if (o > 0) {
            if (r) return null;
            s = 1;
          } else {
            if (!(o < 0)) return null;
            s = -1, o = -o;
          }

          _r.subVectors(this.origin, t);

          var a = s * this.direction.dot(wr.crossVectors(_r, wr));
          if (a < 0) return null;
          var l = s * this.direction.dot(br.cross(_r));
          if (l < 0) return null;
          if (a + l > o) return null;

          var c = -s * _r.dot(Mr);

          return c < 0 ? null : this.at(c / o, i);
        }
      }, {
        key: "applyMatrix4",
        value: function applyMatrix4(t) {
          return this.origin.applyMatrix4(t), this.direction.transformDirection(t), this;
        }
      }, {
        key: "equals",
        value: function equals(t) {
          return t.origin.equals(this.origin) && t.direction.equals(this.direction);
        }
      }, {
        key: "clone",
        value: function clone() {
          return new this.constructor().copy(this);
        }
      }]);

      return Sr;
    }();

    exports.Ray = Sr;

    var Tr = /*#__PURE__*/function () {
      function Tr() {
        _classCallCheck(this, Tr);

        this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], arguments.length > 0 && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
      }

      _createClass(Tr, [{
        key: "set",
        value: function set(t, e, n, r, i, s, o, a, l, c, h, u, p, d, m, f) {
          var g = this.elements;
          return g[0] = t, g[4] = e, g[8] = n, g[12] = r, g[1] = i, g[5] = s, g[9] = o, g[13] = a, g[2] = l, g[6] = c, g[10] = h, g[14] = u, g[3] = p, g[7] = d, g[11] = m, g[15] = f, this;
        }
      }, {
        key: "identity",
        value: function identity() {
          return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
        }
      }, {
        key: "clone",
        value: function clone() {
          return new Tr().fromArray(this.elements);
        }
      }, {
        key: "copy",
        value: function copy(t) {
          var e = this.elements,
              n = t.elements;
          return e[0] = n[0], e[1] = n[1], e[2] = n[2], e[3] = n[3], e[4] = n[4], e[5] = n[5], e[6] = n[6], e[7] = n[7], e[8] = n[8], e[9] = n[9], e[10] = n[10], e[11] = n[11], e[12] = n[12], e[13] = n[13], e[14] = n[14], e[15] = n[15], this;
        }
      }, {
        key: "copyPosition",
        value: function copyPosition(t) {
          var e = this.elements,
              n = t.elements;
          return e[12] = n[12], e[13] = n[13], e[14] = n[14], this;
        }
      }, {
        key: "setFromMatrix3",
        value: function setFromMatrix3(t) {
          var e = t.elements;
          return this.set(e[0], e[3], e[6], 0, e[1], e[4], e[7], 0, e[2], e[5], e[8], 0, 0, 0, 0, 1), this;
        }
      }, {
        key: "extractBasis",
        value: function extractBasis(t, e, n) {
          return t.setFromMatrixColumn(this, 0), e.setFromMatrixColumn(this, 1), n.setFromMatrixColumn(this, 2), this;
        }
      }, {
        key: "makeBasis",
        value: function makeBasis(t, e, n) {
          return this.set(t.x, e.x, n.x, 0, t.y, e.y, n.y, 0, t.z, e.z, n.z, 0, 0, 0, 0, 1), this;
        }
      }, {
        key: "extractRotation",
        value: function extractRotation(t) {
          var e = this.elements,
              n = t.elements,
              r = 1 / Er.setFromMatrixColumn(t, 0).length(),
              i = 1 / Er.setFromMatrixColumn(t, 1).length(),
              s = 1 / Er.setFromMatrixColumn(t, 2).length();
          return e[0] = n[0] * r, e[1] = n[1] * r, e[2] = n[2] * r, e[3] = 0, e[4] = n[4] * i, e[5] = n[5] * i, e[6] = n[6] * i, e[7] = 0, e[8] = n[8] * s, e[9] = n[9] * s, e[10] = n[10] * s, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, this;
        }
      }, {
        key: "makeRotationFromEuler",
        value: function makeRotationFromEuler(t) {
          t && t.isEuler || console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
          var e = this.elements,
              n = t.x,
              r = t.y,
              i = t.z,
              s = Math.cos(n),
              o = Math.sin(n),
              a = Math.cos(r),
              l = Math.sin(r),
              c = Math.cos(i),
              h = Math.sin(i);

          if ("XYZ" === t.order) {
            var _t14 = s * c,
                _n9 = s * h,
                _r7 = o * c,
                _i6 = o * h;

            e[0] = a * c, e[4] = -a * h, e[8] = l, e[1] = _n9 + _r7 * l, e[5] = _t14 - _i6 * l, e[9] = -o * a, e[2] = _i6 - _t14 * l, e[6] = _r7 + _n9 * l, e[10] = s * a;
          } else if ("YXZ" === t.order) {
            var _t15 = a * c,
                _n10 = a * h,
                _r8 = l * c,
                _i7 = l * h;

            e[0] = _t15 + _i7 * o, e[4] = _r8 * o - _n10, e[8] = s * l, e[1] = s * h, e[5] = s * c, e[9] = -o, e[2] = _n10 * o - _r8, e[6] = _i7 + _t15 * o, e[10] = s * a;
          } else if ("ZXY" === t.order) {
            var _t16 = a * c,
                _n11 = a * h,
                _r9 = l * c,
                _i8 = l * h;

            e[0] = _t16 - _i8 * o, e[4] = -s * h, e[8] = _r9 + _n11 * o, e[1] = _n11 + _r9 * o, e[5] = s * c, e[9] = _i8 - _t16 * o, e[2] = -s * l, e[6] = o, e[10] = s * a;
          } else if ("ZYX" === t.order) {
            var _t17 = s * c,
                _n12 = s * h,
                _r10 = o * c,
                _i9 = o * h;

            e[0] = a * c, e[4] = _r10 * l - _n12, e[8] = _t17 * l + _i9, e[1] = a * h, e[5] = _i9 * l + _t17, e[9] = _n12 * l - _r10, e[2] = -l, e[6] = o * a, e[10] = s * a;
          } else if ("YZX" === t.order) {
            var _t18 = s * a,
                _n13 = s * l,
                _r11 = o * a,
                _i10 = o * l;

            e[0] = a * c, e[4] = _i10 - _t18 * h, e[8] = _r11 * h + _n13, e[1] = h, e[5] = s * c, e[9] = -o * c, e[2] = -l * c, e[6] = _n13 * h + _r11, e[10] = _t18 - _i10 * h;
          } else if ("XZY" === t.order) {
            var _t19 = s * a,
                _n14 = s * l,
                _r12 = o * a,
                _i11 = o * l;

            e[0] = a * c, e[4] = -h, e[8] = l * c, e[1] = _t19 * h + _i11, e[5] = s * c, e[9] = _n14 * h - _r12, e[2] = _r12 * h - _n14, e[6] = o * c, e[10] = _i11 * h + _t19;
          }

          return e[3] = 0, e[7] = 0, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, this;
        }
      }, {
        key: "makeRotationFromQuaternion",
        value: function makeRotationFromQuaternion(t) {
          return this.compose(Lr, t, Rr);
        }
      }, {
        key: "lookAt",
        value: function lookAt(t, e, n) {
          var r = this.elements;
          return Dr.subVectors(t, e), 0 === Dr.lengthSq() && (Dr.z = 1), Dr.normalize(), Cr.crossVectors(n, Dr), 0 === Cr.lengthSq() && (1 === Math.abs(n.z) ? Dr.x += 1e-4 : Dr.z += 1e-4, Dr.normalize(), Cr.crossVectors(n, Dr)), Cr.normalize(), Pr.crossVectors(Dr, Cr), r[0] = Cr.x, r[4] = Pr.x, r[8] = Dr.x, r[1] = Cr.y, r[5] = Pr.y, r[9] = Dr.y, r[2] = Cr.z, r[6] = Pr.z, r[10] = Dr.z, this;
        }
      }, {
        key: "multiply",
        value: function multiply(t, e) {
          return void 0 !== e ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."), this.multiplyMatrices(t, e)) : this.multiplyMatrices(this, t);
        }
      }, {
        key: "premultiply",
        value: function premultiply(t) {
          return this.multiplyMatrices(t, this);
        }
      }, {
        key: "multiplyMatrices",
        value: function multiplyMatrices(t, e) {
          var n = t.elements,
              r = e.elements,
              i = this.elements,
              s = n[0],
              o = n[4],
              a = n[8],
              l = n[12],
              c = n[1],
              h = n[5],
              u = n[9],
              p = n[13],
              d = n[2],
              m = n[6],
              f = n[10],
              g = n[14],
              x = n[3],
              v = n[7],
              y = n[11],
              _ = n[15],
              b = r[0],
              w = r[4],
              M = r[8],
              S = r[12],
              T = r[1],
              E = r[5],
              A = r[9],
              L = r[13],
              R = r[2],
              C = r[6],
              P = r[10],
              D = r[14],
              I = r[3],
              B = r[7],
              N = r[11],
              F = r[15];
          return i[0] = s * b + o * T + a * R + l * I, i[4] = s * w + o * E + a * C + l * B, i[8] = s * M + o * A + a * P + l * N, i[12] = s * S + o * L + a * D + l * F, i[1] = c * b + h * T + u * R + p * I, i[5] = c * w + h * E + u * C + p * B, i[9] = c * M + h * A + u * P + p * N, i[13] = c * S + h * L + u * D + p * F, i[2] = d * b + m * T + f * R + g * I, i[6] = d * w + m * E + f * C + g * B, i[10] = d * M + m * A + f * P + g * N, i[14] = d * S + m * L + f * D + g * F, i[3] = x * b + v * T + y * R + _ * I, i[7] = x * w + v * E + y * C + _ * B, i[11] = x * M + v * A + y * P + _ * N, i[15] = x * S + v * L + y * D + _ * F, this;
        }
      }, {
        key: "multiplyScalar",
        value: function multiplyScalar(t) {
          var e = this.elements;
          return e[0] *= t, e[4] *= t, e[8] *= t, e[12] *= t, e[1] *= t, e[5] *= t, e[9] *= t, e[13] *= t, e[2] *= t, e[6] *= t, e[10] *= t, e[14] *= t, e[3] *= t, e[7] *= t, e[11] *= t, e[15] *= t, this;
        }
      }, {
        key: "determinant",
        value: function determinant() {
          var t = this.elements,
              e = t[0],
              n = t[4],
              r = t[8],
              i = t[12],
              s = t[1],
              o = t[5],
              a = t[9],
              l = t[13],
              c = t[2],
              h = t[6],
              u = t[10],
              p = t[14];
          return t[3] * (+i * a * h - r * l * h - i * o * u + n * l * u + r * o * p - n * a * p) + t[7] * (+e * a * p - e * l * u + i * s * u - r * s * p + r * l * c - i * a * c) + t[11] * (+e * l * h - e * o * p - i * s * h + n * s * p + i * o * c - n * l * c) + t[15] * (-r * o * c - e * a * h + e * o * u + r * s * h - n * s * u + n * a * c);
        }
      }, {
        key: "transpose",
        value: function transpose() {
          var t = this.elements;
          var e;
          return e = t[1], t[1] = t[4], t[4] = e, e = t[2], t[2] = t[8], t[8] = e, e = t[6], t[6] = t[9], t[9] = e, e = t[3], t[3] = t[12], t[12] = e, e = t[7], t[7] = t[13], t[13] = e, e = t[11], t[11] = t[14], t[14] = e, this;
        }
      }, {
        key: "setPosition",
        value: function setPosition(t, e, n) {
          var r = this.elements;
          return t.isVector3 ? (r[12] = t.x, r[13] = t.y, r[14] = t.z) : (r[12] = t, r[13] = e, r[14] = n), this;
        }
      }, {
        key: "invert",
        value: function invert() {
          var t = this.elements,
              e = t[0],
              n = t[1],
              r = t[2],
              i = t[3],
              s = t[4],
              o = t[5],
              a = t[6],
              l = t[7],
              c = t[8],
              h = t[9],
              u = t[10],
              p = t[11],
              d = t[12],
              m = t[13],
              f = t[14],
              g = t[15],
              x = h * f * l - m * u * l + m * a * p - o * f * p - h * a * g + o * u * g,
              v = d * u * l - c * f * l - d * a * p + s * f * p + c * a * g - s * u * g,
              y = c * m * l - d * h * l + d * o * p - s * m * p - c * o * g + s * h * g,
              _ = d * h * a - c * m * a - d * o * u + s * m * u + c * o * f - s * h * f,
              b = e * x + n * v + r * y + i * _;

          if (0 === b) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          var w = 1 / b;
          return t[0] = x * w, t[1] = (m * u * i - h * f * i - m * r * p + n * f * p + h * r * g - n * u * g) * w, t[2] = (o * f * i - m * a * i + m * r * l - n * f * l - o * r * g + n * a * g) * w, t[3] = (h * a * i - o * u * i - h * r * l + n * u * l + o * r * p - n * a * p) * w, t[4] = v * w, t[5] = (c * f * i - d * u * i + d * r * p - e * f * p - c * r * g + e * u * g) * w, t[6] = (d * a * i - s * f * i - d * r * l + e * f * l + s * r * g - e * a * g) * w, t[7] = (s * u * i - c * a * i + c * r * l - e * u * l - s * r * p + e * a * p) * w, t[8] = y * w, t[9] = (d * h * i - c * m * i - d * n * p + e * m * p + c * n * g - e * h * g) * w, t[10] = (s * m * i - d * o * i + d * n * l - e * m * l - s * n * g + e * o * g) * w, t[11] = (c * o * i - s * h * i - c * n * l + e * h * l + s * n * p - e * o * p) * w, t[12] = _ * w, t[13] = (c * m * r - d * h * r + d * n * u - e * m * u - c * n * f + e * h * f) * w, t[14] = (d * o * r - s * m * r - d * n * a + e * m * a + s * n * f - e * o * f) * w, t[15] = (s * h * r - c * o * r + c * n * a - e * h * a - s * n * u + e * o * u) * w, this;
        }
      }, {
        key: "scale",
        value: function scale(t) {
          var e = this.elements,
              n = t.x,
              r = t.y,
              i = t.z;
          return e[0] *= n, e[4] *= r, e[8] *= i, e[1] *= n, e[5] *= r, e[9] *= i, e[2] *= n, e[6] *= r, e[10] *= i, e[3] *= n, e[7] *= r, e[11] *= i, this;
        }
      }, {
        key: "getMaxScaleOnAxis",
        value: function getMaxScaleOnAxis() {
          var t = this.elements,
              e = t[0] * t[0] + t[1] * t[1] + t[2] * t[2],
              n = t[4] * t[4] + t[5] * t[5] + t[6] * t[6],
              r = t[8] * t[8] + t[9] * t[9] + t[10] * t[10];
          return Math.sqrt(Math.max(e, n, r));
        }
      }, {
        key: "makeTranslation",
        value: function makeTranslation(t, e, n) {
          return this.set(1, 0, 0, t, 0, 1, 0, e, 0, 0, 1, n, 0, 0, 0, 1), this;
        }
      }, {
        key: "makeRotationX",
        value: function makeRotationX(t) {
          var e = Math.cos(t),
              n = Math.sin(t);
          return this.set(1, 0, 0, 0, 0, e, -n, 0, 0, n, e, 0, 0, 0, 0, 1), this;
        }
      }, {
        key: "makeRotationY",
        value: function makeRotationY(t) {
          var e = Math.cos(t),
              n = Math.sin(t);
          return this.set(e, 0, n, 0, 0, 1, 0, 0, -n, 0, e, 0, 0, 0, 0, 1), this;
        }
      }, {
        key: "makeRotationZ",
        value: function makeRotationZ(t) {
          var e = Math.cos(t),
              n = Math.sin(t);
          return this.set(e, -n, 0, 0, n, e, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
        }
      }, {
        key: "makeRotationAxis",
        value: function makeRotationAxis(t, e) {
          var n = Math.cos(e),
              r = Math.sin(e),
              i = 1 - n,
              s = t.x,
              o = t.y,
              a = t.z,
              l = i * s,
              c = i * o;
          return this.set(l * s + n, l * o - r * a, l * a + r * o, 0, l * o + r * a, c * o + n, c * a - r * s, 0, l * a - r * o, c * a + r * s, i * a * a + n, 0, 0, 0, 0, 1), this;
        }
      }, {
        key: "makeScale",
        value: function makeScale(t, e, n) {
          return this.set(t, 0, 0, 0, 0, e, 0, 0, 0, 0, n, 0, 0, 0, 0, 1), this;
        }
      }, {
        key: "makeShear",
        value: function makeShear(t, e, n) {
          return this.set(1, e, n, 0, t, 1, n, 0, t, e, 1, 0, 0, 0, 0, 1), this;
        }
      }, {
        key: "compose",
        value: function compose(t, e, n) {
          var r = this.elements,
              i = e._x,
              s = e._y,
              o = e._z,
              a = e._w,
              l = i + i,
              c = s + s,
              h = o + o,
              u = i * l,
              p = i * c,
              d = i * h,
              m = s * c,
              f = s * h,
              g = o * h,
              x = a * l,
              v = a * c,
              y = a * h,
              _ = n.x,
              b = n.y,
              w = n.z;
          return r[0] = (1 - (m + g)) * _, r[1] = (p + y) * _, r[2] = (d - v) * _, r[3] = 0, r[4] = (p - y) * b, r[5] = (1 - (u + g)) * b, r[6] = (f + x) * b, r[7] = 0, r[8] = (d + v) * w, r[9] = (f - x) * w, r[10] = (1 - (u + m)) * w, r[11] = 0, r[12] = t.x, r[13] = t.y, r[14] = t.z, r[15] = 1, this;
        }
      }, {
        key: "decompose",
        value: function decompose(t, e, n) {
          var r = this.elements;
          var i = Er.set(r[0], r[1], r[2]).length();
          var s = Er.set(r[4], r[5], r[6]).length(),
              o = Er.set(r[8], r[9], r[10]).length();
          this.determinant() < 0 && (i = -i), t.x = r[12], t.y = r[13], t.z = r[14], Ar.copy(this);
          var a = 1 / i,
              l = 1 / s,
              c = 1 / o;
          return Ar.elements[0] *= a, Ar.elements[1] *= a, Ar.elements[2] *= a, Ar.elements[4] *= l, Ar.elements[5] *= l, Ar.elements[6] *= l, Ar.elements[8] *= c, Ar.elements[9] *= c, Ar.elements[10] *= c, e.setFromRotationMatrix(Ar), n.x = i, n.y = s, n.z = o, this;
        }
      }, {
        key: "makePerspective",
        value: function makePerspective(t, e, n, r, i, s) {
          void 0 === s && console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
          var o = this.elements,
              a = 2 * i / (e - t),
              l = 2 * i / (n - r),
              c = (e + t) / (e - t),
              h = (n + r) / (n - r),
              u = -(s + i) / (s - i),
              p = -2 * s * i / (s - i);
          return o[0] = a, o[4] = 0, o[8] = c, o[12] = 0, o[1] = 0, o[5] = l, o[9] = h, o[13] = 0, o[2] = 0, o[6] = 0, o[10] = u, o[14] = p, o[3] = 0, o[7] = 0, o[11] = -1, o[15] = 0, this;
        }
      }, {
        key: "makeOrthographic",
        value: function makeOrthographic(t, e, n, r, i, s) {
          var o = this.elements,
              a = 1 / (e - t),
              l = 1 / (n - r),
              c = 1 / (s - i),
              h = (e + t) * a,
              u = (n + r) * l,
              p = (s + i) * c;
          return o[0] = 2 * a, o[4] = 0, o[8] = 0, o[12] = -h, o[1] = 0, o[5] = 2 * l, o[9] = 0, o[13] = -u, o[2] = 0, o[6] = 0, o[10] = -2 * c, o[14] = -p, o[3] = 0, o[7] = 0, o[11] = 0, o[15] = 1, this;
        }
      }, {
        key: "equals",
        value: function equals(t) {
          var e = this.elements,
              n = t.elements;

          for (var _r13 = 0; _r13 < 16; _r13++) {
            if (e[_r13] !== n[_r13]) return !1;
          }

          return !0;
        }
      }, {
        key: "fromArray",
        value: function fromArray(t) {
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

          for (var _n15 = 0; _n15 < 16; _n15++) {
            this.elements[_n15] = t[_n15 + e];
          }

          return this;
        }
      }, {
        key: "toArray",
        value: function toArray() {
          var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          var n = this.elements;
          return t[e] = n[0], t[e + 1] = n[1], t[e + 2] = n[2], t[e + 3] = n[3], t[e + 4] = n[4], t[e + 5] = n[5], t[e + 6] = n[6], t[e + 7] = n[7], t[e + 8] = n[8], t[e + 9] = n[9], t[e + 10] = n[10], t[e + 11] = n[11], t[e + 12] = n[12], t[e + 13] = n[13], t[e + 14] = n[14], t[e + 15] = n[15], t;
        }
      }]);

      return Tr;
    }();

    exports.Matrix4 = Tr, Tr.prototype.isMatrix4 = !0;
    var Er = new Yn(),
        Ar = new Tr(),
        Lr = new Yn(0, 0, 0),
        Rr = new Yn(1, 1, 1),
        Cr = new Yn(),
        Pr = new Yn(),
        Dr = new Yn(),
        Ir = new Tr(),
        Br = new Xn();

    var Nr = /*#__PURE__*/function () {
      function Nr() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Nr.DefaultOrder;

        _classCallCheck(this, Nr);

        this._x = t, this._y = e, this._z = n, this._order = r;
      }

      _createClass(Nr, [{
        key: "x",
        get: function get() {
          return this._x;
        },
        set: function set(t) {
          this._x = t, this._onChangeCallback();
        }
      }, {
        key: "y",
        get: function get() {
          return this._y;
        },
        set: function set(t) {
          this._y = t, this._onChangeCallback();
        }
      }, {
        key: "z",
        get: function get() {
          return this._z;
        },
        set: function set(t) {
          this._z = t, this._onChangeCallback();
        }
      }, {
        key: "order",
        get: function get() {
          return this._order;
        },
        set: function set(t) {
          this._order = t, this._onChangeCallback();
        }
      }, {
        key: "set",
        value: function set(t, e, n, r) {
          return this._x = t, this._y = e, this._z = n, this._order = r || this._order, this._onChangeCallback(), this;
        }
      }, {
        key: "clone",
        value: function clone() {
          return new this.constructor(this._x, this._y, this._z, this._order);
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return this._x = t._x, this._y = t._y, this._z = t._z, this._order = t._order, this._onChangeCallback(), this;
        }
      }, {
        key: "setFromRotationMatrix",
        value: function setFromRotationMatrix(t, e, n) {
          var r = Fn.clamp,
              i = t.elements,
              s = i[0],
              o = i[4],
              a = i[8],
              l = i[1],
              c = i[5],
              h = i[9],
              u = i[2],
              p = i[6],
              d = i[10];

          switch (e = e || this._order) {
            case "XYZ":
              this._y = Math.asin(r(a, -1, 1)), Math.abs(a) < .9999999 ? (this._x = Math.atan2(-h, d), this._z = Math.atan2(-o, s)) : (this._x = Math.atan2(p, c), this._z = 0);
              break;

            case "YXZ":
              this._x = Math.asin(-r(h, -1, 1)), Math.abs(h) < .9999999 ? (this._y = Math.atan2(a, d), this._z = Math.atan2(l, c)) : (this._y = Math.atan2(-u, s), this._z = 0);
              break;

            case "ZXY":
              this._x = Math.asin(r(p, -1, 1)), Math.abs(p) < .9999999 ? (this._y = Math.atan2(-u, d), this._z = Math.atan2(-o, c)) : (this._y = 0, this._z = Math.atan2(l, s));
              break;

            case "ZYX":
              this._y = Math.asin(-r(u, -1, 1)), Math.abs(u) < .9999999 ? (this._x = Math.atan2(p, d), this._z = Math.atan2(l, s)) : (this._x = 0, this._z = Math.atan2(-o, c));
              break;

            case "YZX":
              this._z = Math.asin(r(l, -1, 1)), Math.abs(l) < .9999999 ? (this._x = Math.atan2(-h, c), this._y = Math.atan2(-u, s)) : (this._x = 0, this._y = Math.atan2(a, d));
              break;

            case "XZY":
              this._z = Math.asin(-r(o, -1, 1)), Math.abs(o) < .9999999 ? (this._x = Math.atan2(p, c), this._y = Math.atan2(a, s)) : (this._x = Math.atan2(-h, d), this._y = 0);
              break;

            default:
              console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + e);
          }

          return this._order = e, !1 !== n && this._onChangeCallback(), this;
        }
      }, {
        key: "setFromQuaternion",
        value: function setFromQuaternion(t, e, n) {
          return Ir.makeRotationFromQuaternion(t), this.setFromRotationMatrix(Ir, e, n);
        }
      }, {
        key: "setFromVector3",
        value: function setFromVector3(t, e) {
          return this.set(t.x, t.y, t.z, e || this._order);
        }
      }, {
        key: "reorder",
        value: function reorder(t) {
          return Br.setFromEuler(this), this.setFromQuaternion(Br, t);
        }
      }, {
        key: "equals",
        value: function equals(t) {
          return t._x === this._x && t._y === this._y && t._z === this._z && t._order === this._order;
        }
      }, {
        key: "fromArray",
        value: function fromArray(t) {
          return this._x = t[0], this._y = t[1], this._z = t[2], void 0 !== t[3] && (this._order = t[3]), this._onChangeCallback(), this;
        }
      }, {
        key: "toArray",
        value: function toArray() {
          var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          return t[e] = this._x, t[e + 1] = this._y, t[e + 2] = this._z, t[e + 3] = this._order, t;
        }
      }, {
        key: "toVector3",
        value: function toVector3(t) {
          return t ? t.set(this._x, this._y, this._z) : new Yn(this._x, this._y, this._z);
        }
      }, {
        key: "_onChange",
        value: function _onChange(t) {
          return this._onChangeCallback = t, this;
        }
      }, {
        key: "_onChangeCallback",
        value: function _onChangeCallback() {}
      }]);

      return Nr;
    }();

    exports.Euler = Nr, Nr.prototype.isEuler = !0, Nr.DefaultOrder = "XYZ", Nr.RotationOrders = ["XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"];

    var Fr = /*#__PURE__*/function () {
      function Fr() {
        _classCallCheck(this, Fr);

        this.mask = 1;
      }

      _createClass(Fr, [{
        key: "set",
        value: function set(t) {
          this.mask = 1 << t | 0;
        }
      }, {
        key: "enable",
        value: function enable(t) {
          this.mask |= 1 << t | 0;
        }
      }, {
        key: "enableAll",
        value: function enableAll() {
          this.mask = -1;
        }
      }, {
        key: "toggle",
        value: function toggle(t) {
          this.mask ^= 1 << t | 0;
        }
      }, {
        key: "disable",
        value: function disable(t) {
          this.mask &= ~(1 << t | 0);
        }
      }, {
        key: "disableAll",
        value: function disableAll() {
          this.mask = 0;
        }
      }, {
        key: "test",
        value: function test(t) {
          return 0 != (this.mask & t.mask);
        }
      }]);

      return Fr;
    }();

    exports.Layers = Fr;
    var Or = 0;
    var zr = new Yn(),
        Gr = new Xn(),
        Hr = new Tr(),
        Ur = new Yn(),
        kr = new Yn(),
        Vr = new Yn(),
        Wr = new Xn(),
        jr = new Yn(1, 0, 0),
        qr = new Yn(0, 1, 0),
        Xr = new Yn(0, 0, 1),
        Yr = {
      type: "added"
    },
        Zr = {
      type: "removed"
    };

    function Jr() {
      Object.defineProperty(this, "id", {
        value: Or++
      }), this.uuid = Fn.generateUUID(), this.name = "", this.type = "Object3D", this.parent = null, this.children = [], this.up = Jr.DefaultUp.clone();
      var t = new Yn(),
          e = new Nr(),
          n = new Xn(),
          r = new Yn(1, 1, 1);
      e._onChange(function () {
        n.setFromEuler(e, !1);
      }), n._onChange(function () {
        e.setFromQuaternion(n, void 0, !1);
      }), Object.defineProperties(this, {
        position: {
          configurable: !0,
          enumerable: !0,
          value: t
        },
        rotation: {
          configurable: !0,
          enumerable: !0,
          value: e
        },
        quaternion: {
          configurable: !0,
          enumerable: !0,
          value: n
        },
        scale: {
          configurable: !0,
          enumerable: !0,
          value: r
        },
        modelViewMatrix: {
          value: new Tr()
        },
        normalMatrix: {
          value: new zn()
        }
      }), this.matrix = new Tr(), this.matrixWorld = new Tr(), this.matrixAutoUpdate = Jr.DefaultMatrixAutoUpdate, this.matrixWorldNeedsUpdate = !1, this.layers = new Fr(), this.visible = !0, this.castShadow = !1, this.receiveShadow = !1, this.frustumCulled = !0, this.renderOrder = 0, this.animations = [], this.userData = {};
    }

    Jr.DefaultUp = new Yn(0, 1, 0), Jr.DefaultMatrixAutoUpdate = !0, Jr.prototype = Object.assign(Object.create(In.prototype), {
      constructor: Jr,
      isObject3D: !0,
      onBeforeRender: function onBeforeRender() {},
      onAfterRender: function onAfterRender() {},
      applyMatrix4: function applyMatrix4(t) {
        this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(t), this.matrix.decompose(this.position, this.quaternion, this.scale);
      },
      applyQuaternion: function applyQuaternion(t) {
        return this.quaternion.premultiply(t), this;
      },
      setRotationFromAxisAngle: function setRotationFromAxisAngle(t, e) {
        this.quaternion.setFromAxisAngle(t, e);
      },
      setRotationFromEuler: function setRotationFromEuler(t) {
        this.quaternion.setFromEuler(t, !0);
      },
      setRotationFromMatrix: function setRotationFromMatrix(t) {
        this.quaternion.setFromRotationMatrix(t);
      },
      setRotationFromQuaternion: function setRotationFromQuaternion(t) {
        this.quaternion.copy(t);
      },
      rotateOnAxis: function rotateOnAxis(t, e) {
        return Gr.setFromAxisAngle(t, e), this.quaternion.multiply(Gr), this;
      },
      rotateOnWorldAxis: function rotateOnWorldAxis(t, e) {
        return Gr.setFromAxisAngle(t, e), this.quaternion.premultiply(Gr), this;
      },
      rotateX: function rotateX(t) {
        return this.rotateOnAxis(jr, t);
      },
      rotateY: function rotateY(t) {
        return this.rotateOnAxis(qr, t);
      },
      rotateZ: function rotateZ(t) {
        return this.rotateOnAxis(Xr, t);
      },
      translateOnAxis: function translateOnAxis(t, e) {
        return zr.copy(t).applyQuaternion(this.quaternion), this.position.add(zr.multiplyScalar(e)), this;
      },
      translateX: function translateX(t) {
        return this.translateOnAxis(jr, t);
      },
      translateY: function translateY(t) {
        return this.translateOnAxis(qr, t);
      },
      translateZ: function translateZ(t) {
        return this.translateOnAxis(Xr, t);
      },
      localToWorld: function localToWorld(t) {
        return t.applyMatrix4(this.matrixWorld);
      },
      worldToLocal: function worldToLocal(t) {
        return t.applyMatrix4(Hr.copy(this.matrixWorld).invert());
      },
      lookAt: function lookAt(t, e, n) {
        t.isVector3 ? Ur.copy(t) : Ur.set(t, e, n);
        var r = this.parent;
        this.updateWorldMatrix(!0, !1), kr.setFromMatrixPosition(this.matrixWorld), this.isCamera || this.isLight ? Hr.lookAt(kr, Ur, this.up) : Hr.lookAt(Ur, kr, this.up), this.quaternion.setFromRotationMatrix(Hr), r && (Hr.extractRotation(r.matrixWorld), Gr.setFromRotationMatrix(Hr), this.quaternion.premultiply(Gr.invert()));
      },
      add: function add(t) {
        if (arguments.length > 1) {
          for (var _t20 = 0; _t20 < arguments.length; _t20++) {
            this.add(arguments[_t20]);
          }

          return this;
        }

        return t === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", t), this) : (t && t.isObject3D ? (null !== t.parent && t.parent.remove(t), t.parent = this, this.children.push(t), t.dispatchEvent(Yr)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", t), this);
      },
      remove: function remove(t) {
        if (arguments.length > 1) {
          for (var _t21 = 0; _t21 < arguments.length; _t21++) {
            this.remove(arguments[_t21]);
          }

          return this;
        }

        var e = this.children.indexOf(t);
        return -1 !== e && (t.parent = null, this.children.splice(e, 1), t.dispatchEvent(Zr)), this;
      },
      clear: function clear() {
        for (var _t22 = 0; _t22 < this.children.length; _t22++) {
          var _e6 = this.children[_t22];
          _e6.parent = null, _e6.dispatchEvent(Zr);
        }

        return this.children.length = 0, this;
      },
      attach: function attach(t) {
        return this.updateWorldMatrix(!0, !1), Hr.copy(this.matrixWorld).invert(), null !== t.parent && (t.parent.updateWorldMatrix(!0, !1), Hr.multiply(t.parent.matrixWorld)), t.applyMatrix4(Hr), this.add(t), t.updateWorldMatrix(!1, !0), this;
      },
      getObjectById: function getObjectById(t) {
        return this.getObjectByProperty("id", t);
      },
      getObjectByName: function getObjectByName(t) {
        return this.getObjectByProperty("name", t);
      },
      getObjectByProperty: function getObjectByProperty(t, e) {
        if (this[t] === e) return this;

        for (var _n16 = 0, _r14 = this.children.length; _n16 < _r14; _n16++) {
          var _r15 = this.children[_n16].getObjectByProperty(t, e);

          if (void 0 !== _r15) return _r15;
        }
      },
      getWorldPosition: function getWorldPosition(t) {
        return void 0 === t && (console.warn("THREE.Object3D: .getWorldPosition() target is now required"), t = new Yn()), this.updateWorldMatrix(!0, !1), t.setFromMatrixPosition(this.matrixWorld);
      },
      getWorldQuaternion: function getWorldQuaternion(t) {
        return void 0 === t && (console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"), t = new Xn()), this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(kr, t, Vr), t;
      },
      getWorldScale: function getWorldScale(t) {
        return void 0 === t && (console.warn("THREE.Object3D: .getWorldScale() target is now required"), t = new Yn()), this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(kr, Wr, t), t;
      },
      getWorldDirection: function getWorldDirection(t) {
        void 0 === t && (console.warn("THREE.Object3D: .getWorldDirection() target is now required"), t = new Yn()), this.updateWorldMatrix(!0, !1);
        var e = this.matrixWorld.elements;
        return t.set(e[8], e[9], e[10]).normalize();
      },
      raycast: function raycast() {},
      traverse: function traverse(t) {
        t(this);
        var e = this.children;

        for (var _n17 = 0, _r16 = e.length; _n17 < _r16; _n17++) {
          e[_n17].traverse(t);
        }
      },
      traverseVisible: function traverseVisible(t) {
        if (!1 === this.visible) return;
        t(this);
        var e = this.children;

        for (var _n18 = 0, _r17 = e.length; _n18 < _r17; _n18++) {
          e[_n18].traverseVisible(t);
        }
      },
      traverseAncestors: function traverseAncestors(t) {
        var e = this.parent;
        null !== e && (t(e), e.traverseAncestors(t));
      },
      updateMatrix: function updateMatrix() {
        this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = !0;
      },
      updateMatrixWorld: function updateMatrixWorld(t) {
        this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || t) && (null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, t = !0);
        var e = this.children;

        for (var _n19 = 0, _r18 = e.length; _n19 < _r18; _n19++) {
          e[_n19].updateMatrixWorld(t);
        }
      },
      updateWorldMatrix: function updateWorldMatrix(t, e) {
        var n = this.parent;

        if (!0 === t && null !== n && n.updateWorldMatrix(!0, !1), this.matrixAutoUpdate && this.updateMatrix(), null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), !0 === e) {
          var _t23 = this.children;

          for (var _e7 = 0, _n20 = _t23.length; _e7 < _n20; _e7++) {
            _t23[_e7].updateWorldMatrix(!1, !0);
          }
        }
      },
      toJSON: function toJSON(t) {
        var e = void 0 === t || "string" == typeof t,
            n = {};
        e && (t = {
          geometries: {},
          materials: {},
          textures: {},
          images: {},
          shapes: {},
          skeletons: {},
          animations: {}
        }, n.metadata = {
          version: 4.5,
          type: "Object",
          generator: "Object3D.toJSON"
        });
        var r = {};

        function i(e, n) {
          return void 0 === e[n.uuid] && (e[n.uuid] = n.toJSON(t)), n.uuid;
        }

        if (r.uuid = this.uuid, r.type = this.type, "" !== this.name && (r.name = this.name), !0 === this.castShadow && (r.castShadow = !0), !0 === this.receiveShadow && (r.receiveShadow = !0), !1 === this.visible && (r.visible = !1), !1 === this.frustumCulled && (r.frustumCulled = !1), 0 !== this.renderOrder && (r.renderOrder = this.renderOrder), "{}" !== JSON.stringify(this.userData) && (r.userData = this.userData), r.layers = this.layers.mask, r.matrix = this.matrix.toArray(), !1 === this.matrixAutoUpdate && (r.matrixAutoUpdate = !1), this.isInstancedMesh && (r.type = "InstancedMesh", r.count = this.count, r.instanceMatrix = this.instanceMatrix.toJSON(), null !== this.instanceColor && (r.instanceColor = this.instanceColor.toJSON())), this.isMesh || this.isLine || this.isPoints) {
          r.geometry = i(t.geometries, this.geometry);
          var _e8 = this.geometry.parameters;

          if (void 0 !== _e8 && void 0 !== _e8.shapes) {
            var _n21 = _e8.shapes;
            if (Array.isArray(_n21)) for (var _e9 = 0, _r19 = _n21.length; _e9 < _r19; _e9++) {
              var _r20 = _n21[_e9];
              i(t.shapes, _r20);
            } else i(t.shapes, _n21);
          }
        }

        if (this.isSkinnedMesh && (r.bindMode = this.bindMode, r.bindMatrix = this.bindMatrix.toArray(), void 0 !== this.skeleton && (i(t.skeletons, this.skeleton), r.skeleton = this.skeleton.uuid)), void 0 !== this.material) if (Array.isArray(this.material)) {
          var _e10 = [];

          for (var _n22 = 0, _r21 = this.material.length; _n22 < _r21; _n22++) {
            _e10.push(i(t.materials, this.material[_n22]));
          }

          r.material = _e10;
        } else r.material = i(t.materials, this.material);

        if (this.children.length > 0) {
          r.children = [];

          for (var _e11 = 0; _e11 < this.children.length; _e11++) {
            r.children.push(this.children[_e11].toJSON(t).object);
          }
        }

        if (this.animations.length > 0) {
          r.animations = [];

          for (var _e12 = 0; _e12 < this.animations.length; _e12++) {
            var _n23 = this.animations[_e12];
            r.animations.push(i(t.animations, _n23));
          }
        }

        if (e) {
          var _e13 = s(t.geometries),
              _r22 = s(t.materials),
              _i12 = s(t.textures),
              _o4 = s(t.images),
              _a5 = s(t.shapes),
              _l7 = s(t.skeletons),
              _c5 = s(t.animations);

          _e13.length > 0 && (n.geometries = _e13), _r22.length > 0 && (n.materials = _r22), _i12.length > 0 && (n.textures = _i12), _o4.length > 0 && (n.images = _o4), _a5.length > 0 && (n.shapes = _a5), _l7.length > 0 && (n.skeletons = _l7), _c5.length > 0 && (n.animations = _c5);
        }

        return n.object = r, n;

        function s(t) {
          var e = [];

          for (var _n24 in t) {
            var _r23 = t[_n24];
            delete _r23.metadata, e.push(_r23);
          }

          return e;
        }
      },
      clone: function clone(t) {
        return new this.constructor().copy(this, t);
      },
      copy: function copy(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !0;
        if (this.name = t.name, this.up.copy(t.up), this.position.copy(t.position), this.rotation.order = t.rotation.order, this.quaternion.copy(t.quaternion), this.scale.copy(t.scale), this.matrix.copy(t.matrix), this.matrixWorld.copy(t.matrixWorld), this.matrixAutoUpdate = t.matrixAutoUpdate, this.matrixWorldNeedsUpdate = t.matrixWorldNeedsUpdate, this.layers.mask = t.layers.mask, this.visible = t.visible, this.castShadow = t.castShadow, this.receiveShadow = t.receiveShadow, this.frustumCulled = t.frustumCulled, this.renderOrder = t.renderOrder, this.userData = JSON.parse(JSON.stringify(t.userData)), !0 === e) for (var _n25 = 0; _n25 < t.children.length; _n25++) {
          var _e14 = t.children[_n25];
          this.add(_e14.clone());
        }
        return this;
      }
    });
    var Qr = new Yn(),
        Kr = new Yn(),
        $r = new zn();

    var ti = /*#__PURE__*/function () {
      function ti() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Yn(1, 0, 0);
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        _classCallCheck(this, ti);

        this.normal = t, this.constant = e;
      }

      _createClass(ti, [{
        key: "set",
        value: function set(t, e) {
          return this.normal.copy(t), this.constant = e, this;
        }
      }, {
        key: "setComponents",
        value: function setComponents(t, e, n, r) {
          return this.normal.set(t, e, n), this.constant = r, this;
        }
      }, {
        key: "setFromNormalAndCoplanarPoint",
        value: function setFromNormalAndCoplanarPoint(t, e) {
          return this.normal.copy(t), this.constant = -e.dot(this.normal), this;
        }
      }, {
        key: "setFromCoplanarPoints",
        value: function setFromCoplanarPoints(t, e, n) {
          var r = Qr.subVectors(n, e).cross(Kr.subVectors(t, e)).normalize();
          return this.setFromNormalAndCoplanarPoint(r, t), this;
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return this.normal.copy(t.normal), this.constant = t.constant, this;
        }
      }, {
        key: "normalize",
        value: function normalize() {
          var t = 1 / this.normal.length();
          return this.normal.multiplyScalar(t), this.constant *= t, this;
        }
      }, {
        key: "negate",
        value: function negate() {
          return this.constant *= -1, this.normal.negate(), this;
        }
      }, {
        key: "distanceToPoint",
        value: function distanceToPoint(t) {
          return this.normal.dot(t) + this.constant;
        }
      }, {
        key: "distanceToSphere",
        value: function distanceToSphere(t) {
          return this.distanceToPoint(t.center) - t.radius;
        }
      }, {
        key: "projectPoint",
        value: function projectPoint(t, e) {
          return void 0 === e && (console.warn("THREE.Plane: .projectPoint() target is now required"), e = new Yn()), e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t);
        }
      }, {
        key: "intersectLine",
        value: function intersectLine(t, e) {
          void 0 === e && (console.warn("THREE.Plane: .intersectLine() target is now required"), e = new Yn());
          var n = t.delta(Qr),
              r = this.normal.dot(n);
          if (0 === r) return 0 === this.distanceToPoint(t.start) ? e.copy(t.start) : null;
          var i = -(t.start.dot(this.normal) + this.constant) / r;
          return i < 0 || i > 1 ? null : e.copy(n).multiplyScalar(i).add(t.start);
        }
      }, {
        key: "intersectsLine",
        value: function intersectsLine(t) {
          var e = this.distanceToPoint(t.start),
              n = this.distanceToPoint(t.end);
          return e < 0 && n > 0 || n < 0 && e > 0;
        }
      }, {
        key: "intersectsBox",
        value: function intersectsBox(t) {
          return t.intersectsPlane(this);
        }
      }, {
        key: "intersectsSphere",
        value: function intersectsSphere(t) {
          return t.intersectsPlane(this);
        }
      }, {
        key: "coplanarPoint",
        value: function coplanarPoint(t) {
          return void 0 === t && (console.warn("THREE.Plane: .coplanarPoint() target is now required"), t = new Yn()), t.copy(this.normal).multiplyScalar(-this.constant);
        }
      }, {
        key: "applyMatrix4",
        value: function applyMatrix4(t, e) {
          var n = e || $r.getNormalMatrix(t),
              r = this.coplanarPoint(Qr).applyMatrix4(t),
              i = this.normal.applyMatrix3(n).normalize();
          return this.constant = -r.dot(i), this;
        }
      }, {
        key: "translate",
        value: function translate(t) {
          return this.constant -= t.dot(this.normal), this;
        }
      }, {
        key: "equals",
        value: function equals(t) {
          return t.normal.equals(this.normal) && t.constant === this.constant;
        }
      }, {
        key: "clone",
        value: function clone() {
          return new this.constructor().copy(this);
        }
      }]);

      return ti;
    }();

    exports.Plane = ti, ti.prototype.isPlane = !0;
    var ei = new Yn(),
        ni = new Yn(),
        ri = new Yn(),
        ii = new Yn(),
        si = new Yn(),
        oi = new Yn(),
        ai = new Yn(),
        li = new Yn(),
        ci = new Yn(),
        hi = new Yn();

    var ui = /*#__PURE__*/function () {
      function ui() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Yn();
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Yn();
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Yn();

        _classCallCheck(this, ui);

        this.a = t, this.b = e, this.c = n;
      }

      _createClass(ui, [{
        key: "set",
        value: function set(t, e, n) {
          return this.a.copy(t), this.b.copy(e), this.c.copy(n), this;
        }
      }, {
        key: "setFromPointsAndIndices",
        value: function setFromPointsAndIndices(t, e, n, r) {
          return this.a.copy(t[e]), this.b.copy(t[n]), this.c.copy(t[r]), this;
        }
      }, {
        key: "clone",
        value: function clone() {
          return new this.constructor().copy(this);
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return this.a.copy(t.a), this.b.copy(t.b), this.c.copy(t.c), this;
        }
      }, {
        key: "getArea",
        value: function getArea() {
          return ei.subVectors(this.c, this.b), ni.subVectors(this.a, this.b), .5 * ei.cross(ni).length();
        }
      }, {
        key: "getMidpoint",
        value: function getMidpoint(t) {
          return void 0 === t && (console.warn("THREE.Triangle: .getMidpoint() target is now required"), t = new Yn()), t.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
        }
      }, {
        key: "getNormal",
        value: function getNormal(t) {
          return ui.getNormal(this.a, this.b, this.c, t);
        }
      }, {
        key: "getPlane",
        value: function getPlane(t) {
          return void 0 === t && (console.warn("THREE.Triangle: .getPlane() target is now required"), t = new ti()), t.setFromCoplanarPoints(this.a, this.b, this.c);
        }
      }, {
        key: "getBarycoord",
        value: function getBarycoord(t, e) {
          return ui.getBarycoord(t, this.a, this.b, this.c, e);
        }
      }, {
        key: "getUV",
        value: function getUV(t, e, n, r, i) {
          return ui.getUV(t, this.a, this.b, this.c, e, n, r, i);
        }
      }, {
        key: "containsPoint",
        value: function containsPoint(t) {
          return ui.containsPoint(t, this.a, this.b, this.c);
        }
      }, {
        key: "isFrontFacing",
        value: function isFrontFacing(t) {
          return ui.isFrontFacing(this.a, this.b, this.c, t);
        }
      }, {
        key: "intersectsBox",
        value: function intersectsBox(t) {
          return t.intersectsTriangle(this);
        }
      }, {
        key: "closestPointToPoint",
        value: function closestPointToPoint(t, e) {
          void 0 === e && (console.warn("THREE.Triangle: .closestPointToPoint() target is now required"), e = new Yn());
          var n = this.a,
              r = this.b,
              i = this.c;
          var s, o;
          si.subVectors(r, n), oi.subVectors(i, n), li.subVectors(t, n);
          var a = si.dot(li),
              l = oi.dot(li);
          if (a <= 0 && l <= 0) return e.copy(n);
          ci.subVectors(t, r);
          var c = si.dot(ci),
              h = oi.dot(ci);
          if (c >= 0 && h <= c) return e.copy(r);
          var u = a * h - c * l;
          if (u <= 0 && a >= 0 && c <= 0) return s = a / (a - c), e.copy(n).addScaledVector(si, s);
          hi.subVectors(t, i);
          var p = si.dot(hi),
              d = oi.dot(hi);
          if (d >= 0 && p <= d) return e.copy(i);
          var m = p * l - a * d;
          if (m <= 0 && l >= 0 && d <= 0) return o = l / (l - d), e.copy(n).addScaledVector(oi, o);
          var f = c * d - p * h;
          if (f <= 0 && h - c >= 0 && p - d >= 0) return ai.subVectors(i, r), o = (h - c) / (h - c + (p - d)), e.copy(r).addScaledVector(ai, o);
          var g = 1 / (f + m + u);
          return s = m * g, o = u * g, e.copy(n).addScaledVector(si, s).addScaledVector(oi, o);
        }
      }, {
        key: "equals",
        value: function equals(t) {
          return t.a.equals(this.a) && t.b.equals(this.b) && t.c.equals(this.c);
        }
      }], [{
        key: "getNormal",
        value: function getNormal(t, e, n, r) {
          void 0 === r && (console.warn("THREE.Triangle: .getNormal() target is now required"), r = new Yn()), r.subVectors(n, e), ei.subVectors(t, e), r.cross(ei);
          var i = r.lengthSq();
          return i > 0 ? r.multiplyScalar(1 / Math.sqrt(i)) : r.set(0, 0, 0);
        }
      }, {
        key: "getBarycoord",
        value: function getBarycoord(t, e, n, r, i) {
          ei.subVectors(r, e), ni.subVectors(n, e), ri.subVectors(t, e);
          var s = ei.dot(ei),
              o = ei.dot(ni),
              a = ei.dot(ri),
              l = ni.dot(ni),
              c = ni.dot(ri),
              h = s * l - o * o;
          if (void 0 === i && (console.warn("THREE.Triangle: .getBarycoord() target is now required"), i = new Yn()), 0 === h) return i.set(-2, -1, -1);
          var u = 1 / h,
              p = (l * a - o * c) * u,
              d = (s * c - o * a) * u;
          return i.set(1 - p - d, d, p);
        }
      }, {
        key: "containsPoint",
        value: function containsPoint(t, e, n, r) {
          return this.getBarycoord(t, e, n, r, ii), ii.x >= 0 && ii.y >= 0 && ii.x + ii.y <= 1;
        }
      }, {
        key: "getUV",
        value: function getUV(t, e, n, r, i, s, o, a) {
          return this.getBarycoord(t, e, n, r, ii), a.set(0, 0), a.addScaledVector(i, ii.x), a.addScaledVector(s, ii.y), a.addScaledVector(o, ii.z), a;
        }
      }, {
        key: "isFrontFacing",
        value: function isFrontFacing(t, e, n, r) {
          return ei.subVectors(n, e), ni.subVectors(t, e), ei.cross(ni).dot(r) < 0;
        }
      }]);

      return ui;
    }();

    exports.Triangle = ui;
    var pi = 0;

    function di() {
      Object.defineProperty(this, "id", {
        value: pi++
      }), this.uuid = Fn.generateUUID(), this.name = "", this.type = "Material", this.fog = !0, this.blending = x, this.side = u, this.vertexColors = !1, this.opacity = 1, this.transparent = !1, this.blendSrc = P, this.blendDst = D, this.blendEquation = w, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.depthFunc = U, this.depthTest = !0, this.depthWrite = !0, this.stencilWriteMask = 255, this.stencilFunc = bn, this.stencilRef = 0, this.stencilFuncMask = 255, this.stencilFail = an, this.stencilZFail = an, this.stencilZPass = an, this.stencilWrite = !1, this.clippingPlanes = null, this.clipIntersection = !1, this.clipShadows = !1, this.shadowSide = null, this.colorWrite = !0, this.precision = null, this.polygonOffset = !1, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = !1, this.alphaTest = 0, this.alphaToCoverage = !1, this.premultipliedAlpha = !1, this.visible = !0, this.toneMapped = !0, this.userData = {}, this.version = 0;
    }

    di.prototype = Object.assign(Object.create(In.prototype), {
      constructor: di,
      isMaterial: !0,
      onBeforeCompile: function onBeforeCompile() {},
      customProgramCacheKey: function customProgramCacheKey() {
        return this.onBeforeCompile.toString();
      },
      setValues: function setValues(t) {
        if (void 0 !== t) for (var _e15 in t) {
          var _n26 = t[_e15];

          if (void 0 === _n26) {
            console.warn("THREE.Material: '" + _e15 + "' parameter is undefined.");
            continue;
          }

          if ("shading" === _e15) {
            console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."), this.flatShading = 1 === _n26;
            continue;
          }

          var _r24 = this[_e15];
          void 0 !== _r24 ? _r24 && _r24.isColor ? _r24.set(_n26) : _r24 && _r24.isVector3 && _n26 && _n26.isVector3 ? _r24.copy(_n26) : this[_e15] = _n26 : console.warn("THREE." + this.type + ": '" + _e15 + "' is not a property of this material.");
        }
      },
      toJSON: function toJSON(t) {
        var e = void 0 === t || "string" == typeof t;
        e && (t = {
          textures: {},
          images: {}
        });
        var n = {
          metadata: {
            version: 4.5,
            type: "Material",
            generator: "Material.toJSON"
          }
        };

        function r(t) {
          var e = [];

          for (var _n27 in t) {
            var _r25 = t[_n27];
            delete _r25.metadata, e.push(_r25);
          }

          return e;
        }

        if (n.uuid = this.uuid, n.type = this.type, "" !== this.name && (n.name = this.name), this.color && this.color.isColor && (n.color = this.color.getHex()), void 0 !== this.roughness && (n.roughness = this.roughness), void 0 !== this.metalness && (n.metalness = this.metalness), this.sheen && this.sheen.isColor && (n.sheen = this.sheen.getHex()), this.emissive && this.emissive.isColor && (n.emissive = this.emissive.getHex()), this.emissiveIntensity && 1 !== this.emissiveIntensity && (n.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (n.specular = this.specular.getHex()), void 0 !== this.shininess && (n.shininess = this.shininess), void 0 !== this.clearcoat && (n.clearcoat = this.clearcoat), void 0 !== this.clearcoatRoughness && (n.clearcoatRoughness = this.clearcoatRoughness), this.clearcoatMap && this.clearcoatMap.isTexture && (n.clearcoatMap = this.clearcoatMap.toJSON(t).uuid), this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (n.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(t).uuid), this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (n.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(t).uuid, n.clearcoatNormalScale = this.clearcoatNormalScale.toArray()), this.map && this.map.isTexture && (n.map = this.map.toJSON(t).uuid), this.matcap && this.matcap.isTexture && (n.matcap = this.matcap.toJSON(t).uuid), this.alphaMap && this.alphaMap.isTexture && (n.alphaMap = this.alphaMap.toJSON(t).uuid), this.lightMap && this.lightMap.isTexture && (n.lightMap = this.lightMap.toJSON(t).uuid, n.lightMapIntensity = this.lightMapIntensity), this.aoMap && this.aoMap.isTexture && (n.aoMap = this.aoMap.toJSON(t).uuid, n.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (n.bumpMap = this.bumpMap.toJSON(t).uuid, n.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (n.normalMap = this.normalMap.toJSON(t).uuid, n.normalMapType = this.normalMapType, n.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (n.displacementMap = this.displacementMap.toJSON(t).uuid, n.displacementScale = this.displacementScale, n.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (n.roughnessMap = this.roughnessMap.toJSON(t).uuid), this.metalnessMap && this.metalnessMap.isTexture && (n.metalnessMap = this.metalnessMap.toJSON(t).uuid), this.emissiveMap && this.emissiveMap.isTexture && (n.emissiveMap = this.emissiveMap.toJSON(t).uuid), this.specularMap && this.specularMap.isTexture && (n.specularMap = this.specularMap.toJSON(t).uuid), this.envMap && this.envMap.isTexture && (n.envMap = this.envMap.toJSON(t).uuid, n.reflectivity = this.reflectivity, n.refractionRatio = this.refractionRatio, void 0 !== this.combine && (n.combine = this.combine), void 0 !== this.envMapIntensity && (n.envMapIntensity = this.envMapIntensity)), this.gradientMap && this.gradientMap.isTexture && (n.gradientMap = this.gradientMap.toJSON(t).uuid), void 0 !== this.size && (n.size = this.size), null !== this.shadowSide && (n.shadowSide = this.shadowSide), void 0 !== this.sizeAttenuation && (n.sizeAttenuation = this.sizeAttenuation), this.blending !== x && (n.blending = this.blending), this.side !== u && (n.side = this.side), this.vertexColors && (n.vertexColors = !0), this.opacity < 1 && (n.opacity = this.opacity), !0 === this.transparent && (n.transparent = this.transparent), n.depthFunc = this.depthFunc, n.depthTest = this.depthTest, n.depthWrite = this.depthWrite, n.colorWrite = this.colorWrite, n.stencilWrite = this.stencilWrite, n.stencilWriteMask = this.stencilWriteMask, n.stencilFunc = this.stencilFunc, n.stencilRef = this.stencilRef, n.stencilFuncMask = this.stencilFuncMask, n.stencilFail = this.stencilFail, n.stencilZFail = this.stencilZFail, n.stencilZPass = this.stencilZPass, this.rotation && 0 !== this.rotation && (n.rotation = this.rotation), !0 === this.polygonOffset && (n.polygonOffset = !0), 0 !== this.polygonOffsetFactor && (n.polygonOffsetFactor = this.polygonOffsetFactor), 0 !== this.polygonOffsetUnits && (n.polygonOffsetUnits = this.polygonOffsetUnits), this.linewidth && 1 !== this.linewidth && (n.linewidth = this.linewidth), void 0 !== this.dashSize && (n.dashSize = this.dashSize), void 0 !== this.gapSize && (n.gapSize = this.gapSize), void 0 !== this.scale && (n.scale = this.scale), !0 === this.dithering && (n.dithering = !0), this.alphaTest > 0 && (n.alphaTest = this.alphaTest), !0 === this.alphaToCoverage && (n.alphaToCoverage = this.alphaToCoverage), !0 === this.premultipliedAlpha && (n.premultipliedAlpha = this.premultipliedAlpha), !0 === this.wireframe && (n.wireframe = this.wireframe), this.wireframeLinewidth > 1 && (n.wireframeLinewidth = this.wireframeLinewidth), "round" !== this.wireframeLinecap && (n.wireframeLinecap = this.wireframeLinecap), "round" !== this.wireframeLinejoin && (n.wireframeLinejoin = this.wireframeLinejoin), !0 === this.morphTargets && (n.morphTargets = !0), !0 === this.morphNormals && (n.morphNormals = !0), !0 === this.skinning && (n.skinning = !0), !0 === this.flatShading && (n.flatShading = this.flatShading), !1 === this.visible && (n.visible = !1), !1 === this.toneMapped && (n.toneMapped = !1), "{}" !== JSON.stringify(this.userData) && (n.userData = this.userData), e) {
          var _e16 = r(t.textures),
              _i13 = r(t.images);

          _e16.length > 0 && (n.textures = _e16), _i13.length > 0 && (n.images = _i13);
        }

        return n;
      },
      clone: function clone() {
        return new this.constructor().copy(this);
      },
      copy: function copy(t) {
        this.name = t.name, this.fog = t.fog, this.blending = t.blending, this.side = t.side, this.vertexColors = t.vertexColors, this.opacity = t.opacity, this.transparent = t.transparent, this.blendSrc = t.blendSrc, this.blendDst = t.blendDst, this.blendEquation = t.blendEquation, this.blendSrcAlpha = t.blendSrcAlpha, this.blendDstAlpha = t.blendDstAlpha, this.blendEquationAlpha = t.blendEquationAlpha, this.depthFunc = t.depthFunc, this.depthTest = t.depthTest, this.depthWrite = t.depthWrite, this.stencilWriteMask = t.stencilWriteMask, this.stencilFunc = t.stencilFunc, this.stencilRef = t.stencilRef, this.stencilFuncMask = t.stencilFuncMask, this.stencilFail = t.stencilFail, this.stencilZFail = t.stencilZFail, this.stencilZPass = t.stencilZPass, this.stencilWrite = t.stencilWrite;
        var e = t.clippingPlanes;
        var n = null;

        if (null !== e) {
          var _t24 = e.length;
          n = new Array(_t24);

          for (var _r26 = 0; _r26 !== _t24; ++_r26) {
            n[_r26] = e[_r26].clone();
          }
        }

        return this.clippingPlanes = n, this.clipIntersection = t.clipIntersection, this.clipShadows = t.clipShadows, this.shadowSide = t.shadowSide, this.colorWrite = t.colorWrite, this.precision = t.precision, this.polygonOffset = t.polygonOffset, this.polygonOffsetFactor = t.polygonOffsetFactor, this.polygonOffsetUnits = t.polygonOffsetUnits, this.dithering = t.dithering, this.alphaTest = t.alphaTest, this.alphaToCoverage = t.alphaToCoverage, this.premultipliedAlpha = t.premultipliedAlpha, this.visible = t.visible, this.toneMapped = t.toneMapped, this.userData = JSON.parse(JSON.stringify(t.userData)), this;
      },
      dispose: function dispose() {
        this.dispatchEvent({
          type: "dispose"
        });
      }
    }), Object.defineProperty(di.prototype, "needsUpdate", {
      set: function set(t) {
        !0 === t && this.version++;
      }
    });
    var mi = {
      aliceblue: 15792383,
      antiquewhite: 16444375,
      aqua: 65535,
      aquamarine: 8388564,
      azure: 15794175,
      beige: 16119260,
      bisque: 16770244,
      black: 0,
      blanchedalmond: 16772045,
      blue: 255,
      blueviolet: 9055202,
      brown: 10824234,
      burlywood: 14596231,
      cadetblue: 6266528,
      chartreuse: 8388352,
      chocolate: 13789470,
      coral: 16744272,
      cornflowerblue: 6591981,
      cornsilk: 16775388,
      crimson: 14423100,
      cyan: 65535,
      darkblue: 139,
      darkcyan: 35723,
      darkgoldenrod: 12092939,
      darkgray: 11119017,
      darkgreen: 25600,
      darkgrey: 11119017,
      darkkhaki: 12433259,
      darkmagenta: 9109643,
      darkolivegreen: 5597999,
      darkorange: 16747520,
      darkorchid: 10040012,
      darkred: 9109504,
      darksalmon: 15308410,
      darkseagreen: 9419919,
      darkslateblue: 4734347,
      darkslategray: 3100495,
      darkslategrey: 3100495,
      darkturquoise: 52945,
      darkviolet: 9699539,
      deeppink: 16716947,
      deepskyblue: 49151,
      dimgray: 6908265,
      dimgrey: 6908265,
      dodgerblue: 2003199,
      firebrick: 11674146,
      floralwhite: 16775920,
      forestgreen: 2263842,
      fuchsia: 16711935,
      gainsboro: 14474460,
      ghostwhite: 16316671,
      gold: 16766720,
      goldenrod: 14329120,
      gray: 8421504,
      green: 32768,
      greenyellow: 11403055,
      grey: 8421504,
      honeydew: 15794160,
      hotpink: 16738740,
      indianred: 13458524,
      indigo: 4915330,
      ivory: 16777200,
      khaki: 15787660,
      lavender: 15132410,
      lavenderblush: 16773365,
      lawngreen: 8190976,
      lemonchiffon: 16775885,
      lightblue: 11393254,
      lightcoral: 15761536,
      lightcyan: 14745599,
      lightgoldenrodyellow: 16448210,
      lightgray: 13882323,
      lightgreen: 9498256,
      lightgrey: 13882323,
      lightpink: 16758465,
      lightsalmon: 16752762,
      lightseagreen: 2142890,
      lightskyblue: 8900346,
      lightslategray: 7833753,
      lightslategrey: 7833753,
      lightsteelblue: 11584734,
      lightyellow: 16777184,
      lime: 65280,
      limegreen: 3329330,
      linen: 16445670,
      magenta: 16711935,
      maroon: 8388608,
      mediumaquamarine: 6737322,
      mediumblue: 205,
      mediumorchid: 12211667,
      mediumpurple: 9662683,
      mediumseagreen: 3978097,
      mediumslateblue: 8087790,
      mediumspringgreen: 64154,
      mediumturquoise: 4772300,
      mediumvioletred: 13047173,
      midnightblue: 1644912,
      mintcream: 16121850,
      mistyrose: 16770273,
      moccasin: 16770229,
      navajowhite: 16768685,
      navy: 128,
      oldlace: 16643558,
      olive: 8421376,
      olivedrab: 7048739,
      orange: 16753920,
      orangered: 16729344,
      orchid: 14315734,
      palegoldenrod: 15657130,
      palegreen: 10025880,
      paleturquoise: 11529966,
      palevioletred: 14381203,
      papayawhip: 16773077,
      peachpuff: 16767673,
      peru: 13468991,
      pink: 16761035,
      plum: 14524637,
      powderblue: 11591910,
      purple: 8388736,
      rebeccapurple: 6697881,
      red: 16711680,
      rosybrown: 12357519,
      royalblue: 4286945,
      saddlebrown: 9127187,
      salmon: 16416882,
      sandybrown: 16032864,
      seagreen: 3050327,
      seashell: 16774638,
      sienna: 10506797,
      silver: 12632256,
      skyblue: 8900331,
      slateblue: 6970061,
      slategray: 7372944,
      slategrey: 7372944,
      snow: 16775930,
      springgreen: 65407,
      steelblue: 4620980,
      tan: 13808780,
      teal: 32896,
      thistle: 14204888,
      tomato: 16737095,
      turquoise: 4251856,
      violet: 15631086,
      wheat: 16113331,
      white: 16777215,
      whitesmoke: 16119285,
      yellow: 16776960,
      yellowgreen: 10145074
    },
        fi = {
      h: 0,
      s: 0,
      l: 0
    },
        gi = {
      h: 0,
      s: 0,
      l: 0
    };

    function xi(t, e, n) {
      return n < 0 && (n += 1), n > 1 && (n -= 1), n < 1 / 6 ? t + 6 * (e - t) * n : n < .5 ? e : n < 2 / 3 ? t + 6 * (e - t) * (2 / 3 - n) : t;
    }

    function vi(t) {
      return t < .04045 ? .0773993808 * t : Math.pow(.9478672986 * t + .0521327014, 2.4);
    }

    function yi(t) {
      return t < .0031308 ? 12.92 * t : 1.055 * Math.pow(t, .41666) - .055;
    }

    var _i = /*#__PURE__*/function () {
      function _i(t, e, n) {
        _classCallCheck(this, _i);

        return void 0 === e && void 0 === n ? this.set(t) : this.setRGB(t, e, n);
      }

      _createClass(_i, [{
        key: "set",
        value: function set(t) {
          return t && t.isColor ? this.copy(t) : "number" == typeof t ? this.setHex(t) : "string" == typeof t && this.setStyle(t), this;
        }
      }, {
        key: "setScalar",
        value: function setScalar(t) {
          return this.r = t, this.g = t, this.b = t, this;
        }
      }, {
        key: "setHex",
        value: function setHex(t) {
          return t = Math.floor(t), this.r = (t >> 16 & 255) / 255, this.g = (t >> 8 & 255) / 255, this.b = (255 & t) / 255, this;
        }
      }, {
        key: "setRGB",
        value: function setRGB(t, e, n) {
          return this.r = t, this.g = e, this.b = n, this;
        }
      }, {
        key: "setHSL",
        value: function setHSL(t, e, n) {
          if (t = Fn.euclideanModulo(t, 1), e = Fn.clamp(e, 0, 1), n = Fn.clamp(n, 0, 1), 0 === e) this.r = this.g = this.b = n;else {
            var _r27 = n <= .5 ? n * (1 + e) : n + e - n * e,
                _i14 = 2 * n - _r27;

            this.r = xi(_i14, _r27, t + 1 / 3), this.g = xi(_i14, _r27, t), this.b = xi(_i14, _r27, t - 1 / 3);
          }
          return this;
        }
      }, {
        key: "setStyle",
        value: function setStyle(t) {
          function e(e) {
            void 0 !== e && parseFloat(e) < 1 && console.warn("THREE.Color: Alpha component of " + t + " will be ignored.");
          }

          var n;

          if (n = /^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(t)) {
            var _t25;

            var _r28 = n[1],
                _i15 = n[2];

            switch (_r28) {
              case "rgb":
              case "rgba":
                if (_t25 = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(_i15)) return this.r = Math.min(255, parseInt(_t25[1], 10)) / 255, this.g = Math.min(255, parseInt(_t25[2], 10)) / 255, this.b = Math.min(255, parseInt(_t25[3], 10)) / 255, e(_t25[4]), this;
                if (_t25 = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(_i15)) return this.r = Math.min(100, parseInt(_t25[1], 10)) / 100, this.g = Math.min(100, parseInt(_t25[2], 10)) / 100, this.b = Math.min(100, parseInt(_t25[3], 10)) / 100, e(_t25[4]), this;
                break;

              case "hsl":
              case "hsla":
                if (_t25 = /^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(_i15)) {
                  var _n28 = parseFloat(_t25[1]) / 360,
                      _r29 = parseInt(_t25[2], 10) / 100,
                      _i16 = parseInt(_t25[3], 10) / 100;

                  return e(_t25[4]), this.setHSL(_n28, _r29, _i16);
                }

            }
          } else if (n = /^\#([A-Fa-f\d]+)$/.exec(t)) {
            var _t26 = n[1],
                _e17 = _t26.length;
            if (3 === _e17) return this.r = parseInt(_t26.charAt(0) + _t26.charAt(0), 16) / 255, this.g = parseInt(_t26.charAt(1) + _t26.charAt(1), 16) / 255, this.b = parseInt(_t26.charAt(2) + _t26.charAt(2), 16) / 255, this;
            if (6 === _e17) return this.r = parseInt(_t26.charAt(0) + _t26.charAt(1), 16) / 255, this.g = parseInt(_t26.charAt(2) + _t26.charAt(3), 16) / 255, this.b = parseInt(_t26.charAt(4) + _t26.charAt(5), 16) / 255, this;
          }

          return t && t.length > 0 ? this.setColorName(t) : this;
        }
      }, {
        key: "setColorName",
        value: function setColorName(t) {
          var e = mi[t];
          return void 0 !== e ? this.setHex(e) : console.warn("THREE.Color: Unknown color " + t), this;
        }
      }, {
        key: "clone",
        value: function clone() {
          return new this.constructor(this.r, this.g, this.b);
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return this.r = t.r, this.g = t.g, this.b = t.b, this;
        }
      }, {
        key: "copyGammaToLinear",
        value: function copyGammaToLinear(t) {
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
          return this.r = Math.pow(t.r, e), this.g = Math.pow(t.g, e), this.b = Math.pow(t.b, e), this;
        }
      }, {
        key: "copyLinearToGamma",
        value: function copyLinearToGamma(t) {
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
          var n = e > 0 ? 1 / e : 1;
          return this.r = Math.pow(t.r, n), this.g = Math.pow(t.g, n), this.b = Math.pow(t.b, n), this;
        }
      }, {
        key: "convertGammaToLinear",
        value: function convertGammaToLinear(t) {
          return this.copyGammaToLinear(this, t), this;
        }
      }, {
        key: "convertLinearToGamma",
        value: function convertLinearToGamma(t) {
          return this.copyLinearToGamma(this, t), this;
        }
      }, {
        key: "copySRGBToLinear",
        value: function copySRGBToLinear(t) {
          return this.r = vi(t.r), this.g = vi(t.g), this.b = vi(t.b), this;
        }
      }, {
        key: "copyLinearToSRGB",
        value: function copyLinearToSRGB(t) {
          return this.r = yi(t.r), this.g = yi(t.g), this.b = yi(t.b), this;
        }
      }, {
        key: "convertSRGBToLinear",
        value: function convertSRGBToLinear() {
          return this.copySRGBToLinear(this), this;
        }
      }, {
        key: "convertLinearToSRGB",
        value: function convertLinearToSRGB() {
          return this.copyLinearToSRGB(this), this;
        }
      }, {
        key: "getHex",
        value: function getHex() {
          return 255 * this.r << 16 ^ 255 * this.g << 8 ^ 255 * this.b << 0;
        }
      }, {
        key: "getHexString",
        value: function getHexString() {
          return ("000000" + this.getHex().toString(16)).slice(-6);
        }
      }, {
        key: "getHSL",
        value: function getHSL(t) {
          void 0 === t && (console.warn("THREE.Color: .getHSL() target is now required"), t = {
            h: 0,
            s: 0,
            l: 0
          });
          var e = this.r,
              n = this.g,
              r = this.b,
              i = Math.max(e, n, r),
              s = Math.min(e, n, r);
          var o, a;
          var l = (s + i) / 2;
          if (s === i) o = 0, a = 0;else {
            var _t27 = i - s;

            switch (a = l <= .5 ? _t27 / (i + s) : _t27 / (2 - i - s), i) {
              case e:
                o = (n - r) / _t27 + (n < r ? 6 : 0);
                break;

              case n:
                o = (r - e) / _t27 + 2;
                break;

              case r:
                o = (e - n) / _t27 + 4;
            }

            o /= 6;
          }
          return t.h = o, t.s = a, t.l = l, t;
        }
      }, {
        key: "getStyle",
        value: function getStyle() {
          return "rgb(" + (255 * this.r | 0) + "," + (255 * this.g | 0) + "," + (255 * this.b | 0) + ")";
        }
      }, {
        key: "offsetHSL",
        value: function offsetHSL(t, e, n) {
          return this.getHSL(fi), fi.h += t, fi.s += e, fi.l += n, this.setHSL(fi.h, fi.s, fi.l), this;
        }
      }, {
        key: "add",
        value: function add(t) {
          return this.r += t.r, this.g += t.g, this.b += t.b, this;
        }
      }, {
        key: "addColors",
        value: function addColors(t, e) {
          return this.r = t.r + e.r, this.g = t.g + e.g, this.b = t.b + e.b, this;
        }
      }, {
        key: "addScalar",
        value: function addScalar(t) {
          return this.r += t, this.g += t, this.b += t, this;
        }
      }, {
        key: "sub",
        value: function sub(t) {
          return this.r = Math.max(0, this.r - t.r), this.g = Math.max(0, this.g - t.g), this.b = Math.max(0, this.b - t.b), this;
        }
      }, {
        key: "multiply",
        value: function multiply(t) {
          return this.r *= t.r, this.g *= t.g, this.b *= t.b, this;
        }
      }, {
        key: "multiplyScalar",
        value: function multiplyScalar(t) {
          return this.r *= t, this.g *= t, this.b *= t, this;
        }
      }, {
        key: "lerp",
        value: function lerp(t, e) {
          return this.r += (t.r - this.r) * e, this.g += (t.g - this.g) * e, this.b += (t.b - this.b) * e, this;
        }
      }, {
        key: "lerpColors",
        value: function lerpColors(t, e, n) {
          return this.r = t.r + (e.r - t.r) * n, this.g = t.g + (e.g - t.g) * n, this.b = t.b + (e.b - t.b) * n, this;
        }
      }, {
        key: "lerpHSL",
        value: function lerpHSL(t, e) {
          this.getHSL(fi), t.getHSL(gi);
          var n = Fn.lerp(fi.h, gi.h, e),
              r = Fn.lerp(fi.s, gi.s, e),
              i = Fn.lerp(fi.l, gi.l, e);
          return this.setHSL(n, r, i), this;
        }
      }, {
        key: "equals",
        value: function equals(t) {
          return t.r === this.r && t.g === this.g && t.b === this.b;
        }
      }, {
        key: "fromArray",
        value: function fromArray(t) {
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          return this.r = t[e], this.g = t[e + 1], this.b = t[e + 2], this;
        }
      }, {
        key: "toArray",
        value: function toArray() {
          var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          return t[e] = this.r, t[e + 1] = this.g, t[e + 2] = this.b, t;
        }
      }, {
        key: "fromBufferAttribute",
        value: function fromBufferAttribute(t, e) {
          return this.r = t.getX(e), this.g = t.getY(e), this.b = t.getZ(e), !0 === t.normalized && (this.r /= 255, this.g /= 255, this.b /= 255), this;
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          return this.getHex();
        }
      }]);

      return _i;
    }();

    exports.Color = _i, _i.NAMES = mi, _i.prototype.isColor = !0, _i.prototype.r = 1, _i.prototype.g = 1, _i.prototype.b = 1;

    var bi = /*#__PURE__*/function (_di) {
      _inherits(bi, _di);

      var _super4 = _createSuper(bi);

      function bi(t) {
        var _this4;

        _classCallCheck(this, bi);

        _this4 = _super4.call(this), _this4.type = "MeshBasicMaterial", _this4.color = new _i(16777215), _this4.map = null, _this4.lightMap = null, _this4.lightMapIntensity = 1, _this4.aoMap = null, _this4.aoMapIntensity = 1, _this4.specularMap = null, _this4.alphaMap = null, _this4.envMap = null, _this4.combine = q, _this4.reflectivity = 1, _this4.refractionRatio = .98, _this4.wireframe = !1, _this4.wireframeLinewidth = 1, _this4.wireframeLinecap = "round", _this4.wireframeLinejoin = "round", _this4.skinning = !1, _this4.morphTargets = !1, _this4.setValues(t);
        return _this4;
      }

      _createClass(bi, [{
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(bi.prototype), "copy", this).call(this, t), this.color.copy(t.color), this.map = t.map, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.specularMap = t.specularMap, this.alphaMap = t.alphaMap, this.envMap = t.envMap, this.combine = t.combine, this.reflectivity = t.reflectivity, this.refractionRatio = t.refractionRatio, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.skinning = t.skinning, this.morphTargets = t.morphTargets, this;
        }
      }]);

      return bi;
    }(di);

    exports.MeshBasicMaterial = bi, bi.prototype.isMeshBasicMaterial = !0;
    var wi = new Yn(),
        Mi = new On();

    function Si(t, e, n) {
      if (Array.isArray(t)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
      this.name = "", this.array = t, this.itemSize = e, this.count = void 0 !== t ? t.length / e : 0, this.normalized = !0 === n, this.usage = wn, this.updateRange = {
        offset: 0,
        count: -1
      }, this.version = 0;
    }

    function Ti(t, e, n) {
      Si.call(this, new Int8Array(t), e, n);
    }

    function Ei(t, e, n) {
      Si.call(this, new Uint8Array(t), e, n);
    }

    function Ai(t, e, n) {
      Si.call(this, new Uint8ClampedArray(t), e, n);
    }

    function Li(t, e, n) {
      Si.call(this, new Int16Array(t), e, n);
    }

    function Ri(t, e, n) {
      Si.call(this, new Uint16Array(t), e, n);
    }

    function Ci(t, e, n) {
      Si.call(this, new Int32Array(t), e, n);
    }

    function Pi(t, e, n) {
      Si.call(this, new Uint32Array(t), e, n);
    }

    function Di(t, e, n) {
      Si.call(this, new Uint16Array(t), e, n);
    }

    function Ii(t, e, n) {
      Si.call(this, new Float32Array(t), e, n);
    }

    function Bi(t, e, n) {
      Si.call(this, new Float64Array(t), e, n);
    }

    function Ni(t) {
      if (0 === t.length) return -1 / 0;
      var e = t[0];

      for (var _n29 = 1, _r30 = t.length; _n29 < _r30; ++_n29) {
        t[_n29] > e && (e = t[_n29]);
      }

      return e;
    }

    Object.defineProperty(Si.prototype, "needsUpdate", {
      set: function set(t) {
        !0 === t && this.version++;
      }
    }), Object.assign(Si.prototype, {
      isBufferAttribute: !0,
      onUploadCallback: function onUploadCallback() {},
      setUsage: function setUsage(t) {
        return this.usage = t, this;
      },
      copy: function copy(t) {
        return this.name = t.name, this.array = new t.array.constructor(t.array), this.itemSize = t.itemSize, this.count = t.count, this.normalized = t.normalized, this.usage = t.usage, this;
      },
      copyAt: function copyAt(t, e, n) {
        t *= this.itemSize, n *= e.itemSize;

        for (var _r31 = 0, _i17 = this.itemSize; _r31 < _i17; _r31++) {
          this.array[t + _r31] = e.array[n + _r31];
        }

        return this;
      },
      copyArray: function copyArray(t) {
        return this.array.set(t), this;
      },
      copyColorsArray: function copyColorsArray(t) {
        var e = this.array;
        var n = 0;

        for (var _r32 = 0, _i18 = t.length; _r32 < _i18; _r32++) {
          var _i19 = t[_r32];
          void 0 === _i19 && (console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", _r32), _i19 = new _i()), e[n++] = _i19.r, e[n++] = _i19.g, e[n++] = _i19.b;
        }

        return this;
      },
      copyVector2sArray: function copyVector2sArray(t) {
        var e = this.array;
        var n = 0;

        for (var _r33 = 0, _i20 = t.length; _r33 < _i20; _r33++) {
          var _i21 = t[_r33];
          void 0 === _i21 && (console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", _r33), _i21 = new On()), e[n++] = _i21.x, e[n++] = _i21.y;
        }

        return this;
      },
      copyVector3sArray: function copyVector3sArray(t) {
        var e = this.array;
        var n = 0;

        for (var _r34 = 0, _i22 = t.length; _r34 < _i22; _r34++) {
          var _i23 = t[_r34];
          void 0 === _i23 && (console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", _r34), _i23 = new Yn()), e[n++] = _i23.x, e[n++] = _i23.y, e[n++] = _i23.z;
        }

        return this;
      },
      copyVector4sArray: function copyVector4sArray(t) {
        var e = this.array;
        var n = 0;

        for (var _r35 = 0, _i24 = t.length; _r35 < _i24; _r35++) {
          var _i25 = t[_r35];
          void 0 === _i25 && (console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", _r35), _i25 = new Wn()), e[n++] = _i25.x, e[n++] = _i25.y, e[n++] = _i25.z, e[n++] = _i25.w;
        }

        return this;
      },
      applyMatrix3: function applyMatrix3(t) {
        if (2 === this.itemSize) for (var _e18 = 0, _n30 = this.count; _e18 < _n30; _e18++) {
          Mi.fromBufferAttribute(this, _e18), Mi.applyMatrix3(t), this.setXY(_e18, Mi.x, Mi.y);
        } else if (3 === this.itemSize) for (var _e19 = 0, _n31 = this.count; _e19 < _n31; _e19++) {
          wi.fromBufferAttribute(this, _e19), wi.applyMatrix3(t), this.setXYZ(_e19, wi.x, wi.y, wi.z);
        }
        return this;
      },
      applyMatrix4: function applyMatrix4(t) {
        for (var _e20 = 0, _n32 = this.count; _e20 < _n32; _e20++) {
          wi.x = this.getX(_e20), wi.y = this.getY(_e20), wi.z = this.getZ(_e20), wi.applyMatrix4(t), this.setXYZ(_e20, wi.x, wi.y, wi.z);
        }

        return this;
      },
      applyNormalMatrix: function applyNormalMatrix(t) {
        for (var _e21 = 0, _n33 = this.count; _e21 < _n33; _e21++) {
          wi.x = this.getX(_e21), wi.y = this.getY(_e21), wi.z = this.getZ(_e21), wi.applyNormalMatrix(t), this.setXYZ(_e21, wi.x, wi.y, wi.z);
        }

        return this;
      },
      transformDirection: function transformDirection(t) {
        for (var _e22 = 0, _n34 = this.count; _e22 < _n34; _e22++) {
          wi.x = this.getX(_e22), wi.y = this.getY(_e22), wi.z = this.getZ(_e22), wi.transformDirection(t), this.setXYZ(_e22, wi.x, wi.y, wi.z);
        }

        return this;
      },
      set: function set(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return this.array.set(t, e), this;
      },
      getX: function getX(t) {
        return this.array[t * this.itemSize];
      },
      setX: function setX(t, e) {
        return this.array[t * this.itemSize] = e, this;
      },
      getY: function getY(t) {
        return this.array[t * this.itemSize + 1];
      },
      setY: function setY(t, e) {
        return this.array[t * this.itemSize + 1] = e, this;
      },
      getZ: function getZ(t) {
        return this.array[t * this.itemSize + 2];
      },
      setZ: function setZ(t, e) {
        return this.array[t * this.itemSize + 2] = e, this;
      },
      getW: function getW(t) {
        return this.array[t * this.itemSize + 3];
      },
      setW: function setW(t, e) {
        return this.array[t * this.itemSize + 3] = e, this;
      },
      setXY: function setXY(t, e, n) {
        return t *= this.itemSize, this.array[t + 0] = e, this.array[t + 1] = n, this;
      },
      setXYZ: function setXYZ(t, e, n, r) {
        return t *= this.itemSize, this.array[t + 0] = e, this.array[t + 1] = n, this.array[t + 2] = r, this;
      },
      setXYZW: function setXYZW(t, e, n, r, i) {
        return t *= this.itemSize, this.array[t + 0] = e, this.array[t + 1] = n, this.array[t + 2] = r, this.array[t + 3] = i, this;
      },
      onUpload: function onUpload(t) {
        return this.onUploadCallback = t, this;
      },
      clone: function clone() {
        return new this.constructor(this.array, this.itemSize).copy(this);
      },
      toJSON: function toJSON() {
        var t = {
          itemSize: this.itemSize,
          type: this.array.constructor.name,
          array: Array.prototype.slice.call(this.array),
          normalized: this.normalized
        };
        return "" !== this.name && (t.name = this.name), this.usage !== wn && (t.usage = this.usage), 0 === this.updateRange.offset && -1 === this.updateRange.count || (t.updateRange = this.updateRange), t;
      }
    }), Ti.prototype = Object.create(Si.prototype), Ti.prototype.constructor = Ti, Ei.prototype = Object.create(Si.prototype), Ei.prototype.constructor = Ei, Ai.prototype = Object.create(Si.prototype), Ai.prototype.constructor = Ai, Li.prototype = Object.create(Si.prototype), Li.prototype.constructor = Li, Ri.prototype = Object.create(Si.prototype), Ri.prototype.constructor = Ri, Ci.prototype = Object.create(Si.prototype), Ci.prototype.constructor = Ci, Pi.prototype = Object.create(Si.prototype), Pi.prototype.constructor = Pi, Di.prototype = Object.create(Si.prototype), Di.prototype.constructor = Di, Di.prototype.isFloat16BufferAttribute = !0, Ii.prototype = Object.create(Si.prototype), Ii.prototype.constructor = Ii, Bi.prototype = Object.create(Si.prototype), Bi.prototype.constructor = Bi;
    var Fi = {
      Int8Array: Int8Array,
      Uint8Array: Uint8Array,
      Uint8ClampedArray: Uint8ClampedArray,
      Int16Array: Int16Array,
      Uint16Array: Uint16Array,
      Int32Array: Int32Array,
      Uint32Array: Uint32Array,
      Float32Array: Float32Array,
      Float64Array: Float64Array
    };

    function Oi(t, e) {
      return new Fi[t](e);
    }

    var zi = 0;
    var Gi = new Tr(),
        Hi = new Jr(),
        Ui = new Yn(),
        ki = new Qn(),
        Vi = new Qn(),
        Wi = new Yn();

    function ji() {
      Object.defineProperty(this, "id", {
        value: zi++
      }), this.uuid = Fn.generateUUID(), this.name = "", this.type = "BufferGeometry", this.index = null, this.attributes = {}, this.morphAttributes = {}, this.morphTargetsRelative = !1, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = {
        start: 0,
        count: 1 / 0
      }, this.userData = {};
    }

    ji.prototype = Object.assign(Object.create(In.prototype), {
      constructor: ji,
      isBufferGeometry: !0,
      getIndex: function getIndex() {
        return this.index;
      },
      setIndex: function setIndex(t) {
        return Array.isArray(t) ? this.index = new (Ni(t) > 65535 ? Pi : Ri)(t, 1) : this.index = t, this;
      },
      getAttribute: function getAttribute(t) {
        return this.attributes[t];
      },
      setAttribute: function setAttribute(t, e) {
        return this.attributes[t] = e, this;
      },
      deleteAttribute: function deleteAttribute(t) {
        return delete this.attributes[t], this;
      },
      hasAttribute: function hasAttribute(t) {
        return void 0 !== this.attributes[t];
      },
      addGroup: function addGroup(t, e) {
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        this.groups.push({
          start: t,
          count: e,
          materialIndex: n
        });
      },
      clearGroups: function clearGroups() {
        this.groups = [];
      },
      setDrawRange: function setDrawRange(t, e) {
        this.drawRange.start = t, this.drawRange.count = e;
      },
      applyMatrix4: function applyMatrix4(t) {
        var e = this.attributes.position;
        void 0 !== e && (e.applyMatrix4(t), e.needsUpdate = !0);
        var n = this.attributes.normal;

        if (void 0 !== n) {
          var _e23 = new zn().getNormalMatrix(t);

          n.applyNormalMatrix(_e23), n.needsUpdate = !0;
        }

        var r = this.attributes.tangent;
        return void 0 !== r && (r.transformDirection(t), r.needsUpdate = !0), null !== this.boundingBox && this.computeBoundingBox(), null !== this.boundingSphere && this.computeBoundingSphere(), this;
      },
      rotateX: function rotateX(t) {
        return Gi.makeRotationX(t), this.applyMatrix4(Gi), this;
      },
      rotateY: function rotateY(t) {
        return Gi.makeRotationY(t), this.applyMatrix4(Gi), this;
      },
      rotateZ: function rotateZ(t) {
        return Gi.makeRotationZ(t), this.applyMatrix4(Gi), this;
      },
      translate: function translate(t, e, n) {
        return Gi.makeTranslation(t, e, n), this.applyMatrix4(Gi), this;
      },
      scale: function scale(t, e, n) {
        return Gi.makeScale(t, e, n), this.applyMatrix4(Gi), this;
      },
      lookAt: function lookAt(t) {
        return Hi.lookAt(t), Hi.updateMatrix(), this.applyMatrix4(Hi.matrix), this;
      },
      center: function center() {
        return this.computeBoundingBox(), this.boundingBox.getCenter(Ui).negate(), this.translate(Ui.x, Ui.y, Ui.z), this;
      },
      setFromPoints: function setFromPoints(t) {
        var e = [];

        for (var _n35 = 0, _r36 = t.length; _n35 < _r36; _n35++) {
          var _r37 = t[_n35];
          e.push(_r37.x, _r37.y, _r37.z || 0);
        }

        return this.setAttribute("position", new Ii(e, 3)), this;
      },
      computeBoundingBox: function computeBoundingBox() {
        null === this.boundingBox && (this.boundingBox = new Qn());
        var t = this.attributes.position,
            e = this.morphAttributes.position;
        if (t && t.isGLBufferAttribute) return console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this), void this.boundingBox.set(new Yn(-1 / 0, -1 / 0, -1 / 0), new Yn(1 / 0, 1 / 0, 1 / 0));

        if (void 0 !== t) {
          if (this.boundingBox.setFromBufferAttribute(t), e) for (var _n36 = 0, _r38 = e.length; _n36 < _r38; _n36++) {
            var _t28 = e[_n36];
            ki.setFromBufferAttribute(_t28), this.morphTargetsRelative ? (Wi.addVectors(this.boundingBox.min, ki.min), this.boundingBox.expandByPoint(Wi), Wi.addVectors(this.boundingBox.max, ki.max), this.boundingBox.expandByPoint(Wi)) : (this.boundingBox.expandByPoint(ki.min), this.boundingBox.expandByPoint(ki.max));
          }
        } else this.boundingBox.makeEmpty();

        (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
      },
      computeBoundingSphere: function computeBoundingSphere() {
        null === this.boundingSphere && (this.boundingSphere = new gr());
        var t = this.attributes.position,
            e = this.morphAttributes.position;
        if (t && t.isGLBufferAttribute) return console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this), void this.boundingSphere.set(new Yn(), 1 / 0);

        if (t) {
          var _n37 = this.boundingSphere.center;
          if (ki.setFromBufferAttribute(t), e) for (var _t29 = 0, _i26 = e.length; _t29 < _i26; _t29++) {
            var _n38 = e[_t29];
            Vi.setFromBufferAttribute(_n38), this.morphTargetsRelative ? (Wi.addVectors(ki.min, Vi.min), ki.expandByPoint(Wi), Wi.addVectors(ki.max, Vi.max), ki.expandByPoint(Wi)) : (ki.expandByPoint(Vi.min), ki.expandByPoint(Vi.max));
          }
          ki.getCenter(_n37);
          var _r39 = 0;

          for (var _e24 = 0, _i27 = t.count; _e24 < _i27; _e24++) {
            Wi.fromBufferAttribute(t, _e24), _r39 = Math.max(_r39, _n37.distanceToSquared(Wi));
          }

          if (e) for (var _i28 = 0, _s6 = e.length; _i28 < _s6; _i28++) {
            var _s7 = e[_i28],
                _o5 = this.morphTargetsRelative;

            for (var _e25 = 0, _i29 = _s7.count; _e25 < _i29; _e25++) {
              Wi.fromBufferAttribute(_s7, _e25), _o5 && (Ui.fromBufferAttribute(t, _e25), Wi.add(Ui)), _r39 = Math.max(_r39, _n37.distanceToSquared(Wi));
            }
          }
          this.boundingSphere.radius = Math.sqrt(_r39), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
        }
      },
      computeFaceNormals: function computeFaceNormals() {},
      computeTangents: function computeTangents() {
        var t = this.index,
            e = this.attributes;
        if (null === t || void 0 === e.position || void 0 === e.normal || void 0 === e.uv) return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
        var n = t.array,
            r = e.position.array,
            i = e.normal.array,
            s = e.uv.array,
            o = r.length / 3;
        void 0 === e.tangent && this.setAttribute("tangent", new Si(new Float32Array(4 * o), 4));
        var a = e.tangent.array,
            l = [],
            c = [];

        for (var _T = 0; _T < o; _T++) {
          l[_T] = new Yn(), c[_T] = new Yn();
        }

        var h = new Yn(),
            u = new Yn(),
            p = new Yn(),
            d = new On(),
            m = new On(),
            f = new On(),
            g = new Yn(),
            x = new Yn();

        function v(t, e, n) {
          h.fromArray(r, 3 * t), u.fromArray(r, 3 * e), p.fromArray(r, 3 * n), d.fromArray(s, 2 * t), m.fromArray(s, 2 * e), f.fromArray(s, 2 * n), u.sub(h), p.sub(h), m.sub(d), f.sub(d);
          var i = 1 / (m.x * f.y - f.x * m.y);
          isFinite(i) && (g.copy(u).multiplyScalar(f.y).addScaledVector(p, -m.y).multiplyScalar(i), x.copy(p).multiplyScalar(m.x).addScaledVector(u, -f.x).multiplyScalar(i), l[t].add(g), l[e].add(g), l[n].add(g), c[t].add(x), c[e].add(x), c[n].add(x));
        }

        var y = this.groups;
        0 === y.length && (y = [{
          start: 0,
          count: n.length
        }]);

        for (var _T2 = 0, _E = y.length; _T2 < _E; ++_T2) {
          var _t30 = y[_T2],
              _e26 = _t30.start;

          for (var _r40 = _e26, _i30 = _e26 + _t30.count; _r40 < _i30; _r40 += 3) {
            v(n[_r40 + 0], n[_r40 + 1], n[_r40 + 2]);
          }
        }

        var _ = new Yn(),
            b = new Yn(),
            w = new Yn(),
            M = new Yn();

        function S(t) {
          w.fromArray(i, 3 * t), M.copy(w);
          var e = l[t];
          _.copy(e), _.sub(w.multiplyScalar(w.dot(e))).normalize(), b.crossVectors(M, e);
          var n = b.dot(c[t]) < 0 ? -1 : 1;
          a[4 * t] = _.x, a[4 * t + 1] = _.y, a[4 * t + 2] = _.z, a[4 * t + 3] = n;
        }

        for (var _T3 = 0, _E2 = y.length; _T3 < _E2; ++_T3) {
          var _t31 = y[_T3],
              _e27 = _t31.start;

          for (var _r41 = _e27, _i31 = _e27 + _t31.count; _r41 < _i31; _r41 += 3) {
            S(n[_r41 + 0]), S(n[_r41 + 1]), S(n[_r41 + 2]);
          }
        }
      },
      computeVertexNormals: function computeVertexNormals() {
        var t = this.index,
            e = this.getAttribute("position");

        if (void 0 !== e) {
          var _n39 = this.getAttribute("normal");

          if (void 0 === _n39) _n39 = new Si(new Float32Array(3 * e.count), 3), this.setAttribute("normal", _n39);else for (var _t32 = 0, _e28 = _n39.count; _t32 < _e28; _t32++) {
            _n39.setXYZ(_t32, 0, 0, 0);
          }

          var _r42 = new Yn(),
              _i32 = new Yn(),
              _s8 = new Yn(),
              _o6 = new Yn(),
              _a6 = new Yn(),
              _l8 = new Yn(),
              _c6 = new Yn(),
              _h4 = new Yn();

          if (t) for (var _u2 = 0, _p2 = t.count; _u2 < _p2; _u2 += 3) {
            var _p3 = t.getX(_u2 + 0),
                _d2 = t.getX(_u2 + 1),
                _m2 = t.getX(_u2 + 2);

            _r42.fromBufferAttribute(e, _p3), _i32.fromBufferAttribute(e, _d2), _s8.fromBufferAttribute(e, _m2), _c6.subVectors(_s8, _i32), _h4.subVectors(_r42, _i32), _c6.cross(_h4), _o6.fromBufferAttribute(_n39, _p3), _a6.fromBufferAttribute(_n39, _d2), _l8.fromBufferAttribute(_n39, _m2), _o6.add(_c6), _a6.add(_c6), _l8.add(_c6), _n39.setXYZ(_p3, _o6.x, _o6.y, _o6.z), _n39.setXYZ(_d2, _a6.x, _a6.y, _a6.z), _n39.setXYZ(_m2, _l8.x, _l8.y, _l8.z);
          } else for (var _t33 = 0, _u3 = e.count; _t33 < _u3; _t33 += 3) {
            _r42.fromBufferAttribute(e, _t33 + 0), _i32.fromBufferAttribute(e, _t33 + 1), _s8.fromBufferAttribute(e, _t33 + 2), _c6.subVectors(_s8, _i32), _h4.subVectors(_r42, _i32), _c6.cross(_h4), _n39.setXYZ(_t33 + 0, _c6.x, _c6.y, _c6.z), _n39.setXYZ(_t33 + 1, _c6.x, _c6.y, _c6.z), _n39.setXYZ(_t33 + 2, _c6.x, _c6.y, _c6.z);
          }
          this.normalizeNormals(), _n39.needsUpdate = !0;
        }
      },
      merge: function merge(t, e) {
        if (!t || !t.isBufferGeometry) return void console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", t);
        void 0 === e && (e = 0, console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));
        var n = this.attributes;

        for (var _r43 in n) {
          if (void 0 === t.attributes[_r43]) continue;

          var _i33 = n[_r43].array,
              _s9 = t.attributes[_r43],
              _o7 = _s9.array,
              _a7 = _s9.itemSize * e,
              _l9 = Math.min(_o7.length, _i33.length - _a7);

          for (var _t34 = 0, _e29 = _a7; _t34 < _l9; _t34++, _e29++) {
            _i33[_e29] = _o7[_t34];
          }
        }

        return this;
      },
      normalizeNormals: function normalizeNormals() {
        var t = this.attributes.normal;

        for (var _e30 = 0, _n40 = t.count; _e30 < _n40; _e30++) {
          Wi.fromBufferAttribute(t, _e30), Wi.normalize(), t.setXYZ(_e30, Wi.x, Wi.y, Wi.z);
        }
      },
      toNonIndexed: function toNonIndexed() {
        function t(t, e) {
          var n = t.array,
              r = t.itemSize,
              i = t.normalized,
              s = new n.constructor(e.length * r);
          var o = 0,
              a = 0;

          for (var _l10 = 0, _c7 = e.length; _l10 < _c7; _l10++) {
            o = e[_l10] * r;

            for (var _t35 = 0; _t35 < r; _t35++) {
              s[a++] = n[o++];
            }
          }

          return new Si(s, r, i);
        }

        if (null === this.index) return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."), this;
        var e = new ji(),
            n = this.index.array,
            r = this.attributes;

        for (var _o8 in r) {
          var _i34 = t(r[_o8], n);

          e.setAttribute(_o8, _i34);
        }

        var i = this.morphAttributes;

        for (var _o9 in i) {
          var _r44 = [],
              _s10 = i[_o9];

          for (var _e31 = 0, _i35 = _s10.length; _e31 < _i35; _e31++) {
            var _i36 = t(_s10[_e31], n);

            _r44.push(_i36);
          }

          e.morphAttributes[_o9] = _r44;
        }

        e.morphTargetsRelative = this.morphTargetsRelative;
        var s = this.groups;

        for (var _o10 = 0, _a8 = s.length; _o10 < _a8; _o10++) {
          var _t36 = s[_o10];
          e.addGroup(_t36.start, _t36.count, _t36.materialIndex);
        }

        return e;
      },
      toJSON: function toJSON() {
        var t = {
          metadata: {
            version: 4.5,
            type: "BufferGeometry",
            generator: "BufferGeometry.toJSON"
          }
        };

        if (t.uuid = this.uuid, t.type = this.type, "" !== this.name && (t.name = this.name), Object.keys(this.userData).length > 0 && (t.userData = this.userData), void 0 !== this.parameters) {
          var _e32 = this.parameters;

          for (var _n41 in _e32) {
            void 0 !== _e32[_n41] && (t[_n41] = _e32[_n41]);
          }

          return t;
        }

        t.data = {
          attributes: {}
        };
        var e = this.index;
        null !== e && (t.data.index = {
          type: e.array.constructor.name,
          array: Array.prototype.slice.call(e.array)
        });
        var n = this.attributes;

        for (var _a9 in n) {
          var _e33 = n[_a9];
          t.data.attributes[_a9] = _e33.toJSON(t.data);
        }

        var r = {};
        var i = !1;

        for (var _a10 in this.morphAttributes) {
          var _e34 = this.morphAttributes[_a10],
              _n42 = [];

          for (var _r45 = 0, _i37 = _e34.length; _r45 < _i37; _r45++) {
            var _i38 = _e34[_r45];

            _n42.push(_i38.toJSON(t.data));
          }

          _n42.length > 0 && (r[_a10] = _n42, i = !0);
        }

        i && (t.data.morphAttributes = r, t.data.morphTargetsRelative = this.morphTargetsRelative);
        var s = this.groups;
        s.length > 0 && (t.data.groups = JSON.parse(JSON.stringify(s)));
        var o = this.boundingSphere;
        return null !== o && (t.data.boundingSphere = {
          center: o.center.toArray(),
          radius: o.radius
        }), t;
      },
      clone: function clone() {
        return new ji().copy(this);
      },
      copy: function copy(t) {
        this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null;
        var e = {};
        this.name = t.name;
        var n = t.index;
        null !== n && this.setIndex(n.clone(e));
        var r = t.attributes;

        for (var _l11 in r) {
          var _t37 = r[_l11];
          this.setAttribute(_l11, _t37.clone(e));
        }

        var i = t.morphAttributes;

        for (var _l12 in i) {
          var _t38 = [],
              _n43 = i[_l12];

          for (var _r46 = 0, _i39 = _n43.length; _r46 < _i39; _r46++) {
            _t38.push(_n43[_r46].clone(e));
          }

          this.morphAttributes[_l12] = _t38;
        }

        this.morphTargetsRelative = t.morphTargetsRelative;
        var s = t.groups;

        for (var _l13 = 0, _c8 = s.length; _l13 < _c8; _l13++) {
          var _t39 = s[_l13];
          this.addGroup(_t39.start, _t39.count, _t39.materialIndex);
        }

        var o = t.boundingBox;
        null !== o && (this.boundingBox = o.clone());
        var a = t.boundingSphere;
        return null !== a && (this.boundingSphere = a.clone()), this.drawRange.start = t.drawRange.start, this.drawRange.count = t.drawRange.count, this.userData = t.userData, this;
      },
      dispose: function dispose() {
        this.dispatchEvent({
          type: "dispose"
        });
      }
    });
    var qi = new Tr(),
        Xi = new Sr(),
        Yi = new gr(),
        Zi = new Yn(),
        Ji = new Yn(),
        Qi = new Yn(),
        Ki = new Yn(),
        $i = new Yn(),
        ts = new Yn(),
        es = new Yn(),
        ns = new Yn(),
        rs = new Yn(),
        is = new On(),
        ss = new On(),
        os = new On(),
        as = new Yn(),
        ls = new Yn();

    function cs() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new ji();
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new bi();
      Jr.call(this), this.type = "Mesh", this.geometry = t, this.material = e, this.updateMorphTargets();
    }

    function hs(t, e, n, r, i, s, o, a) {
      var l;
      if (null === (l = e.side === p ? r.intersectTriangle(o, s, i, !0, a) : r.intersectTriangle(i, s, o, e.side !== d, a))) return null;
      ls.copy(a), ls.applyMatrix4(t.matrixWorld);
      var c = n.ray.origin.distanceTo(ls);
      return c < n.near || c > n.far ? null : {
        distance: c,
        point: ls.clone(),
        object: t
      };
    }

    function us(t, e, n, r, i, s, o, a, l, c, h, u) {
      Zi.fromBufferAttribute(i, c), Ji.fromBufferAttribute(i, h), Qi.fromBufferAttribute(i, u);
      var p = t.morphTargetInfluences;

      if (e.morphTargets && s && p) {
        es.set(0, 0, 0), ns.set(0, 0, 0), rs.set(0, 0, 0);

        for (var _t40 = 0, _e35 = s.length; _t40 < _e35; _t40++) {
          var _e36 = p[_t40],
              _n44 = s[_t40];
          0 !== _e36 && (Ki.fromBufferAttribute(_n44, c), $i.fromBufferAttribute(_n44, h), ts.fromBufferAttribute(_n44, u), o ? (es.addScaledVector(Ki, _e36), ns.addScaledVector($i, _e36), rs.addScaledVector(ts, _e36)) : (es.addScaledVector(Ki.sub(Zi), _e36), ns.addScaledVector($i.sub(Ji), _e36), rs.addScaledVector(ts.sub(Qi), _e36)));
        }

        Zi.add(es), Ji.add(ns), Qi.add(rs);
      }

      t.isSkinnedMesh && e.skinning && (t.boneTransform(c, Zi), t.boneTransform(h, Ji), t.boneTransform(u, Qi));
      var d = hs(t, e, n, r, Zi, Ji, Qi, as);

      if (d) {
        a && (is.fromBufferAttribute(a, c), ss.fromBufferAttribute(a, h), os.fromBufferAttribute(a, u), d.uv = ui.getUV(as, Zi, Ji, Qi, is, ss, os, new On())), l && (is.fromBufferAttribute(l, c), ss.fromBufferAttribute(l, h), os.fromBufferAttribute(l, u), d.uv2 = ui.getUV(as, Zi, Ji, Qi, is, ss, os, new On()));
        var _t41 = {
          a: c,
          b: h,
          c: u,
          normal: new Yn(),
          materialIndex: 0
        };
        ui.getNormal(Zi, Ji, Qi, _t41.normal), d.face = _t41;
      }

      return d;
    }

    cs.prototype = Object.assign(Object.create(Jr.prototype), {
      constructor: cs,
      isMesh: !0,
      copy: function copy(t) {
        return Jr.prototype.copy.call(this, t), void 0 !== t.morphTargetInfluences && (this.morphTargetInfluences = t.morphTargetInfluences.slice()), void 0 !== t.morphTargetDictionary && (this.morphTargetDictionary = Object.assign({}, t.morphTargetDictionary)), this.material = t.material, this.geometry = t.geometry, this;
      },
      updateMorphTargets: function updateMorphTargets() {
        var t = this.geometry;

        if (t.isBufferGeometry) {
          var _e37 = t.morphAttributes,
              _n45 = Object.keys(_e37);

          if (_n45.length > 0) {
            var _t42 = _e37[_n45[0]];

            if (void 0 !== _t42) {
              this.morphTargetInfluences = [], this.morphTargetDictionary = {};

              for (var _e38 = 0, _n46 = _t42.length; _e38 < _n46; _e38++) {
                var _n47 = _t42[_e38].name || String(_e38);

                this.morphTargetInfluences.push(0), this.morphTargetDictionary[_n47] = _e38;
              }
            }
          }
        } else {
          var _e39 = t.morphTargets;
          void 0 !== _e39 && _e39.length > 0 && console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
        }
      },
      raycast: function raycast(t, e) {
        var n = this.geometry,
            r = this.material,
            i = this.matrixWorld;
        if (void 0 === r) return;
        if (null === n.boundingSphere && n.computeBoundingSphere(), Yi.copy(n.boundingSphere), Yi.applyMatrix4(i), !1 === t.ray.intersectsSphere(Yi)) return;
        if (qi.copy(i).invert(), Xi.copy(t.ray).applyMatrix4(qi), null !== n.boundingBox && !1 === Xi.intersectsBox(n.boundingBox)) return;
        var s;

        if (n.isBufferGeometry) {
          var _i40 = n.index,
              _o11 = n.attributes.position,
              _a11 = n.morphAttributes.position,
              _l14 = n.morphTargetsRelative,
              _c9 = n.attributes.uv,
              _h5 = n.attributes.uv2,
              _u4 = n.groups,
              _p4 = n.drawRange;
          if (null !== _i40) {
            if (Array.isArray(r)) for (var _n48 = 0, _d3 = _u4.length; _n48 < _d3; _n48++) {
              var _d4 = _u4[_n48],
                  _m3 = r[_d4.materialIndex];

              for (var _n49 = Math.max(_d4.start, _p4.start), _r47 = Math.min(_d4.start + _d4.count, _p4.start + _p4.count); _n49 < _r47; _n49 += 3) {
                var _r48 = _i40.getX(_n49),
                    _u5 = _i40.getX(_n49 + 1),
                    _p5 = _i40.getX(_n49 + 2);

                (s = us(this, _m3, t, Xi, _o11, _a11, _l14, _c9, _h5, _r48, _u5, _p5)) && (s.faceIndex = Math.floor(_n49 / 3), s.face.materialIndex = _d4.materialIndex, e.push(s));
              }
            } else {
              for (var _n50 = Math.max(0, _p4.start), _u6 = Math.min(_i40.count, _p4.start + _p4.count); _n50 < _u6; _n50 += 3) {
                var _u7 = _i40.getX(_n50),
                    _p6 = _i40.getX(_n50 + 1),
                    _d5 = _i40.getX(_n50 + 2);

                (s = us(this, r, t, Xi, _o11, _a11, _l14, _c9, _h5, _u7, _p6, _d5)) && (s.faceIndex = Math.floor(_n50 / 3), e.push(s));
              }
            }
          } else if (void 0 !== _o11) if (Array.isArray(r)) for (var _n51 = 0, _d6 = _u4.length; _n51 < _d6; _n51++) {
            var _i41 = _u4[_n51],
                _d7 = r[_i41.materialIndex];

            for (var _n52 = Math.max(_i41.start, _p4.start), _r49 = Math.min(_i41.start + _i41.count, _p4.start + _p4.count); _n52 < _r49; _n52 += 3) {
              (s = us(this, _d7, t, Xi, _o11, _a11, _l14, _c9, _h5, _n52, _n52 + 1, _n52 + 2)) && (s.faceIndex = Math.floor(_n52 / 3), s.face.materialIndex = _i41.materialIndex, e.push(s));
            }
          } else {
            for (var _n53 = Math.max(0, _p4.start), _i42 = Math.min(_o11.count, _p4.start + _p4.count); _n53 < _i42; _n53 += 3) {
              (s = us(this, r, t, Xi, _o11, _a11, _l14, _c9, _h5, _n53, _n53 + 1, _n53 + 2)) && (s.faceIndex = Math.floor(_n53 / 3), e.push(s));
            }
          }
        } else n.isGeometry && console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
      }
    });

    var ps = /*#__PURE__*/function (_ji) {
      _inherits(ps, _ji);

      var _super5 = _createSuper(ps);

      function ps() {
        var _this5;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
        var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
        var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;

        _classCallCheck(this, ps);

        _this5 = _super5.call(this), _this5.type = "BoxGeometry", _this5.parameters = {
          width: t,
          height: e,
          depth: n,
          widthSegments: r,
          heightSegments: i,
          depthSegments: s
        };

        var o = _assertThisInitialized(_this5);

        r = Math.floor(r), i = Math.floor(i), s = Math.floor(s);
        var a = [],
            l = [],
            c = [],
            h = [];
        var u = 0,
            p = 0;

        function d(t, e, n, r, i, s, d, m, f, g, x) {
          var v = s / f,
              y = d / g,
              _ = s / 2,
              b = d / 2,
              w = m / 2,
              M = f + 1,
              S = g + 1;

          var T = 0,
              E = 0;
          var A = new Yn();

          for (var _o12 = 0; _o12 < S; _o12++) {
            var _s11 = _o12 * y - b;

            for (var _a12 = 0; _a12 < M; _a12++) {
              var _u8 = _a12 * v - _;

              A[t] = _u8 * r, A[e] = _s11 * i, A[n] = w, l.push(A.x, A.y, A.z), A[t] = 0, A[e] = 0, A[n] = m > 0 ? 1 : -1, c.push(A.x, A.y, A.z), h.push(_a12 / f), h.push(1 - _o12 / g), T += 1;
            }
          }

          for (var _o13 = 0; _o13 < g; _o13++) {
            for (var _t43 = 0; _t43 < f; _t43++) {
              var _e40 = u + _t43 + M * _o13,
                  _n54 = u + _t43 + M * (_o13 + 1),
                  _r50 = u + (_t43 + 1) + M * (_o13 + 1),
                  _i43 = u + (_t43 + 1) + M * _o13;

              a.push(_e40, _n54, _i43), a.push(_n54, _r50, _i43), E += 6;
            }
          }

          o.addGroup(p, E, x), p += E, u += T;
        }

        d("z", "y", "x", -1, -1, n, e, t, s, i, 0), d("z", "y", "x", 1, -1, n, e, -t, s, i, 1), d("x", "z", "y", 1, 1, t, n, e, r, s, 2), d("x", "z", "y", 1, -1, t, n, -e, r, s, 3), d("x", "y", "z", 1, -1, t, e, n, r, i, 4), d("x", "y", "z", -1, -1, t, e, -n, r, i, 5), _this5.setIndex(a), _this5.setAttribute("position", new Ii(l, 3)), _this5.setAttribute("normal", new Ii(c, 3)), _this5.setAttribute("uv", new Ii(h, 2));
        return _this5;
      }

      return ps;
    }(ji);

    function ds(t) {
      var e = {};

      for (var _n55 in t) {
        e[_n55] = {};

        for (var _r51 in t[_n55]) {
          var _i44 = t[_n55][_r51];
          _i44 && (_i44.isColor || _i44.isMatrix3 || _i44.isMatrix4 || _i44.isVector2 || _i44.isVector3 || _i44.isVector4 || _i44.isTexture || _i44.isQuaternion) ? e[_n55][_r51] = _i44.clone() : Array.isArray(_i44) ? e[_n55][_r51] = _i44.slice() : e[_n55][_r51] = _i44;
        }
      }

      return e;
    }

    function ms(t) {
      var e = {};

      for (var _n56 = 0; _n56 < t.length; _n56++) {
        var _r52 = ds(t[_n56]);

        for (var _t44 in _r52) {
          e[_t44] = _r52[_t44];
        }
      }

      return e;
    }

    exports.BoxGeometry = exports.BoxBufferGeometry = ps;
    var fs = {
      clone: ds,
      merge: ms
    };
    exports.UniformsUtils = fs;
    var gs = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",
        xs = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";

    function vs(t) {
      di.call(this), this.type = "ShaderMaterial", this.defines = {}, this.uniforms = {}, this.vertexShader = gs, this.fragmentShader = xs, this.linewidth = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.lights = !1, this.clipping = !1, this.skinning = !1, this.morphTargets = !1, this.morphNormals = !1, this.extensions = {
        derivatives: !1,
        fragDepth: !1,
        drawBuffers: !1,
        shaderTextureLOD: !1
      }, this.defaultAttributeValues = {
        color: [1, 1, 1],
        uv: [0, 0],
        uv2: [0, 0]
      }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = !1, this.glslVersion = null, void 0 !== t && (void 0 !== t.attributes && console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."), this.setValues(t));
    }

    function ys() {
      Jr.call(this), this.type = "Camera", this.matrixWorldInverse = new Tr(), this.projectionMatrix = new Tr(), this.projectionMatrixInverse = new Tr();
    }

    function _s() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : .1;
      var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2e3;
      ys.call(this), this.type = "PerspectiveCamera", this.fov = t, this.zoom = 1, this.near = n, this.far = r, this.focus = 10, this.aspect = e, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix();
    }

    vs.prototype = Object.create(di.prototype), vs.prototype.constructor = vs, vs.prototype.isShaderMaterial = !0, vs.prototype.copy = function (t) {
      return di.prototype.copy.call(this, t), this.fragmentShader = t.fragmentShader, this.vertexShader = t.vertexShader, this.uniforms = ds(t.uniforms), this.defines = Object.assign({}, t.defines), this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.lights = t.lights, this.clipping = t.clipping, this.skinning = t.skinning, this.morphTargets = t.morphTargets, this.morphNormals = t.morphNormals, this.extensions = Object.assign({}, t.extensions), this.glslVersion = t.glslVersion, this;
    }, vs.prototype.toJSON = function (t) {
      var e = di.prototype.toJSON.call(this, t);
      e.glslVersion = this.glslVersion, e.uniforms = {};

      for (var _r53 in this.uniforms) {
        var _n57 = this.uniforms[_r53].value;
        _n57 && _n57.isTexture ? e.uniforms[_r53] = {
          type: "t",
          value: _n57.toJSON(t).uuid
        } : _n57 && _n57.isColor ? e.uniforms[_r53] = {
          type: "c",
          value: _n57.getHex()
        } : _n57 && _n57.isVector2 ? e.uniforms[_r53] = {
          type: "v2",
          value: _n57.toArray()
        } : _n57 && _n57.isVector3 ? e.uniforms[_r53] = {
          type: "v3",
          value: _n57.toArray()
        } : _n57 && _n57.isVector4 ? e.uniforms[_r53] = {
          type: "v4",
          value: _n57.toArray()
        } : _n57 && _n57.isMatrix3 ? e.uniforms[_r53] = {
          type: "m3",
          value: _n57.toArray()
        } : _n57 && _n57.isMatrix4 ? e.uniforms[_r53] = {
          type: "m4",
          value: _n57.toArray()
        } : e.uniforms[_r53] = {
          value: _n57
        };
      }

      Object.keys(this.defines).length > 0 && (e.defines = this.defines), e.vertexShader = this.vertexShader, e.fragmentShader = this.fragmentShader;
      var n = {};

      for (var _r54 in this.extensions) {
        !0 === this.extensions[_r54] && (n[_r54] = !0);
      }

      return Object.keys(n).length > 0 && (e.extensions = n), e;
    }, ys.prototype = Object.assign(Object.create(Jr.prototype), {
      constructor: ys,
      isCamera: !0,
      copy: function copy(t, e) {
        return Jr.prototype.copy.call(this, t, e), this.matrixWorldInverse.copy(t.matrixWorldInverse), this.projectionMatrix.copy(t.projectionMatrix), this.projectionMatrixInverse.copy(t.projectionMatrixInverse), this;
      },
      getWorldDirection: function getWorldDirection(t) {
        void 0 === t && (console.warn("THREE.Camera: .getWorldDirection() target is now required"), t = new Yn()), this.updateWorldMatrix(!0, !1);
        var e = this.matrixWorld.elements;
        return t.set(-e[8], -e[9], -e[10]).normalize();
      },
      updateMatrixWorld: function updateMatrixWorld(t) {
        Jr.prototype.updateMatrixWorld.call(this, t), this.matrixWorldInverse.copy(this.matrixWorld).invert();
      },
      updateWorldMatrix: function updateWorldMatrix(t, e) {
        Jr.prototype.updateWorldMatrix.call(this, t, e), this.matrixWorldInverse.copy(this.matrixWorld).invert();
      },
      clone: function clone() {
        return new this.constructor().copy(this);
      }
    }), _s.prototype = Object.assign(Object.create(ys.prototype), {
      constructor: _s,
      isPerspectiveCamera: !0,
      copy: function copy(t, e) {
        return ys.prototype.copy.call(this, t, e), this.fov = t.fov, this.zoom = t.zoom, this.near = t.near, this.far = t.far, this.focus = t.focus, this.aspect = t.aspect, this.view = null === t.view ? null : Object.assign({}, t.view), this.filmGauge = t.filmGauge, this.filmOffset = t.filmOffset, this;
      },
      setFocalLength: function setFocalLength(t) {
        var e = .5 * this.getFilmHeight() / t;
        this.fov = 2 * Fn.RAD2DEG * Math.atan(e), this.updateProjectionMatrix();
      },
      getFocalLength: function getFocalLength() {
        var t = Math.tan(.5 * Fn.DEG2RAD * this.fov);
        return .5 * this.getFilmHeight() / t;
      },
      getEffectiveFOV: function getEffectiveFOV() {
        return 2 * Fn.RAD2DEG * Math.atan(Math.tan(.5 * Fn.DEG2RAD * this.fov) / this.zoom);
      },
      getFilmWidth: function getFilmWidth() {
        return this.filmGauge * Math.min(this.aspect, 1);
      },
      getFilmHeight: function getFilmHeight() {
        return this.filmGauge / Math.max(this.aspect, 1);
      },
      setViewOffset: function setViewOffset(t, e, n, r, i, s) {
        this.aspect = t / e, null === this.view && (this.view = {
          enabled: !0,
          fullWidth: 1,
          fullHeight: 1,
          offsetX: 0,
          offsetY: 0,
          width: 1,
          height: 1
        }), this.view.enabled = !0, this.view.fullWidth = t, this.view.fullHeight = e, this.view.offsetX = n, this.view.offsetY = r, this.view.width = i, this.view.height = s, this.updateProjectionMatrix();
      },
      clearViewOffset: function clearViewOffset() {
        null !== this.view && (this.view.enabled = !1), this.updateProjectionMatrix();
      },
      updateProjectionMatrix: function updateProjectionMatrix() {
        var t = this.near;
        var e = t * Math.tan(.5 * Fn.DEG2RAD * this.fov) / this.zoom,
            n = 2 * e,
            r = this.aspect * n,
            i = -.5 * r;
        var s = this.view;

        if (null !== this.view && this.view.enabled) {
          var _t45 = s.fullWidth,
              _o14 = s.fullHeight;
          i += s.offsetX * r / _t45, e -= s.offsetY * n / _o14, r *= s.width / _t45, n *= s.height / _o14;
        }

        var o = this.filmOffset;
        0 !== o && (i += t * o / this.getFilmWidth()), this.projectionMatrix.makePerspective(i, i + r, e, e - n, t, this.far), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
      },
      toJSON: function toJSON(t) {
        var e = Jr.prototype.toJSON.call(this, t);
        return e.object.fov = this.fov, e.object.zoom = this.zoom, e.object.near = this.near, e.object.far = this.far, e.object.focus = this.focus, e.object.aspect = this.aspect, null !== this.view && (e.object.view = Object.assign({}, this.view)), e.object.filmGauge = this.filmGauge, e.object.filmOffset = this.filmOffset, e;
      }
    });
    var bs = 90,
        ws = 1;

    var Ms = /*#__PURE__*/function (_Jr) {
      _inherits(Ms, _Jr);

      var _super6 = _createSuper(Ms);

      function Ms(t, e, n) {
        var _this6;

        _classCallCheck(this, Ms);

        if (_this6 = _super6.call(this), _this6.type = "CubeCamera", !0 !== n.isWebGLCubeRenderTarget) return _possibleConstructorReturn(_this6, void console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter."));
        _this6.renderTarget = n;
        var r = new _s(bs, ws, t, e);
        r.layers = _this6.layers, r.up.set(0, -1, 0), r.lookAt(new Yn(1, 0, 0)), _this6.add(r);
        var i = new _s(bs, ws, t, e);
        i.layers = _this6.layers, i.up.set(0, -1, 0), i.lookAt(new Yn(-1, 0, 0)), _this6.add(i);
        var s = new _s(bs, ws, t, e);
        s.layers = _this6.layers, s.up.set(0, 0, 1), s.lookAt(new Yn(0, 1, 0)), _this6.add(s);
        var o = new _s(bs, ws, t, e);
        o.layers = _this6.layers, o.up.set(0, 0, -1), o.lookAt(new Yn(0, -1, 0)), _this6.add(o);
        var a = new _s(bs, ws, t, e);
        a.layers = _this6.layers, a.up.set(0, -1, 0), a.lookAt(new Yn(0, 0, 1)), _this6.add(a);
        var l = new _s(bs, ws, t, e);
        l.layers = _this6.layers, l.up.set(0, -1, 0), l.lookAt(new Yn(0, 0, -1)), _this6.add(l);
        return _possibleConstructorReturn(_this6);
      }

      _createClass(Ms, [{
        key: "update",
        value: function update(t, e) {
          null === this.parent && this.updateMatrixWorld();

          var n = this.renderTarget,
              _this$children = _slicedToArray(this.children, 6),
              r = _this$children[0],
              i = _this$children[1],
              s = _this$children[2],
              o = _this$children[3],
              a = _this$children[4],
              l = _this$children[5],
              c = t.xr.enabled,
              h = t.getRenderTarget();

          t.xr.enabled = !1;
          var u = n.texture.generateMipmaps;
          n.texture.generateMipmaps = !1, t.setRenderTarget(n, 0), t.render(e, r), t.setRenderTarget(n, 1), t.render(e, i), t.setRenderTarget(n, 2), t.render(e, s), t.setRenderTarget(n, 3), t.render(e, o), t.setRenderTarget(n, 4), t.render(e, a), n.texture.generateMipmaps = u, t.setRenderTarget(n, 5), t.render(e, l), t.setRenderTarget(h), t.xr.enabled = c;
        }
      }]);

      return Ms;
    }(Jr);

    exports.CubeCamera = Ms;

    var Ss = /*#__PURE__*/function (_kn) {
      _inherits(Ss, _kn);

      var _super7 = _createSuper(Ss);

      function Ss(t, e, n, r, i, s, o, a, l, c) {
        var _this7;

        _classCallCheck(this, Ss);

        _this7 = _super7.call(this, t = void 0 !== t ? t : [], e = void 0 !== e ? e : nt, n, r, i, s, o = void 0 !== o ? o : Bt, a, l, c), _this7._needsFlipEnvMap = !0, _this7.flipY = !1;
        return _this7;
      }

      _createClass(Ss, [{
        key: "images",
        get: function get() {
          return this.image;
        },
        set: function set(t) {
          this.image = t;
        }
      }]);

      return Ss;
    }(kn);

    exports.CubeTexture = Ss, Ss.prototype.isCubeTexture = !0;

    var Ts = /*#__PURE__*/function (_jn2) {
      _inherits(Ts, _jn2);

      var _super8 = _createSuper(Ts);

      function Ts(t, e, n) {
        var _this8;

        _classCallCheck(this, Ts);

        Number.isInteger(e) && (console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"), e = n), _this8 = _super8.call(this, t, t, e), e = e || {}, _this8.texture = new Ss(void 0, e.mapping, e.wrapS, e.wrapT, e.magFilter, e.minFilter, e.format, e.type, e.anisotropy, e.encoding), _this8.texture.generateMipmaps = void 0 !== e.generateMipmaps && e.generateMipmaps, _this8.texture.minFilter = void 0 !== e.minFilter ? e.minFilter : gt, _this8.texture._needsFlipEnvMap = !1;
        return _this8;
      }

      _createClass(Ts, [{
        key: "fromEquirectangularTexture",
        value: function fromEquirectangularTexture(t, e) {
          this.texture.type = e.type, this.texture.format = Nt, this.texture.encoding = e.encoding, this.texture.generateMipmaps = e.generateMipmaps, this.texture.minFilter = e.minFilter, this.texture.magFilter = e.magFilter;
          var n = {
            uniforms: {
              tEquirect: {
                value: null
              }
            },
            vertexShader: "\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",
            fragmentShader: "\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t"
          },
              r = new ps(5, 5, 5),
              i = new vs({
            name: "CubemapFromEquirect",
            uniforms: ds(n.uniforms),
            vertexShader: n.vertexShader,
            fragmentShader: n.fragmentShader,
            side: p,
            blending: g
          });
          i.uniforms.tEquirect.value = e;
          var s = new cs(r, i),
              o = e.minFilter;
          return e.minFilter === yt && (e.minFilter = gt), new Ms(1, 10, this).update(t, s), e.minFilter = o, s.geometry.dispose(), s.material.dispose(), this;
        }
      }, {
        key: "clear",
        value: function clear(t, e, n, r) {
          var i = t.getRenderTarget();

          for (var _s12 = 0; _s12 < 6; _s12++) {
            t.setRenderTarget(this, _s12), t.clear(e, n, r);
          }

          t.setRenderTarget(i);
        }
      }]);

      return Ts;
    }(jn);

    exports.WebGLCubeRenderTarget = Ts, Ts.prototype.isWebGLCubeRenderTarget = !0;

    var Es = /*#__PURE__*/function (_kn2) {
      _inherits(Es, _kn2);

      var _super9 = _createSuper(Es);

      function Es(t, e, n, r, i, s, o, a, l, c, h, u) {
        var _this9;

        _classCallCheck(this, Es);

        _this9 = _super9.call(this, null, s, o, a, l, c, r, i, h, u), _this9.image = {
          data: t || null,
          width: e || 1,
          height: n || 1
        }, _this9.magFilter = void 0 !== l ? l : ut, _this9.minFilter = void 0 !== c ? c : ut, _this9.generateMipmaps = !1, _this9.flipY = !1, _this9.unpackAlignment = 1, _this9.needsUpdate = !0;
        return _this9;
      }

      return Es;
    }(kn);

    exports.DataTexture = Es, Es.prototype.isDataTexture = !0;
    var As = new gr(),
        Ls = new Yn();

    var Rs = /*#__PURE__*/function () {
      function Rs() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new ti();
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ti();
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new ti();
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new ti();
        var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new ti();
        var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new ti();

        _classCallCheck(this, Rs);

        this.planes = [t, e, n, r, i, s];
      }

      _createClass(Rs, [{
        key: "set",
        value: function set(t, e, n, r, i, s) {
          var o = this.planes;
          return o[0].copy(t), o[1].copy(e), o[2].copy(n), o[3].copy(r), o[4].copy(i), o[5].copy(s), this;
        }
      }, {
        key: "copy",
        value: function copy(t) {
          var e = this.planes;

          for (var _n58 = 0; _n58 < 6; _n58++) {
            e[_n58].copy(t.planes[_n58]);
          }

          return this;
        }
      }, {
        key: "setFromProjectionMatrix",
        value: function setFromProjectionMatrix(t) {
          var e = this.planes,
              n = t.elements,
              r = n[0],
              i = n[1],
              s = n[2],
              o = n[3],
              a = n[4],
              l = n[5],
              c = n[6],
              h = n[7],
              u = n[8],
              p = n[9],
              d = n[10],
              m = n[11],
              f = n[12],
              g = n[13],
              x = n[14],
              v = n[15];
          return e[0].setComponents(o - r, h - a, m - u, v - f).normalize(), e[1].setComponents(o + r, h + a, m + u, v + f).normalize(), e[2].setComponents(o + i, h + l, m + p, v + g).normalize(), e[3].setComponents(o - i, h - l, m - p, v - g).normalize(), e[4].setComponents(o - s, h - c, m - d, v - x).normalize(), e[5].setComponents(o + s, h + c, m + d, v + x).normalize(), this;
        }
      }, {
        key: "intersectsObject",
        value: function intersectsObject(t) {
          var e = t.geometry;
          return null === e.boundingSphere && e.computeBoundingSphere(), As.copy(e.boundingSphere).applyMatrix4(t.matrixWorld), this.intersectsSphere(As);
        }
      }, {
        key: "intersectsSprite",
        value: function intersectsSprite(t) {
          return As.center.set(0, 0, 0), As.radius = .7071067811865476, As.applyMatrix4(t.matrixWorld), this.intersectsSphere(As);
        }
      }, {
        key: "intersectsSphere",
        value: function intersectsSphere(t) {
          var e = this.planes,
              n = t.center,
              r = -t.radius;

          for (var _i45 = 0; _i45 < 6; _i45++) {
            if (e[_i45].distanceToPoint(n) < r) return !1;
          }

          return !0;
        }
      }, {
        key: "intersectsBox",
        value: function intersectsBox(t) {
          var e = this.planes;

          for (var _n59 = 0; _n59 < 6; _n59++) {
            var _r55 = e[_n59];
            if (Ls.x = _r55.normal.x > 0 ? t.max.x : t.min.x, Ls.y = _r55.normal.y > 0 ? t.max.y : t.min.y, Ls.z = _r55.normal.z > 0 ? t.max.z : t.min.z, _r55.distanceToPoint(Ls) < 0) return !1;
          }

          return !0;
        }
      }, {
        key: "containsPoint",
        value: function containsPoint(t) {
          var e = this.planes;

          for (var _n60 = 0; _n60 < 6; _n60++) {
            if (e[_n60].distanceToPoint(t) < 0) return !1;
          }

          return !0;
        }
      }, {
        key: "clone",
        value: function clone() {
          return new this.constructor().copy(this);
        }
      }]);

      return Rs;
    }();

    function Cs() {
      var t = null,
          e = !1,
          n = null,
          r = null;

      function i(e, s) {
        n(e, s), r = t.requestAnimationFrame(i);
      }

      return {
        start: function start() {
          !0 !== e && null !== n && (r = t.requestAnimationFrame(i), e = !0);
        },
        stop: function stop() {
          t.cancelAnimationFrame(r), e = !1;
        },
        setAnimationLoop: function setAnimationLoop(t) {
          n = t;
        },
        setContext: function setContext(e) {
          t = e;
        }
      };
    }

    function Ps(t, e) {
      var n = e.isWebGL2,
          r = new WeakMap();
      return {
        get: function get(t) {
          return t.isInterleavedBufferAttribute && (t = t.data), r.get(t);
        },
        remove: function remove(e) {
          e.isInterleavedBufferAttribute && (e = e.data);
          var n = r.get(e);
          n && (t.deleteBuffer(n.buffer), r.delete(e));
        },
        update: function update(e, i) {
          if (e.isGLBufferAttribute) {
            var _t46 = r.get(e);

            return void ((!_t46 || _t46.version < e.version) && r.set(e, {
              buffer: e.buffer,
              type: e.type,
              bytesPerElement: e.elementSize,
              version: e.version
            }));
          }

          e.isInterleavedBufferAttribute && (e = e.data);
          var s = r.get(e);
          void 0 === s ? r.set(e, function (e, r) {
            var i = e.array,
                s = e.usage,
                o = t.createBuffer();
            t.bindBuffer(r, o), t.bufferData(r, i, s), e.onUploadCallback();
            var a = 5126;
            return i instanceof Float32Array ? a = 5126 : i instanceof Float64Array ? console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.") : i instanceof Uint16Array ? e.isFloat16BufferAttribute ? n ? a = 5131 : console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.") : a = 5123 : i instanceof Int16Array ? a = 5122 : i instanceof Uint32Array ? a = 5125 : i instanceof Int32Array ? a = 5124 : i instanceof Int8Array ? a = 5120 : i instanceof Uint8Array && (a = 5121), {
              buffer: o,
              type: a,
              bytesPerElement: i.BYTES_PER_ELEMENT,
              version: e.version
            };
          }(e, i)) : s.version < e.version && (function (e, r, i) {
            var s = r.array,
                o = r.updateRange;
            t.bindBuffer(i, e), -1 === o.count ? t.bufferSubData(i, 0, s) : (n ? t.bufferSubData(i, o.offset * s.BYTES_PER_ELEMENT, s, o.offset, o.count) : t.bufferSubData(i, o.offset * s.BYTES_PER_ELEMENT, s.subarray(o.offset, o.offset + o.count)), o.count = -1);
          }(s.buffer, e, i), s.version = e.version);
        }
      };
    }

    exports.Frustum = Rs;

    var Ds = /*#__PURE__*/function (_ji2) {
      _inherits(Ds, _ji2);

      var _super10 = _createSuper(Ds);

      function Ds() {
        var _this10;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

        _classCallCheck(this, Ds);

        _this10 = _super10.call(this), _this10.type = "PlaneGeometry", _this10.parameters = {
          width: t,
          height: e,
          widthSegments: n,
          heightSegments: r
        };
        var i = t / 2,
            s = e / 2,
            o = Math.floor(n),
            a = Math.floor(r),
            l = o + 1,
            c = a + 1,
            h = t / o,
            u = e / a,
            p = [],
            d = [],
            m = [],
            f = [];

        for (var _g3 = 0; _g3 < c; _g3++) {
          var _t47 = _g3 * u - s;

          for (var _e41 = 0; _e41 < l; _e41++) {
            var _n61 = _e41 * h - i;

            d.push(_n61, -_t47, 0), m.push(0, 0, 1), f.push(_e41 / o), f.push(1 - _g3 / a);
          }
        }

        for (var _g4 = 0; _g4 < a; _g4++) {
          for (var _t48 = 0; _t48 < o; _t48++) {
            var _e42 = _t48 + l * _g4,
                _n62 = _t48 + l * (_g4 + 1),
                _r56 = _t48 + 1 + l * (_g4 + 1),
                _i46 = _t48 + 1 + l * _g4;

            p.push(_e42, _n62, _i46), p.push(_n62, _r56, _i46);
          }
        }

        _this10.setIndex(p), _this10.setAttribute("position", new Ii(d, 3)), _this10.setAttribute("normal", new Ii(m, 3)), _this10.setAttribute("uv", new Ii(f, 2));
        return _this10;
      }

      return Ds;
    }(ji);

    exports.PlaneGeometry = exports.PlaneBufferGeometry = Ds;
    var Is = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",
        Bs = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",
        Ns = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif",
        Fs = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif",
        Os = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",
        zs = "vec3 transformed = vec3( position );",
        Gs = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",
        Hs = "vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif",
        Us = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",
        ks = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",
        Vs = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",
        Ws = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",
        js = "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",
        qs = "#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",
        Xs = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",
        Ys = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",
        Zs = "#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",
        Js = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}",
        Qs = "#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_maxMipLevel 8.0\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_maxTileSize 256.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\n\t\tvec2 f = fract( uv );\n\t\tuv += 0.5 - f;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tif ( mipInt < cubeUV_maxMipLevel ) {\n\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\t\t}\n\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\t\tuv *= texelSize;\n\t\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x += texelSize;\n\t\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.y += texelSize;\n\t\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x -= texelSize;\n\t\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tvec3 tm = mix( tl, tr, f.x );\n\t\tvec3 bm = mix( bl, br, f.x );\n\t\treturn mix( tm, bm, f.y );\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",
        Ks = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",
        $s = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",
        to = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",
        eo = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",
        no = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",
        ro = "gl_FragColor = linearToOutputTexel( gl_FragColor );",
        io = "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value ) {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}",
        so = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",
        oo = "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",
        ao = "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",
        lo = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",
        co = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",
        ho = "#ifdef USE_FOG\n\tfogDepth = - mvPosition.z;\n#endif",
        uo = "#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif",
        po = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",
        mo = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",
        fo = "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}",
        go = "#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif",
        xo = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",
        vo = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif",
        yo = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif",
        _o = "#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif",
        bo = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",
        wo = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)",
        Mo = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",
        So = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",
        To = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif",
        Eo = "struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat specularRoughness;\n\tvec3 specularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",
        Ao = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",
        Lo = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif",
        Ro = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",
        Co = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",
        Po = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",
        Do = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",
        Io = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",
        Bo = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif",
        No = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",
        Fo = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",
        Oo = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",
        zo = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",
        Go = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",
        Ho = "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif",
        Uo = "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifndef USE_MORPHNORMALS\n\t\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\t\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",
        ko = "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t#endif\n#endif",
        Vo = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",
        Wo = "#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",
        jo = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif",
        qo = "#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",
        Xo = "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif",
        Yo = "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",
        Zo = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",
        Jo = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",
        Qo = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",
        Ko = "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",
        $o = "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",
        ta = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",
        ea = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",
        na = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",
        ra = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",
        ia = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif",
        sa = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",
        oa = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",
        aa = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",
        la = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",
        ca = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",
        ha = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",
        ua = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",
        pa = "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",
        da = "#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",
        ma = "#ifdef USE_TRANSMISSIONMAP\n\ttotalTransmission *= texture2D( transmissionMap, vUv ).r;\n#endif",
        fa = "#ifdef USE_TRANSMISSIONMAP\n\tuniform sampler2D transmissionMap;\n#endif",
        ga = "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",
        xa = "#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",
        va = "#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",
        ya = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",
        _a = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif",
        ba = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",
        wa = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",
        Ma = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
        Sa = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",
        Ta = "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
        Ea = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",
        Aa = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",
        La = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",
        Ra = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",
        Ca = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",
        Pa = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
        Da = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",
        Ia = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",
        Ba = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",
        Na = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
        Fa = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",
        Oa = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
        za = "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
        Ga = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
        Ha = "#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",
        Ua = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
        ka = "#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
        Va = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
        Wa = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
        ja = "#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSMISSION\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSMISSION\n\tuniform float transmission;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <transmissionmap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#ifdef TRANSMISSION\n\t\tfloat totalTransmission = transmission;\n\t#endif\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <transmissionmap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSMISSION\n\t\tdiffuseColor.a *= mix( saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) ), 1.0, metalness );\n\t#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
        qa = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
        Xa = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",
        Ya = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",
        Za = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",
        Ja = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",
        Qa = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
        Ka = "#include <common>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
        $a = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
        tl = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";
    var el = {
      alphamap_fragment: Is,
      alphamap_pars_fragment: Bs,
      alphatest_fragment: Ns,
      aomap_fragment: Fs,
      aomap_pars_fragment: Os,
      begin_vertex: zs,
      beginnormal_vertex: Gs,
      bsdfs: Hs,
      bumpmap_pars_fragment: Us,
      clipping_planes_fragment: ks,
      clipping_planes_pars_fragment: Vs,
      clipping_planes_pars_vertex: Ws,
      clipping_planes_vertex: js,
      color_fragment: qs,
      color_pars_fragment: Xs,
      color_pars_vertex: Ys,
      color_vertex: Zs,
      common: Js,
      cube_uv_reflection_fragment: Qs,
      defaultnormal_vertex: Ks,
      displacementmap_pars_vertex: $s,
      displacementmap_vertex: to,
      emissivemap_fragment: eo,
      emissivemap_pars_fragment: no,
      encodings_fragment: ro,
      encodings_pars_fragment: io,
      envmap_fragment: so,
      envmap_common_pars_fragment: oo,
      envmap_pars_fragment: ao,
      envmap_pars_vertex: lo,
      envmap_physical_pars_fragment: _o,
      envmap_vertex: co,
      fog_vertex: ho,
      fog_pars_vertex: uo,
      fog_fragment: po,
      fog_pars_fragment: mo,
      gradientmap_pars_fragment: fo,
      lightmap_fragment: go,
      lightmap_pars_fragment: xo,
      lights_lambert_vertex: vo,
      lights_pars_begin: yo,
      lights_toon_fragment: bo,
      lights_toon_pars_fragment: wo,
      lights_phong_fragment: Mo,
      lights_phong_pars_fragment: So,
      lights_physical_fragment: To,
      lights_physical_pars_fragment: Eo,
      lights_fragment_begin: Ao,
      lights_fragment_maps: Lo,
      lights_fragment_end: Ro,
      logdepthbuf_fragment: Co,
      logdepthbuf_pars_fragment: Po,
      logdepthbuf_pars_vertex: Do,
      logdepthbuf_vertex: Io,
      map_fragment: Bo,
      map_pars_fragment: No,
      map_particle_fragment: Fo,
      map_particle_pars_fragment: Oo,
      metalnessmap_fragment: zo,
      metalnessmap_pars_fragment: Go,
      morphnormal_vertex: Ho,
      morphtarget_pars_vertex: Uo,
      morphtarget_vertex: ko,
      normal_fragment_begin: Vo,
      normal_fragment_maps: Wo,
      normalmap_pars_fragment: jo,
      clearcoat_normal_fragment_begin: qo,
      clearcoat_normal_fragment_maps: Xo,
      clearcoat_pars_fragment: Yo,
      packing: Zo,
      premultiplied_alpha_fragment: Jo,
      project_vertex: Qo,
      dithering_fragment: Ko,
      dithering_pars_fragment: $o,
      roughnessmap_fragment: ta,
      roughnessmap_pars_fragment: ea,
      shadowmap_pars_fragment: na,
      shadowmap_pars_vertex: ra,
      shadowmap_vertex: ia,
      shadowmask_pars_fragment: sa,
      skinbase_vertex: oa,
      skinning_pars_vertex: aa,
      skinning_vertex: la,
      skinnormal_vertex: ca,
      specularmap_fragment: ha,
      specularmap_pars_fragment: ua,
      tonemapping_fragment: pa,
      tonemapping_pars_fragment: da,
      transmissionmap_fragment: ma,
      transmissionmap_pars_fragment: fa,
      uv_pars_fragment: ga,
      uv_pars_vertex: xa,
      uv_vertex: va,
      uv2_pars_fragment: ya,
      uv2_pars_vertex: _a,
      uv2_vertex: ba,
      worldpos_vertex: wa,
      background_frag: Ma,
      background_vert: Sa,
      cube_frag: Ta,
      cube_vert: Ea,
      depth_frag: Aa,
      depth_vert: La,
      distanceRGBA_frag: Ra,
      distanceRGBA_vert: Ca,
      equirect_frag: Pa,
      equirect_vert: Da,
      linedashed_frag: Ia,
      linedashed_vert: Ba,
      meshbasic_frag: Na,
      meshbasic_vert: Fa,
      meshlambert_frag: Oa,
      meshlambert_vert: za,
      meshmatcap_frag: Ga,
      meshmatcap_vert: Ha,
      meshtoon_frag: Ua,
      meshtoon_vert: ka,
      meshphong_frag: Va,
      meshphong_vert: Wa,
      meshphysical_frag: ja,
      meshphysical_vert: qa,
      normal_frag: Xa,
      normal_vert: Ya,
      points_frag: Za,
      points_vert: Ja,
      shadow_frag: Qa,
      shadow_vert: Ka,
      sprite_frag: $a,
      sprite_vert: tl
    };
    exports.ShaderChunk = el;
    var nl = {
      common: {
        diffuse: {
          value: new _i(15658734)
        },
        opacity: {
          value: 1
        },
        map: {
          value: null
        },
        uvTransform: {
          value: new zn()
        },
        uv2Transform: {
          value: new zn()
        },
        alphaMap: {
          value: null
        }
      },
      specularmap: {
        specularMap: {
          value: null
        }
      },
      envmap: {
        envMap: {
          value: null
        },
        flipEnvMap: {
          value: -1
        },
        reflectivity: {
          value: 1
        },
        refractionRatio: {
          value: .98
        },
        maxMipLevel: {
          value: 0
        }
      },
      aomap: {
        aoMap: {
          value: null
        },
        aoMapIntensity: {
          value: 1
        }
      },
      lightmap: {
        lightMap: {
          value: null
        },
        lightMapIntensity: {
          value: 1
        }
      },
      emissivemap: {
        emissiveMap: {
          value: null
        }
      },
      bumpmap: {
        bumpMap: {
          value: null
        },
        bumpScale: {
          value: 1
        }
      },
      normalmap: {
        normalMap: {
          value: null
        },
        normalScale: {
          value: new On(1, 1)
        }
      },
      displacementmap: {
        displacementMap: {
          value: null
        },
        displacementScale: {
          value: 1
        },
        displacementBias: {
          value: 0
        }
      },
      roughnessmap: {
        roughnessMap: {
          value: null
        }
      },
      metalnessmap: {
        metalnessMap: {
          value: null
        }
      },
      gradientmap: {
        gradientMap: {
          value: null
        }
      },
      fog: {
        fogDensity: {
          value: 25e-5
        },
        fogNear: {
          value: 1
        },
        fogFar: {
          value: 2e3
        },
        fogColor: {
          value: new _i(16777215)
        }
      },
      lights: {
        ambientLightColor: {
          value: []
        },
        lightProbe: {
          value: []
        },
        directionalLights: {
          value: [],
          properties: {
            direction: {},
            color: {}
          }
        },
        directionalLightShadows: {
          value: [],
          properties: {
            shadowBias: {},
            shadowNormalBias: {},
            shadowRadius: {},
            shadowMapSize: {}
          }
        },
        directionalShadowMap: {
          value: []
        },
        directionalShadowMatrix: {
          value: []
        },
        spotLights: {
          value: [],
          properties: {
            color: {},
            position: {},
            direction: {},
            distance: {},
            coneCos: {},
            penumbraCos: {},
            decay: {}
          }
        },
        spotLightShadows: {
          value: [],
          properties: {
            shadowBias: {},
            shadowNormalBias: {},
            shadowRadius: {},
            shadowMapSize: {}
          }
        },
        spotShadowMap: {
          value: []
        },
        spotShadowMatrix: {
          value: []
        },
        pointLights: {
          value: [],
          properties: {
            color: {},
            position: {},
            decay: {},
            distance: {}
          }
        },
        pointLightShadows: {
          value: [],
          properties: {
            shadowBias: {},
            shadowNormalBias: {},
            shadowRadius: {},
            shadowMapSize: {},
            shadowCameraNear: {},
            shadowCameraFar: {}
          }
        },
        pointShadowMap: {
          value: []
        },
        pointShadowMatrix: {
          value: []
        },
        hemisphereLights: {
          value: [],
          properties: {
            direction: {},
            skyColor: {},
            groundColor: {}
          }
        },
        rectAreaLights: {
          value: [],
          properties: {
            color: {},
            position: {},
            width: {},
            height: {}
          }
        },
        ltc_1: {
          value: null
        },
        ltc_2: {
          value: null
        }
      },
      points: {
        diffuse: {
          value: new _i(15658734)
        },
        opacity: {
          value: 1
        },
        size: {
          value: 1
        },
        scale: {
          value: 1
        },
        map: {
          value: null
        },
        alphaMap: {
          value: null
        },
        uvTransform: {
          value: new zn()
        }
      },
      sprite: {
        diffuse: {
          value: new _i(15658734)
        },
        opacity: {
          value: 1
        },
        center: {
          value: new On(.5, .5)
        },
        rotation: {
          value: 0
        },
        map: {
          value: null
        },
        alphaMap: {
          value: null
        },
        uvTransform: {
          value: new zn()
        }
      }
    };
    exports.UniformsLib = nl;
    var rl = {
      basic: {
        uniforms: ms([nl.common, nl.specularmap, nl.envmap, nl.aomap, nl.lightmap, nl.fog]),
        vertexShader: el.meshbasic_vert,
        fragmentShader: el.meshbasic_frag
      },
      lambert: {
        uniforms: ms([nl.common, nl.specularmap, nl.envmap, nl.aomap, nl.lightmap, nl.emissivemap, nl.fog, nl.lights, {
          emissive: {
            value: new _i(0)
          }
        }]),
        vertexShader: el.meshlambert_vert,
        fragmentShader: el.meshlambert_frag
      },
      phong: {
        uniforms: ms([nl.common, nl.specularmap, nl.envmap, nl.aomap, nl.lightmap, nl.emissivemap, nl.bumpmap, nl.normalmap, nl.displacementmap, nl.fog, nl.lights, {
          emissive: {
            value: new _i(0)
          },
          specular: {
            value: new _i(1118481)
          },
          shininess: {
            value: 30
          }
        }]),
        vertexShader: el.meshphong_vert,
        fragmentShader: el.meshphong_frag
      },
      standard: {
        uniforms: ms([nl.common, nl.envmap, nl.aomap, nl.lightmap, nl.emissivemap, nl.bumpmap, nl.normalmap, nl.displacementmap, nl.roughnessmap, nl.metalnessmap, nl.fog, nl.lights, {
          emissive: {
            value: new _i(0)
          },
          roughness: {
            value: 1
          },
          metalness: {
            value: 0
          },
          envMapIntensity: {
            value: 1
          }
        }]),
        vertexShader: el.meshphysical_vert,
        fragmentShader: el.meshphysical_frag
      },
      toon: {
        uniforms: ms([nl.common, nl.aomap, nl.lightmap, nl.emissivemap, nl.bumpmap, nl.normalmap, nl.displacementmap, nl.gradientmap, nl.fog, nl.lights, {
          emissive: {
            value: new _i(0)
          }
        }]),
        vertexShader: el.meshtoon_vert,
        fragmentShader: el.meshtoon_frag
      },
      matcap: {
        uniforms: ms([nl.common, nl.bumpmap, nl.normalmap, nl.displacementmap, nl.fog, {
          matcap: {
            value: null
          }
        }]),
        vertexShader: el.meshmatcap_vert,
        fragmentShader: el.meshmatcap_frag
      },
      points: {
        uniforms: ms([nl.points, nl.fog]),
        vertexShader: el.points_vert,
        fragmentShader: el.points_frag
      },
      dashed: {
        uniforms: ms([nl.common, nl.fog, {
          scale: {
            value: 1
          },
          dashSize: {
            value: 1
          },
          totalSize: {
            value: 2
          }
        }]),
        vertexShader: el.linedashed_vert,
        fragmentShader: el.linedashed_frag
      },
      depth: {
        uniforms: ms([nl.common, nl.displacementmap]),
        vertexShader: el.depth_vert,
        fragmentShader: el.depth_frag
      },
      normal: {
        uniforms: ms([nl.common, nl.bumpmap, nl.normalmap, nl.displacementmap, {
          opacity: {
            value: 1
          }
        }]),
        vertexShader: el.normal_vert,
        fragmentShader: el.normal_frag
      },
      sprite: {
        uniforms: ms([nl.sprite, nl.fog]),
        vertexShader: el.sprite_vert,
        fragmentShader: el.sprite_frag
      },
      background: {
        uniforms: {
          uvTransform: {
            value: new zn()
          },
          t2D: {
            value: null
          }
        },
        vertexShader: el.background_vert,
        fragmentShader: el.background_frag
      },
      cube: {
        uniforms: ms([nl.envmap, {
          opacity: {
            value: 1
          }
        }]),
        vertexShader: el.cube_vert,
        fragmentShader: el.cube_frag
      },
      equirect: {
        uniforms: {
          tEquirect: {
            value: null
          }
        },
        vertexShader: el.equirect_vert,
        fragmentShader: el.equirect_frag
      },
      distanceRGBA: {
        uniforms: ms([nl.common, nl.displacementmap, {
          referencePosition: {
            value: new Yn()
          },
          nearDistance: {
            value: 1
          },
          farDistance: {
            value: 1e3
          }
        }]),
        vertexShader: el.distanceRGBA_vert,
        fragmentShader: el.distanceRGBA_frag
      },
      shadow: {
        uniforms: ms([nl.lights, nl.fog, {
          color: {
            value: new _i(0)
          },
          opacity: {
            value: 1
          }
        }]),
        vertexShader: el.shadow_vert,
        fragmentShader: el.shadow_frag
      }
    };

    function il(t, e, n, r, i) {
      var s = new _i(0);
      var o,
          a,
          l = 0,
          c = null,
          h = 0,
          d = null;

      function m(t, e) {
        n.buffers.color.setClear(t.r, t.g, t.b, e, i);
      }

      return {
        getClearColor: function getClearColor() {
          return s;
        },
        setClearColor: function setClearColor(t) {
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
          s.set(t), m(s, l = e);
        },
        getClearAlpha: function getClearAlpha() {
          return l;
        },
        setClearAlpha: function setClearAlpha(t) {
          m(s, l = t);
        },
        render: function render(n, i, f, g) {
          var x = !0 === i.isScene ? i.background : null;
          x && x.isTexture && (x = e.get(x));
          var v = t.xr,
              y = v.getSession && v.getSession();
          y && "additive" === y.environmentBlendMode && (x = null), null === x ? m(s, l) : x && x.isColor && (m(x, 1), g = !0), (t.autoClear || g) && t.clear(t.autoClearColor, t.autoClearDepth, t.autoClearStencil), x && (x.isCubeTexture || x.mapping === ot) ? (void 0 === a && ((a = new cs(new ps(1, 1, 1), new vs({
            name: "BackgroundCubeMaterial",
            uniforms: ds(rl.cube.uniforms),
            vertexShader: rl.cube.vertexShader,
            fragmentShader: rl.cube.fragmentShader,
            side: p,
            depthTest: !1,
            depthWrite: !1,
            fog: !1
          }))).geometry.deleteAttribute("normal"), a.geometry.deleteAttribute("uv"), a.onBeforeRender = function (t, e, n) {
            this.matrixWorld.copyPosition(n.matrixWorld);
          }, Object.defineProperty(a.material, "envMap", {
            get: function get() {
              return this.uniforms.envMap.value;
            }
          }), r.update(a)), a.material.uniforms.envMap.value = x, a.material.uniforms.flipEnvMap.value = x.isCubeTexture && x._needsFlipEnvMap ? -1 : 1, c === x && h === x.version && d === t.toneMapping || (a.material.needsUpdate = !0, c = x, h = x.version, d = t.toneMapping), n.unshift(a, a.geometry, a.material, 0, 0, null)) : x && x.isTexture && (void 0 === o && ((o = new cs(new Ds(2, 2), new vs({
            name: "BackgroundMaterial",
            uniforms: ds(rl.background.uniforms),
            vertexShader: rl.background.vertexShader,
            fragmentShader: rl.background.fragmentShader,
            side: u,
            depthTest: !1,
            depthWrite: !1,
            fog: !1
          }))).geometry.deleteAttribute("normal"), Object.defineProperty(o.material, "map", {
            get: function get() {
              return this.uniforms.t2D.value;
            }
          }), r.update(o)), o.material.uniforms.t2D.value = x, !0 === x.matrixAutoUpdate && x.updateMatrix(), o.material.uniforms.uvTransform.value.copy(x.matrix), c === x && h === x.version && d === t.toneMapping || (o.material.needsUpdate = !0, c = x, h = x.version, d = t.toneMapping), n.unshift(o, o.geometry, o.material, 0, 0, null));
        }
      };
    }

    function sl(t, e, n, r) {
      var i = t.getParameter(34921),
          s = r.isWebGL2 ? null : e.get("OES_vertex_array_object"),
          o = r.isWebGL2 || null !== s,
          a = {},
          l = p(null);
      var c = l;

      function h(e) {
        return r.isWebGL2 ? t.bindVertexArray(e) : s.bindVertexArrayOES(e);
      }

      function u(e) {
        return r.isWebGL2 ? t.deleteVertexArray(e) : s.deleteVertexArrayOES(e);
      }

      function p(t) {
        var e = [],
            n = [],
            r = [];

        for (var _s13 = 0; _s13 < i; _s13++) {
          e[_s13] = 0, n[_s13] = 0, r[_s13] = 0;
        }

        return {
          geometry: null,
          program: null,
          wireframe: !1,
          newAttributes: e,
          enabledAttributes: n,
          attributeDivisors: r,
          object: t,
          attributes: {},
          index: null
        };
      }

      function d() {
        var t = c.newAttributes;

        for (var _e43 = 0, _n63 = t.length; _e43 < _n63; _e43++) {
          t[_e43] = 0;
        }
      }

      function m(t) {
        f(t, 0);
      }

      function f(n, i) {
        var s = c.newAttributes,
            o = c.enabledAttributes,
            a = c.attributeDivisors;

        if (s[n] = 1, 0 === o[n] && (t.enableVertexAttribArray(n), o[n] = 1), a[n] !== i) {
          (r.isWebGL2 ? t : e.get("ANGLE_instanced_arrays"))[r.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](n, i), a[n] = i;
        }
      }

      function g() {
        var e = c.newAttributes,
            n = c.enabledAttributes;

        for (var _r57 = 0, _i47 = n.length; _r57 < _i47; _r57++) {
          n[_r57] !== e[_r57] && (t.disableVertexAttribArray(_r57), n[_r57] = 0);
        }
      }

      function x(e, n, i, s, o, a) {
        !0 !== r.isWebGL2 || 5124 !== i && 5125 !== i ? t.vertexAttribPointer(e, n, i, s, o, a) : t.vertexAttribIPointer(e, n, i, o, a);
      }

      function v() {
        y(), c !== l && h((c = l).object);
      }

      function y() {
        l.geometry = null, l.program = null, l.wireframe = !1;
      }

      return {
        setup: function setup(i, l, u, v, y) {
          var _ = !1;

          if (o) {
            var _e44 = function (e, n, i) {
              var o = !0 === i.wireframe;
              var l = a[e.id];
              void 0 === l && (l = {}, a[e.id] = l);
              var c = l[n.id];
              void 0 === c && (c = {}, l[n.id] = c);
              var h = c[o];
              return void 0 === h && (h = p(r.isWebGL2 ? t.createVertexArray() : s.createVertexArrayOES()), c[o] = h), h;
            }(v, u, l);

            c !== _e44 && h((c = _e44).object), (_ = function (t, e) {
              var n = c.attributes,
                  r = t.attributes;
              var i = 0;

              for (var _s14 in r) {
                var _t49 = n[_s14],
                    _e45 = r[_s14];
                if (void 0 === _t49) return !0;
                if (_t49.attribute !== _e45) return !0;
                if (_t49.data !== _e45.data) return !0;
                i++;
              }

              return c.attributesNum !== i || c.index !== e;
            }(v, y)) && function (t, e) {
              var n = {},
                  r = t.attributes;
              var i = 0;

              for (var _s15 in r) {
                var _t50 = r[_s15],
                    _e46 = {};
                _e46.attribute = _t50, _t50.data && (_e46.data = _t50.data), n[_s15] = _e46, i++;
              }

              c.attributes = n, c.attributesNum = i, c.index = e;
            }(v, y);
          } else {
            var _t51 = !0 === l.wireframe;

            c.geometry === v.id && c.program === u.id && c.wireframe === _t51 || (c.geometry = v.id, c.program = u.id, c.wireframe = _t51, _ = !0);
          }

          !0 === i.isInstancedMesh && (_ = !0), null !== y && n.update(y, 34963), _ && (function (i, s, o, a) {
            if (!1 === r.isWebGL2 && (i.isInstancedMesh || a.isInstancedBufferGeometry) && null === e.get("ANGLE_instanced_arrays")) return;
            d();
            var l = a.attributes,
                c = o.getAttributes(),
                h = s.defaultAttributeValues;

            for (var _e47 in c) {
              var _r58 = c[_e47];

              if (_r58 >= 0) {
                var _s16 = l[_e47];

                if (void 0 !== _s16) {
                  var _e48 = _s16.normalized,
                      _i48 = _s16.itemSize,
                      _o15 = n.get(_s16);

                  if (void 0 === _o15) continue;
                  var _l15 = _o15.buffer,
                      _c10 = _o15.type,
                      _h6 = _o15.bytesPerElement;

                  if (_s16.isInterleavedBufferAttribute) {
                    var _n64 = _s16.data,
                        _o16 = _n64.stride,
                        _u9 = _s16.offset;
                    _n64 && _n64.isInstancedInterleavedBuffer ? (f(_r58, _n64.meshPerAttribute), void 0 === a._maxInstanceCount && (a._maxInstanceCount = _n64.meshPerAttribute * _n64.count)) : m(_r58), t.bindBuffer(34962, _l15), x(_r58, _i48, _c10, _e48, _o16 * _h6, _u9 * _h6);
                  } else _s16.isInstancedBufferAttribute ? (f(_r58, _s16.meshPerAttribute), void 0 === a._maxInstanceCount && (a._maxInstanceCount = _s16.meshPerAttribute * _s16.count)) : m(_r58), t.bindBuffer(34962, _l15), x(_r58, _i48, _c10, _e48, 0, 0);
                } else if ("instanceMatrix" === _e47) {
                  var _e49 = n.get(i.instanceMatrix);

                  if (void 0 === _e49) continue;
                  var _s17 = _e49.buffer,
                      _o17 = _e49.type;
                  f(_r58 + 0, 1), f(_r58 + 1, 1), f(_r58 + 2, 1), f(_r58 + 3, 1), t.bindBuffer(34962, _s17), t.vertexAttribPointer(_r58 + 0, 4, _o17, !1, 64, 0), t.vertexAttribPointer(_r58 + 1, 4, _o17, !1, 64, 16), t.vertexAttribPointer(_r58 + 2, 4, _o17, !1, 64, 32), t.vertexAttribPointer(_r58 + 3, 4, _o17, !1, 64, 48);
                } else if ("instanceColor" === _e47) {
                  var _e50 = n.get(i.instanceColor);

                  if (void 0 === _e50) continue;
                  var _s18 = _e50.buffer,
                      _o18 = _e50.type;
                  f(_r58, 1), t.bindBuffer(34962, _s18), t.vertexAttribPointer(_r58, 3, _o18, !1, 12, 0);
                } else if (void 0 !== h) {
                  var _n65 = h[_e47];
                  if (void 0 !== _n65) switch (_n65.length) {
                    case 2:
                      t.vertexAttrib2fv(_r58, _n65);
                      break;

                    case 3:
                      t.vertexAttrib3fv(_r58, _n65);
                      break;

                    case 4:
                      t.vertexAttrib4fv(_r58, _n65);
                      break;

                    default:
                      t.vertexAttrib1fv(_r58, _n65);
                  }
                }
              }
            }

            g();
          }(i, l, u, v), null !== y && t.bindBuffer(34963, n.get(y).buffer));
        },
        reset: v,
        resetDefaultState: y,
        dispose: function dispose() {
          v();

          for (var _t52 in a) {
            var _e51 = a[_t52];

            for (var _t53 in _e51) {
              var _n66 = _e51[_t53];

              for (var _t54 in _n66) {
                u(_n66[_t54].object), delete _n66[_t54];
              }

              delete _e51[_t53];
            }

            delete a[_t52];
          }
        },
        releaseStatesOfGeometry: function releaseStatesOfGeometry(t) {
          if (void 0 === a[t.id]) return;
          var e = a[t.id];

          for (var _n67 in e) {
            var _t55 = e[_n67];

            for (var _e52 in _t55) {
              u(_t55[_e52].object), delete _t55[_e52];
            }

            delete e[_n67];
          }

          delete a[t.id];
        },
        releaseStatesOfProgram: function releaseStatesOfProgram(t) {
          for (var _e53 in a) {
            var _n68 = a[_e53];
            if (void 0 === _n68[t.id]) continue;
            var _r59 = _n68[t.id];

            for (var _t56 in _r59) {
              u(_r59[_t56].object), delete _r59[_t56];
            }

            delete _n68[t.id];
          }
        },
        initAttributes: d,
        enableAttribute: m,
        disableUnusedAttributes: g
      };
    }

    function ol(t, e, n, r) {
      var i = r.isWebGL2;
      var s;
      this.setMode = function (t) {
        s = t;
      }, this.render = function (e, r) {
        t.drawArrays(s, e, r), n.update(r, s, 1);
      }, this.renderInstances = function (r, o, a) {
        if (0 === a) return;
        var l, c;
        if (i) l = t, c = "drawArraysInstanced";else if (c = "drawArraysInstancedANGLE", null === (l = e.get("ANGLE_instanced_arrays"))) return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
        l[c](s, r, o, a), n.update(o, s, a);
      };
    }

    function al(t, e, n) {
      var r;

      function i(e) {
        if ("highp" === e) {
          if (t.getShaderPrecisionFormat(35633, 36338).precision > 0 && t.getShaderPrecisionFormat(35632, 36338).precision > 0) return "highp";
          e = "mediump";
        }

        return "mediump" === e && t.getShaderPrecisionFormat(35633, 36337).precision > 0 && t.getShaderPrecisionFormat(35632, 36337).precision > 0 ? "mediump" : "lowp";
      }

      var s = "undefined" != typeof WebGL2RenderingContext && t instanceof WebGL2RenderingContext || "undefined" != typeof WebGL2ComputeRenderingContext && t instanceof WebGL2ComputeRenderingContext;
      var o = void 0 !== n.precision ? n.precision : "highp";
      var a = i(o);
      a !== o && (console.warn("THREE.WebGLRenderer:", o, "not supported, using", a, "instead."), o = a);
      var l = !0 === n.logarithmicDepthBuffer,
          c = t.getParameter(34930),
          h = t.getParameter(35660),
          u = t.getParameter(3379),
          p = t.getParameter(34076),
          d = t.getParameter(34921),
          m = t.getParameter(36347),
          f = t.getParameter(36348),
          g = t.getParameter(36349),
          x = h > 0,
          v = s || e.has("OES_texture_float");
      return {
        isWebGL2: s,
        getMaxAnisotropy: function getMaxAnisotropy() {
          if (void 0 !== r) return r;

          if (!0 === e.has("EXT_texture_filter_anisotropic")) {
            var _n69 = e.get("EXT_texture_filter_anisotropic");

            r = t.getParameter(_n69.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
          } else r = 0;

          return r;
        },
        getMaxPrecision: i,
        precision: o,
        logarithmicDepthBuffer: l,
        maxTextures: c,
        maxVertexTextures: h,
        maxTextureSize: u,
        maxCubemapSize: p,
        maxAttributes: d,
        maxVertexUniforms: m,
        maxVaryings: f,
        maxFragmentUniforms: g,
        vertexTextures: x,
        floatFragmentTextures: v,
        floatVertexTextures: x && v,
        maxSamples: s ? t.getParameter(36183) : 0
      };
    }

    function ll(t) {
      var e = this;
      var n = null,
          r = 0,
          i = !1,
          s = !1;
      var o = new ti(),
          a = new zn(),
          l = {
        value: null,
        needsUpdate: !1
      };

      function c() {
        l.value !== n && (l.value = n, l.needsUpdate = r > 0), e.numPlanes = r, e.numIntersection = 0;
      }

      function h(t, n, r, i) {
        var s = null !== t ? t.length : 0;
        var c = null;

        if (0 !== s) {
          if (c = l.value, !0 !== i || null === c) {
            var _e54 = r + 4 * s,
                _i49 = n.matrixWorldInverse;

            a.getNormalMatrix(_i49), (null === c || c.length < _e54) && (c = new Float32Array(_e54));

            for (var _n70 = 0, _l16 = r; _n70 !== s; ++_n70, _l16 += 4) {
              o.copy(t[_n70]).applyMatrix4(_i49, a), o.normal.toArray(c, _l16), c[_l16 + 3] = o.constant;
            }
          }

          l.value = c, l.needsUpdate = !0;
        }

        return e.numPlanes = s, e.numIntersection = 0, c;
      }

      this.uniform = l, this.numPlanes = 0, this.numIntersection = 0, this.init = function (t, e, s) {
        var o = 0 !== t.length || e || 0 !== r || i;
        return i = e, n = h(t, s, 0), r = t.length, o;
      }, this.beginShadows = function () {
        s = !0, h(null);
      }, this.endShadows = function () {
        s = !1, c();
      }, this.setState = function (e, o, a) {
        var u = e.clippingPlanes,
            p = e.clipIntersection,
            d = e.clipShadows,
            m = t.get(e);
        if (!i || null === u || 0 === u.length || s && !d) s ? h(null) : c();else {
          var _t57 = s ? 0 : r,
              _e55 = 4 * _t57;

          var _i50 = m.clippingState || null;

          l.value = _i50, _i50 = h(u, o, _e55, a);

          for (var _r60 = 0; _r60 !== _e55; ++_r60) {
            _i50[_r60] = n[_r60];
          }

          m.clippingState = _i50, this.numIntersection = p ? this.numPlanes : 0, this.numPlanes += _t57;
        }
      };
    }

    function cl(t) {
      var e = new WeakMap();

      function n(t, e) {
        return e === it ? t.mapping = nt : e === st && (t.mapping = rt), t;
      }

      function r(t) {
        var n = t.target;
        n.removeEventListener("dispose", r);
        var i = e.get(n);
        void 0 !== i && (e.delete(n), i.dispose());
      }

      return {
        get: function get(i) {
          if (i && i.isTexture) {
            var _s19 = i.mapping;

            if (_s19 === it || _s19 === st) {
              if (e.has(i)) return n(e.get(i).texture, i.mapping);
              {
                var _s20 = i.image;

                if (_s20 && _s20.height > 0) {
                  var _o19 = t.getRenderTarget(),
                      _a13 = new Ts(_s20.height / 2);

                  return _a13.fromEquirectangularTexture(t, i), e.set(i, _a13), t.setRenderTarget(_o19), i.addEventListener("dispose", r), n(_a13.texture, i.mapping);
                }

                return null;
              }
            }
          }

          return i;
        },
        dispose: function dispose() {
          e = new WeakMap();
        }
      };
    }

    function hl(t) {
      var e = {};

      function n(n) {
        if (void 0 !== e[n]) return e[n];
        var r;

        switch (n) {
          case "WEBGL_depth_texture":
            r = t.getExtension("WEBGL_depth_texture") || t.getExtension("MOZ_WEBGL_depth_texture") || t.getExtension("WEBKIT_WEBGL_depth_texture");
            break;

          case "EXT_texture_filter_anisotropic":
            r = t.getExtension("EXT_texture_filter_anisotropic") || t.getExtension("MOZ_EXT_texture_filter_anisotropic") || t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
            break;

          case "WEBGL_compressed_texture_s3tc":
            r = t.getExtension("WEBGL_compressed_texture_s3tc") || t.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
            break;

          case "WEBGL_compressed_texture_pvrtc":
            r = t.getExtension("WEBGL_compressed_texture_pvrtc") || t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
            break;

          default:
            r = t.getExtension(n);
        }

        return e[n] = r, r;
      }

      return {
        has: function has(t) {
          return null !== n(t);
        },
        init: function init(t) {
          t.isWebGL2 ? n("EXT_color_buffer_float") : (n("WEBGL_depth_texture"), n("OES_texture_float"), n("OES_texture_half_float"), n("OES_texture_half_float_linear"), n("OES_standard_derivatives"), n("OES_element_index_uint"), n("OES_vertex_array_object"), n("ANGLE_instanced_arrays")), n("OES_texture_float_linear"), n("EXT_color_buffer_half_float");
        },
        get: function get(t) {
          var e = n(t);
          return null === e && console.warn("THREE.WebGLRenderer: " + t + " extension not supported."), e;
        }
      };
    }

    function ul(t, e, n, r) {
      var i = {},
          s = new WeakMap();

      function o(t) {
        var a = t.target;
        null !== a.index && e.remove(a.index);

        for (var _n71 in a.attributes) {
          e.remove(a.attributes[_n71]);
        }

        a.removeEventListener("dispose", o), delete i[a.id];
        var l = s.get(a);
        l && (e.remove(l), s.delete(a)), r.releaseStatesOfGeometry(a), !0 === a.isInstancedBufferGeometry && delete a._maxInstanceCount, n.memory.geometries--;
      }

      function a(t) {
        var n = [],
            r = t.index,
            i = t.attributes.position;
        var o = 0;

        if (null !== r) {
          var _t58 = r.array;
          o = r.version;

          for (var _e56 = 0, _r61 = _t58.length; _e56 < _r61; _e56 += 3) {
            var _r62 = _t58[_e56 + 0],
                _i51 = _t58[_e56 + 1],
                _s21 = _t58[_e56 + 2];
            n.push(_r62, _i51, _i51, _s21, _s21, _r62);
          }
        } else {
          var _t59 = i.array;
          o = i.version;

          for (var _e57 = 0, _r63 = _t59.length / 3 - 1; _e57 < _r63; _e57 += 3) {
            var _t60 = _e57 + 0,
                _r64 = _e57 + 1,
                _i52 = _e57 + 2;

            n.push(_t60, _r64, _r64, _i52, _i52, _t60);
          }
        }

        var a = new (Ni(n) > 65535 ? Pi : Ri)(n, 1);
        a.version = o;
        var l = s.get(t);
        l && e.remove(l), s.set(t, a);
      }

      return {
        get: function get(t, e) {
          return !0 === i[e.id] ? e : (e.addEventListener("dispose", o), i[e.id] = !0, n.memory.geometries++, e);
        },
        update: function update(t) {
          var n = t.attributes;

          for (var _i53 in n) {
            e.update(n[_i53], 34962);
          }

          var r = t.morphAttributes;

          for (var _i54 in r) {
            var _t61 = r[_i54];

            for (var _n72 = 0, _r65 = _t61.length; _n72 < _r65; _n72++) {
              e.update(_t61[_n72], 34962);
            }
          }
        },
        getWireframeAttribute: function getWireframeAttribute(t) {
          var e = s.get(t);

          if (e) {
            var _n73 = t.index;
            null !== _n73 && e.version < _n73.version && a(t);
          } else a(t);

          return s.get(t);
        }
      };
    }

    function pl(t, e, n, r) {
      var i = r.isWebGL2;
      var s, o, a;
      this.setMode = function (t) {
        s = t;
      }, this.setIndex = function (t) {
        o = t.type, a = t.bytesPerElement;
      }, this.render = function (e, r) {
        t.drawElements(s, r, o, e * a), n.update(r, s, 1);
      }, this.renderInstances = function (r, l, c) {
        if (0 === c) return;
        var h, u;
        if (i) h = t, u = "drawElementsInstanced";else if (u = "drawElementsInstancedANGLE", null === (h = e.get("ANGLE_instanced_arrays"))) return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
        h[u](s, l, o, r * a, c), n.update(l, s, c);
      };
    }

    function dl(t) {
      var e = {
        frame: 0,
        calls: 0,
        triangles: 0,
        points: 0,
        lines: 0
      };
      return {
        memory: {
          geometries: 0,
          textures: 0
        },
        render: e,
        programs: null,
        autoReset: !0,
        reset: function reset() {
          e.frame++, e.calls = 0, e.triangles = 0, e.points = 0, e.lines = 0;
        },
        update: function update(t, n, r) {
          switch (e.calls++, n) {
            case 4:
              e.triangles += r * (t / 3);
              break;

            case 1:
              e.lines += r * (t / 2);
              break;

            case 3:
              e.lines += r * (t - 1);
              break;

            case 2:
              e.lines += r * t;
              break;

            case 0:
              e.points += r * t;
              break;

            default:
              console.error("THREE.WebGLInfo: Unknown draw mode:", n);
          }
        }
      };
    }

    function ml(t, e) {
      return t[0] - e[0];
    }

    function fl(t, e) {
      return Math.abs(e[1]) - Math.abs(t[1]);
    }

    function gl(t) {
      var e = {},
          n = new Float32Array(8),
          r = [];

      for (var _i55 = 0; _i55 < 8; _i55++) {
        r[_i55] = [_i55, 0];
      }

      return {
        update: function update(i, s, o, a) {
          var l = i.morphTargetInfluences,
              c = void 0 === l ? 0 : l.length;
          var h = e[s.id];

          if (void 0 === h) {
            h = [];

            for (var _t62 = 0; _t62 < c; _t62++) {
              h[_t62] = [_t62, 0];
            }

            e[s.id] = h;
          }

          for (var _t63 = 0; _t63 < c; _t63++) {
            var _e58 = h[_t63];
            _e58[0] = _t63, _e58[1] = l[_t63];
          }

          h.sort(fl);

          for (var _t64 = 0; _t64 < 8; _t64++) {
            _t64 < c && h[_t64][1] ? (r[_t64][0] = h[_t64][0], r[_t64][1] = h[_t64][1]) : (r[_t64][0] = Number.MAX_SAFE_INTEGER, r[_t64][1] = 0);
          }

          r.sort(ml);
          var u = o.morphTargets && s.morphAttributes.position,
              p = o.morphNormals && s.morphAttributes.normal;
          var d = 0;

          for (var _t65 = 0; _t65 < 8; _t65++) {
            var _e59 = r[_t65],
                _i56 = _e59[0],
                _o20 = _e59[1];
            _i56 !== Number.MAX_SAFE_INTEGER && _o20 ? (u && s.getAttribute("morphTarget" + _t65) !== u[_i56] && s.setAttribute("morphTarget" + _t65, u[_i56]), p && s.getAttribute("morphNormal" + _t65) !== p[_i56] && s.setAttribute("morphNormal" + _t65, p[_i56]), n[_t65] = _o20, d += _o20) : (u && !0 === s.hasAttribute("morphTarget" + _t65) && s.deleteAttribute("morphTarget" + _t65), p && !0 === s.hasAttribute("morphNormal" + _t65) && s.deleteAttribute("morphNormal" + _t65), n[_t65] = 0);
          }

          var m = s.morphTargetsRelative ? 1 : 1 - d;
          a.getUniforms().setValue(t, "morphTargetBaseInfluence", m), a.getUniforms().setValue(t, "morphTargetInfluences", n);
        }
      };
    }

    function xl(t, e, n, r) {
      var i = new WeakMap();

      function s(t) {
        var e = t.target;
        e.removeEventListener("dispose", s), n.remove(e.instanceMatrix), null !== e.instanceColor && n.remove(e.instanceColor);
      }

      return {
        update: function update(t) {
          var o = r.render.frame,
              a = t.geometry,
              l = e.get(t, a);
          return i.get(l) !== o && (e.update(l), i.set(l, o)), t.isInstancedMesh && (!1 === t.hasEventListener("dispose", s) && t.addEventListener("dispose", s), n.update(t.instanceMatrix, 34962), null !== t.instanceColor && n.update(t.instanceColor, 34962)), l;
        },
        dispose: function dispose() {
          i = new WeakMap();
        }
      };
    }

    exports.ShaderLib = rl, rl.physical = {
      uniforms: ms([rl.standard.uniforms, {
        clearcoat: {
          value: 0
        },
        clearcoatMap: {
          value: null
        },
        clearcoatRoughness: {
          value: 0
        },
        clearcoatRoughnessMap: {
          value: null
        },
        clearcoatNormalScale: {
          value: new On(1, 1)
        },
        clearcoatNormalMap: {
          value: null
        },
        sheen: {
          value: new _i(0)
        },
        transmission: {
          value: 0
        },
        transmissionMap: {
          value: null
        }
      }]),
      vertexShader: el.meshphysical_vert,
      fragmentShader: el.meshphysical_frag
    };

    var vl = /*#__PURE__*/function (_kn3) {
      _inherits(vl, _kn3);

      var _super11 = _createSuper(vl);

      function vl() {
        var _this11;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

        _classCallCheck(this, vl);

        _this11 = _super11.call(this, null), _this11.image = {
          data: t,
          width: e,
          height: n,
          depth: r
        }, _this11.magFilter = ut, _this11.minFilter = ut, _this11.wrapR = ct, _this11.generateMipmaps = !1, _this11.flipY = !1, _this11.needsUpdate = !0;
        return _this11;
      }

      return vl;
    }(kn);

    exports.DataTexture2DArray = vl, vl.prototype.isDataTexture2DArray = !0;

    var yl = /*#__PURE__*/function (_kn4) {
      _inherits(yl, _kn4);

      var _super12 = _createSuper(yl);

      function yl() {
        var _this12;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

        _classCallCheck(this, yl);

        _this12 = _super12.call(this, null), _this12.image = {
          data: t,
          width: e,
          height: n,
          depth: r
        }, _this12.magFilter = ut, _this12.minFilter = ut, _this12.wrapR = ct, _this12.generateMipmaps = !1, _this12.flipY = !1, _this12.needsUpdate = !0;
        return _this12;
      }

      return yl;
    }(kn);

    exports.DataTexture3D = yl, yl.prototype.isDataTexture3D = !0;

    var _l = new kn(),
        bl = new vl(),
        wl = new yl(),
        Ml = new Ss(),
        Sl = [],
        Tl = [],
        El = new Float32Array(16),
        Al = new Float32Array(9),
        Ll = new Float32Array(4);

    function Rl(t, e, n) {
      var r = t[0];
      if (r <= 0 || r > 0) return t;
      var i = e * n;
      var s = Sl[i];

      if (void 0 === s && (s = new Float32Array(i), Sl[i] = s), 0 !== e) {
        r.toArray(s, 0);

        for (var _r66 = 1, _i57 = 0; _r66 !== e; ++_r66) {
          _i57 += n, t[_r66].toArray(s, _i57);
        }
      }

      return s;
    }

    function Cl(t, e) {
      if (t.length !== e.length) return !1;

      for (var _n74 = 0, _r67 = t.length; _n74 < _r67; _n74++) {
        if (t[_n74] !== e[_n74]) return !1;
      }

      return !0;
    }

    function Pl(t, e) {
      for (var _n75 = 0, _r68 = e.length; _n75 < _r68; _n75++) {
        t[_n75] = e[_n75];
      }
    }

    function Dl(t, e) {
      var n = Tl[e];
      void 0 === n && (n = new Int32Array(e), Tl[e] = n);

      for (var _r69 = 0; _r69 !== e; ++_r69) {
        n[_r69] = t.allocateTextureUnit();
      }

      return n;
    }

    function Il(t, e) {
      var n = this.cache;
      n[0] !== e && (t.uniform1f(this.addr, e), n[0] = e);
    }

    function Bl(t, e) {
      var n = this.cache;
      if (void 0 !== e.x) n[0] === e.x && n[1] === e.y || (t.uniform2f(this.addr, e.x, e.y), n[0] = e.x, n[1] = e.y);else {
        if (Cl(n, e)) return;
        t.uniform2fv(this.addr, e), Pl(n, e);
      }
    }

    function Nl(t, e) {
      var n = this.cache;
      if (void 0 !== e.x) n[0] === e.x && n[1] === e.y && n[2] === e.z || (t.uniform3f(this.addr, e.x, e.y, e.z), n[0] = e.x, n[1] = e.y, n[2] = e.z);else if (void 0 !== e.r) n[0] === e.r && n[1] === e.g && n[2] === e.b || (t.uniform3f(this.addr, e.r, e.g, e.b), n[0] = e.r, n[1] = e.g, n[2] = e.b);else {
        if (Cl(n, e)) return;
        t.uniform3fv(this.addr, e), Pl(n, e);
      }
    }

    function Fl(t, e) {
      var n = this.cache;
      if (void 0 !== e.x) n[0] === e.x && n[1] === e.y && n[2] === e.z && n[3] === e.w || (t.uniform4f(this.addr, e.x, e.y, e.z, e.w), n[0] = e.x, n[1] = e.y, n[2] = e.z, n[3] = e.w);else {
        if (Cl(n, e)) return;
        t.uniform4fv(this.addr, e), Pl(n, e);
      }
    }

    function Ol(t, e) {
      var n = this.cache,
          r = e.elements;

      if (void 0 === r) {
        if (Cl(n, e)) return;
        t.uniformMatrix2fv(this.addr, !1, e), Pl(n, e);
      } else {
        if (Cl(n, r)) return;
        Ll.set(r), t.uniformMatrix2fv(this.addr, !1, Ll), Pl(n, r);
      }
    }

    function zl(t, e) {
      var n = this.cache,
          r = e.elements;

      if (void 0 === r) {
        if (Cl(n, e)) return;
        t.uniformMatrix3fv(this.addr, !1, e), Pl(n, e);
      } else {
        if (Cl(n, r)) return;
        Al.set(r), t.uniformMatrix3fv(this.addr, !1, Al), Pl(n, r);
      }
    }

    function Gl(t, e) {
      var n = this.cache,
          r = e.elements;

      if (void 0 === r) {
        if (Cl(n, e)) return;
        t.uniformMatrix4fv(this.addr, !1, e), Pl(n, e);
      } else {
        if (Cl(n, r)) return;
        El.set(r), t.uniformMatrix4fv(this.addr, !1, El), Pl(n, r);
      }
    }

    function Hl(t, e) {
      var n = this.cache;
      n[0] !== e && (t.uniform1i(this.addr, e), n[0] = e);
    }

    function Ul(t, e) {
      var n = this.cache;
      Cl(n, e) || (t.uniform2iv(this.addr, e), Pl(n, e));
    }

    function kl(t, e) {
      var n = this.cache;
      Cl(n, e) || (t.uniform3iv(this.addr, e), Pl(n, e));
    }

    function Vl(t, e) {
      var n = this.cache;
      Cl(n, e) || (t.uniform4iv(this.addr, e), Pl(n, e));
    }

    function Wl(t, e) {
      var n = this.cache;
      n[0] !== e && (t.uniform1ui(this.addr, e), n[0] = e);
    }

    function jl(t, e) {
      var n = this.cache;
      Cl(n, e) || (t.uniform2uiv(this.addr, e), Pl(n, e));
    }

    function ql(t, e) {
      var n = this.cache;
      Cl(n, e) || (t.uniform3uiv(this.addr, e), Pl(n, e));
    }

    function Xl(t, e) {
      var n = this.cache;
      Cl(n, e) || (t.uniform4uiv(this.addr, e), Pl(n, e));
    }

    function Yl(t, e, n) {
      var r = this.cache,
          i = n.allocateTextureUnit();
      r[0] !== i && (t.uniform1i(this.addr, i), r[0] = i), n.safeSetTexture2D(e || _l, i);
    }

    function Zl(t, e, n) {
      var r = this.cache,
          i = n.allocateTextureUnit();
      r[0] !== i && (t.uniform1i(this.addr, i), r[0] = i), n.setTexture3D(e || wl, i);
    }

    function Jl(t, e, n) {
      var r = this.cache,
          i = n.allocateTextureUnit();
      r[0] !== i && (t.uniform1i(this.addr, i), r[0] = i), n.safeSetTextureCube(e || Ml, i);
    }

    function Ql(t, e, n) {
      var r = this.cache,
          i = n.allocateTextureUnit();
      r[0] !== i && (t.uniform1i(this.addr, i), r[0] = i), n.setTexture2DArray(e || bl, i);
    }

    function Kl(t) {
      switch (t) {
        case 5126:
          return Il;

        case 35664:
          return Bl;

        case 35665:
          return Nl;

        case 35666:
          return Fl;

        case 35674:
          return Ol;

        case 35675:
          return zl;

        case 35676:
          return Gl;

        case 5124:
        case 35670:
          return Hl;

        case 35667:
        case 35671:
          return Ul;

        case 35668:
        case 35672:
          return kl;

        case 35669:
        case 35673:
          return Vl;

        case 5125:
          return Wl;

        case 36294:
          return jl;

        case 36295:
          return ql;

        case 36296:
          return Xl;

        case 35678:
        case 36198:
        case 36298:
        case 36306:
        case 35682:
          return Yl;

        case 35679:
        case 36299:
        case 36307:
          return Zl;

        case 35680:
        case 36300:
        case 36308:
        case 36293:
          return Jl;

        case 36289:
        case 36303:
        case 36311:
        case 36292:
          return Ql;
      }
    }

    function $l(t, e) {
      t.uniform1fv(this.addr, e);
    }

    function tc(t, e) {
      var n = Rl(e, this.size, 2);
      t.uniform2fv(this.addr, n);
    }

    function ec(t, e) {
      var n = Rl(e, this.size, 3);
      t.uniform3fv(this.addr, n);
    }

    function nc(t, e) {
      var n = Rl(e, this.size, 4);
      t.uniform4fv(this.addr, n);
    }

    function rc(t, e) {
      var n = Rl(e, this.size, 4);
      t.uniformMatrix2fv(this.addr, !1, n);
    }

    function ic(t, e) {
      var n = Rl(e, this.size, 9);
      t.uniformMatrix3fv(this.addr, !1, n);
    }

    function sc(t, e) {
      var n = Rl(e, this.size, 16);
      t.uniformMatrix4fv(this.addr, !1, n);
    }

    function oc(t, e) {
      t.uniform1iv(this.addr, e);
    }

    function ac(t, e) {
      t.uniform2iv(this.addr, e);
    }

    function lc(t, e) {
      t.uniform3iv(this.addr, e);
    }

    function cc(t, e) {
      t.uniform4iv(this.addr, e);
    }

    function hc(t, e) {
      t.uniform1uiv(this.addr, e);
    }

    function uc(t, e) {
      t.uniform2uiv(this.addr, e);
    }

    function pc(t, e) {
      t.uniform3uiv(this.addr, e);
    }

    function dc(t, e) {
      t.uniform4uiv(this.addr, e);
    }

    function mc(t, e, n) {
      var r = e.length,
          i = Dl(n, r);
      t.uniform1iv(this.addr, i);

      for (var _s22 = 0; _s22 !== r; ++_s22) {
        n.safeSetTexture2D(e[_s22] || _l, i[_s22]);
      }
    }

    function fc(t, e, n) {
      var r = e.length,
          i = Dl(n, r);
      t.uniform1iv(this.addr, i);

      for (var _s23 = 0; _s23 !== r; ++_s23) {
        n.safeSetTextureCube(e[_s23] || Ml, i[_s23]);
      }
    }

    function gc(t) {
      switch (t) {
        case 5126:
          return $l;

        case 35664:
          return tc;

        case 35665:
          return ec;

        case 35666:
          return nc;

        case 35674:
          return rc;

        case 35675:
          return ic;

        case 35676:
          return sc;

        case 5124:
        case 35670:
          return oc;

        case 35667:
        case 35671:
          return ac;

        case 35668:
        case 35672:
          return lc;

        case 35669:
        case 35673:
          return cc;

        case 5125:
          return hc;

        case 36294:
          return uc;

        case 36295:
          return pc;

        case 36296:
          return dc;

        case 35678:
        case 36198:
        case 36298:
        case 36306:
        case 35682:
          return mc;

        case 35680:
        case 36300:
        case 36308:
        case 36293:
          return fc;
      }
    }

    function xc(t, e, n) {
      this.id = t, this.addr = n, this.cache = [], this.setValue = Kl(e.type);
    }

    function vc(t, e, n) {
      this.id = t, this.addr = n, this.cache = [], this.size = e.size, this.setValue = gc(e.type);
    }

    function yc(t) {
      this.id = t, this.seq = [], this.map = {};
    }

    vc.prototype.updateCache = function (t) {
      var e = this.cache;
      t instanceof Float32Array && e.length !== t.length && (this.cache = new Float32Array(t.length)), Pl(e, t);
    }, yc.prototype.setValue = function (t, e, n) {
      var r = this.seq;

      for (var _i58 = 0, _s24 = r.length; _i58 !== _s24; ++_i58) {
        var _s25 = r[_i58];

        _s25.setValue(t, e[_s25.id], n);
      }
    };
    var _c = /(\w+)(\])?(\[|\.)?/g;

    function bc(t, e) {
      t.seq.push(e), t.map[e.id] = e;
    }

    function wc(t, e, n) {
      var r = t.name,
          i = r.length;

      for (_c.lastIndex = 0;;) {
        var _s26 = _c.exec(r),
            _o21 = _c.lastIndex;

        var _a14 = _s26[1];

        var _l17 = "]" === _s26[2],
            _c11 = _s26[3];

        if (_l17 && (_a14 |= 0), void 0 === _c11 || "[" === _c11 && _o21 + 2 === i) {
          bc(n, void 0 === _c11 ? new xc(_a14, t, e) : new vc(_a14, t, e));
          break;
        }

        {
          var _t66 = n.map[_a14];
          void 0 === _t66 && bc(n, _t66 = new yc(_a14)), n = _t66;
        }
      }
    }

    function Mc(t, e) {
      this.seq = [], this.map = {};
      var n = t.getProgramParameter(e, 35718);

      for (var _r70 = 0; _r70 < n; ++_r70) {
        var _n76 = t.getActiveUniform(e, _r70);

        wc(_n76, t.getUniformLocation(e, _n76.name), this);
      }
    }

    function Sc(t, e, n) {
      var r = t.createShader(e);
      return t.shaderSource(r, n), t.compileShader(r), r;
    }

    Mc.prototype.setValue = function (t, e, n, r) {
      var i = this.map[e];
      void 0 !== i && i.setValue(t, n, r);
    }, Mc.prototype.setOptional = function (t, e, n) {
      var r = e[n];
      void 0 !== r && this.setValue(t, n, r);
    }, Mc.upload = function (t, e, n, r) {
      for (var _i59 = 0, _s27 = e.length; _i59 !== _s27; ++_i59) {
        var _s28 = e[_i59],
            _o22 = n[_s28.id];
        !1 !== _o22.needsUpdate && _s28.setValue(t, _o22.value, r);
      }
    }, Mc.seqWithValue = function (t, e) {
      var n = [];

      for (var _r71 = 0, _i60 = t.length; _r71 !== _i60; ++_r71) {
        var _i61 = t[_r71];
        _i61.id in e && n.push(_i61);
      }

      return n;
    };
    var Tc = 0;

    function Ec(t) {
      var e = t.split("\n");

      for (var _n77 = 0; _n77 < e.length; _n77++) {
        e[_n77] = _n77 + 1 + ": " + e[_n77];
      }

      return e.join("\n");
    }

    function Ac(t) {
      switch (t) {
        case Xe:
          return ["Linear", "( value )"];

        case Ye:
          return ["sRGB", "( value )"];

        case Je:
          return ["RGBE", "( value )"];

        case Ke:
          return ["RGBM", "( value, 7.0 )"];

        case $e:
          return ["RGBM", "( value, 16.0 )"];

        case tn:
          return ["RGBD", "( value, 256.0 )"];

        case Ze:
          return ["Gamma", "( value, float( GAMMA_FACTOR ) )"];

        case Qe:
          return ["LogLuv", "( value )"];

        default:
          return console.warn("THREE.WebGLProgram: Unsupported encoding:", t), ["Linear", "( value )"];
      }
    }

    function Lc(t, e, n) {
      var r = t.getShaderParameter(e, 35713),
          i = t.getShaderInfoLog(e).trim();
      return r && "" === i ? "" : "THREE.WebGLShader: gl.getShaderInfoLog() " + n + "\n" + i + Ec(t.getShaderSource(e));
    }

    function Rc(t, e) {
      var n = Ac(e);
      return "vec4 " + t + "( vec4 value ) { return " + n[0] + "ToLinear" + n[1] + "; }";
    }

    function Cc(t, e) {
      var n = Ac(e);
      return "vec4 " + t + "( vec4 value ) { return LinearTo" + n[0] + n[1] + "; }";
    }

    function Pc(t, e) {
      var n;

      switch (e) {
        case J:
          n = "Linear";
          break;

        case Q:
          n = "Reinhard";
          break;

        case K:
          n = "OptimizedCineon";
          break;

        case $:
          n = "ACESFilmic";
          break;

        case tt:
          n = "Custom";
          break;

        default:
          console.warn("THREE.WebGLProgram: Unsupported toneMapping:", e), n = "Linear";
      }

      return "vec3 " + t + "( vec3 color ) { return " + n + "ToneMapping( color ); }";
    }

    function Dc(t) {
      return [t.extensionDerivatives || t.envMapCubeUV || t.bumpMap || t.tangentSpaceNormalMap || t.clearcoatNormalMap || t.flatShading || "physical" === t.shaderID ? "#extension GL_OES_standard_derivatives : enable" : "", (t.extensionFragDepth || t.logarithmicDepthBuffer) && t.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "", t.extensionDrawBuffers && t.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "", (t.extensionShaderTextureLOD || t.envMap) && t.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""].filter(Nc).join("\n");
    }

    function Ic(t) {
      var e = [];

      for (var _n78 in t) {
        var _r72 = t[_n78];
        !1 !== _r72 && e.push("#define " + _n78 + " " + _r72);
      }

      return e.join("\n");
    }

    function Bc(t, e) {
      var n = {},
          r = t.getProgramParameter(e, 35721);

      for (var _i62 = 0; _i62 < r; _i62++) {
        var _r73 = t.getActiveAttrib(e, _i62).name;
        n[_r73] = t.getAttribLocation(e, _r73);
      }

      return n;
    }

    function Nc(t) {
      return "" !== t;
    }

    function Fc(t, e) {
      return t.replace(/NUM_DIR_LIGHTS/g, e.numDirLights).replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, e.numPointLights).replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows);
    }

    function Oc(t, e) {
      return t.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection);
    }

    var zc = /^[ \t]*#include +<([\w\d./]+)>/gm;

    function Gc(t) {
      return t.replace(zc, Hc);
    }

    function Hc(t, e) {
      var n = el[e];
      if (void 0 === n) throw new Error("Can not resolve #include <" + e + ">");
      return Gc(n);
    }

    var Uc = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,
        kc = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;

    function Vc(t) {
      return t.replace(kc, jc).replace(Uc, Wc);
    }

    function Wc(t, e, n, r) {
      return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."), jc(t, e, n, r);
    }

    function jc(t, e, n, r) {
      var i = "";

      for (var _s29 = parseInt(e); _s29 < parseInt(n); _s29++) {
        i += r.replace(/\[\s*i\s*\]/g, "[ " + _s29 + " ]").replace(/UNROLLED_LOOP_INDEX/g, _s29);
      }

      return i;
    }

    function qc(t) {
      var e = "precision " + t.precision + " float;\nprecision " + t.precision + " int;";
      return "highp" === t.precision ? e += "\n#define HIGH_PRECISION" : "mediump" === t.precision ? e += "\n#define MEDIUM_PRECISION" : "lowp" === t.precision && (e += "\n#define LOW_PRECISION"), e;
    }

    function Xc(t) {
      var e = "SHADOWMAP_TYPE_BASIC";
      return t.shadowMapType === l ? e = "SHADOWMAP_TYPE_PCF" : t.shadowMapType === c ? e = "SHADOWMAP_TYPE_PCF_SOFT" : t.shadowMapType === h && (e = "SHADOWMAP_TYPE_VSM"), e;
    }

    function Yc(t) {
      var e = "ENVMAP_TYPE_CUBE";
      if (t.envMap) switch (t.envMapMode) {
        case nt:
        case rt:
          e = "ENVMAP_TYPE_CUBE";
          break;

        case ot:
        case at:
          e = "ENVMAP_TYPE_CUBE_UV";
      }
      return e;
    }

    function Zc(t) {
      var e = "ENVMAP_MODE_REFLECTION";
      if (t.envMap) switch (t.envMapMode) {
        case rt:
        case at:
          e = "ENVMAP_MODE_REFRACTION";
      }
      return e;
    }

    function Jc(t) {
      var e = "ENVMAP_BLENDING_NONE";
      if (t.envMap) switch (t.combine) {
        case q:
          e = "ENVMAP_BLENDING_MULTIPLY";
          break;

        case X:
          e = "ENVMAP_BLENDING_MIX";
          break;

        case Y:
          e = "ENVMAP_BLENDING_ADD";
      }
      return e;
    }

    function Qc(t, e, n, r) {
      var i = t.getContext(),
          s = n.defines;
      var o = n.vertexShader,
          a = n.fragmentShader;
      var l = Xc(n),
          c = Yc(n),
          h = Zc(n),
          u = Jc(n),
          p = t.gammaFactor > 0 ? t.gammaFactor : 1,
          d = n.isWebGL2 ? "" : Dc(n),
          m = Ic(s),
          f = i.createProgram();
      var g,
          x,
          v = n.glslVersion ? "#version " + n.glslVersion + "\n" : "";
      n.isRawShaderMaterial ? ((g = [m].filter(Nc).join("\n")).length > 0 && (g += "\n"), (x = [d, m].filter(Nc).join("\n")).length > 0 && (x += "\n")) : (g = [qc(n), "#define SHADER_NAME " + n.shaderName, m, n.instancing ? "#define USE_INSTANCING" : "", n.instancingColor ? "#define USE_INSTANCING_COLOR" : "", n.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "", "#define GAMMA_FACTOR " + p, "#define MAX_BONES " + n.maxBones, n.useFog && n.fog ? "#define USE_FOG" : "", n.useFog && n.fogExp2 ? "#define FOG_EXP2" : "", n.map ? "#define USE_MAP" : "", n.envMap ? "#define USE_ENVMAP" : "", n.envMap ? "#define " + h : "", n.lightMap ? "#define USE_LIGHTMAP" : "", n.aoMap ? "#define USE_AOMAP" : "", n.emissiveMap ? "#define USE_EMISSIVEMAP" : "", n.bumpMap ? "#define USE_BUMPMAP" : "", n.normalMap ? "#define USE_NORMALMAP" : "", n.normalMap && n.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", n.normalMap && n.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "", n.clearcoatMap ? "#define USE_CLEARCOATMAP" : "", n.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "", n.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", n.displacementMap && n.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "", n.specularMap ? "#define USE_SPECULARMAP" : "", n.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", n.metalnessMap ? "#define USE_METALNESSMAP" : "", n.alphaMap ? "#define USE_ALPHAMAP" : "", n.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "", n.vertexTangents ? "#define USE_TANGENT" : "", n.vertexColors ? "#define USE_COLOR" : "", n.vertexAlphas ? "#define USE_COLOR_ALPHA" : "", n.vertexUvs ? "#define USE_UV" : "", n.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "", n.flatShading ? "#define FLAT_SHADED" : "", n.skinning ? "#define USE_SKINNING" : "", n.useVertexTexture ? "#define BONE_TEXTURE" : "", n.morphTargets ? "#define USE_MORPHTARGETS" : "", n.morphNormals && !1 === n.flatShading ? "#define USE_MORPHNORMALS" : "", n.doubleSided ? "#define DOUBLE_SIDED" : "", n.flipSided ? "#define FLIP_SIDED" : "", n.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", n.shadowMapEnabled ? "#define " + l : "", n.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", n.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", n.logarithmicDepthBuffer && n.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", "#ifdef USE_INSTANCING", "\tattribute mat4 instanceMatrix;", "#endif", "#ifdef USE_INSTANCING_COLOR", "\tattribute vec3 instanceColor;", "#endif", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "#ifdef USE_TANGENT", "\tattribute vec4 tangent;", "#endif", "#if defined( USE_COLOR_ALPHA )", "\tattribute vec4 color;", "#elif defined( USE_COLOR )", "\tattribute vec3 color;", "#endif", "#ifdef USE_MORPHTARGETS", "\tattribute vec3 morphTarget0;", "\tattribute vec3 morphTarget1;", "\tattribute vec3 morphTarget2;", "\tattribute vec3 morphTarget3;", "\t#ifdef USE_MORPHNORMALS", "\t\tattribute vec3 morphNormal0;", "\t\tattribute vec3 morphNormal1;", "\t\tattribute vec3 morphNormal2;", "\t\tattribute vec3 morphNormal3;", "\t#else", "\t\tattribute vec3 morphTarget4;", "\t\tattribute vec3 morphTarget5;", "\t\tattribute vec3 morphTarget6;", "\t\tattribute vec3 morphTarget7;", "\t#endif", "#endif", "#ifdef USE_SKINNING", "\tattribute vec4 skinIndex;", "\tattribute vec4 skinWeight;", "#endif", "\n"].filter(Nc).join("\n"), x = [d, qc(n), "#define SHADER_NAME " + n.shaderName, m, n.alphaTest ? "#define ALPHATEST " + n.alphaTest + (n.alphaTest % 1 ? "" : ".0") : "", "#define GAMMA_FACTOR " + p, n.useFog && n.fog ? "#define USE_FOG" : "", n.useFog && n.fogExp2 ? "#define FOG_EXP2" : "", n.map ? "#define USE_MAP" : "", n.matcap ? "#define USE_MATCAP" : "", n.envMap ? "#define USE_ENVMAP" : "", n.envMap ? "#define " + c : "", n.envMap ? "#define " + h : "", n.envMap ? "#define " + u : "", n.lightMap ? "#define USE_LIGHTMAP" : "", n.aoMap ? "#define USE_AOMAP" : "", n.emissiveMap ? "#define USE_EMISSIVEMAP" : "", n.bumpMap ? "#define USE_BUMPMAP" : "", n.normalMap ? "#define USE_NORMALMAP" : "", n.normalMap && n.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", n.normalMap && n.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "", n.clearcoatMap ? "#define USE_CLEARCOATMAP" : "", n.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "", n.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", n.specularMap ? "#define USE_SPECULARMAP" : "", n.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", n.metalnessMap ? "#define USE_METALNESSMAP" : "", n.alphaMap ? "#define USE_ALPHAMAP" : "", n.sheen ? "#define USE_SHEEN" : "", n.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "", n.vertexTangents ? "#define USE_TANGENT" : "", n.vertexColors || n.instancingColor ? "#define USE_COLOR" : "", n.vertexAlphas ? "#define USE_COLOR_ALPHA" : "", n.vertexUvs ? "#define USE_UV" : "", n.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "", n.gradientMap ? "#define USE_GRADIENTMAP" : "", n.flatShading ? "#define FLAT_SHADED" : "", n.doubleSided ? "#define DOUBLE_SIDED" : "", n.flipSided ? "#define FLIP_SIDED" : "", n.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", n.shadowMapEnabled ? "#define " + l : "", n.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "", n.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "", n.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", n.logarithmicDepthBuffer && n.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "", (n.extensionShaderTextureLOD || n.envMap) && n.rendererExtensionShaderTextureLod ? "#define TEXTURE_LOD_EXT" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", n.toneMapping !== Z ? "#define TONE_MAPPING" : "", n.toneMapping !== Z ? el.tonemapping_pars_fragment : "", n.toneMapping !== Z ? Pc("toneMapping", n.toneMapping) : "", n.dithering ? "#define DITHERING" : "", el.encodings_pars_fragment, n.map ? Rc("mapTexelToLinear", n.mapEncoding) : "", n.matcap ? Rc("matcapTexelToLinear", n.matcapEncoding) : "", n.envMap ? Rc("envMapTexelToLinear", n.envMapEncoding) : "", n.emissiveMap ? Rc("emissiveMapTexelToLinear", n.emissiveMapEncoding) : "", n.lightMap ? Rc("lightMapTexelToLinear", n.lightMapEncoding) : "", Cc("linearToOutputTexel", n.outputEncoding), n.depthPacking ? "#define DEPTH_PACKING " + n.depthPacking : "", "\n"].filter(Nc).join("\n")), o = Oc(o = Fc(o = Gc(o), n), n), a = Oc(a = Fc(a = Gc(a), n), n), o = Vc(o), a = Vc(a), n.isWebGL2 && !0 !== n.isRawShaderMaterial && (v = "#version 300 es\n", g = ["#define attribute in", "#define varying out", "#define texture2D texture"].join("\n") + "\n" + g, x = ["#define varying in", n.glslVersion === Dn ? "" : "out highp vec4 pc_fragColor;", n.glslVersion === Dn ? "" : "#define gl_FragColor pc_fragColor", "#define gl_FragDepthEXT gl_FragDepth", "#define texture2D texture", "#define textureCube texture", "#define texture2DProj textureProj", "#define texture2DLodEXT textureLod", "#define texture2DProjLodEXT textureProjLod", "#define textureCubeLodEXT textureLod", "#define texture2DGradEXT textureGrad", "#define texture2DProjGradEXT textureProjGrad", "#define textureCubeGradEXT textureGrad"].join("\n") + "\n" + x);

      var y = v + x + a,
          _ = Sc(i, 35633, v + g + o),
          b = Sc(i, 35632, y);

      if (i.attachShader(f, _), i.attachShader(f, b), void 0 !== n.index0AttributeName ? i.bindAttribLocation(f, 0, n.index0AttributeName) : !0 === n.morphTargets && i.bindAttribLocation(f, 0, "position"), i.linkProgram(f), t.debug.checkShaderErrors) {
        var _t67 = i.getProgramInfoLog(f).trim(),
            _e60 = i.getShaderInfoLog(_).trim(),
            _n79 = i.getShaderInfoLog(b).trim();

        var _r74 = !0,
            _s30 = !0;

        if (!1 === i.getProgramParameter(f, 35714)) {
          _r74 = !1;

          var _e61 = Lc(i, _, "vertex"),
              _n80 = Lc(i, b, "fragment");

          console.error("THREE.WebGLProgram: shader error: ", i.getError(), "35715", i.getProgramParameter(f, 35715), "gl.getProgramInfoLog", _t67, _e61, _n80);
        } else "" !== _t67 ? console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", _t67) : "" !== _e60 && "" !== _n79 || (_s30 = !1);

        _s30 && (this.diagnostics = {
          runnable: _r74,
          programLog: _t67,
          vertexShader: {
            log: _e60,
            prefix: g
          },
          fragmentShader: {
            log: _n79,
            prefix: x
          }
        });
      }

      var w, M;
      return i.deleteShader(_), i.deleteShader(b), this.getUniforms = function () {
        return void 0 === w && (w = new Mc(i, f)), w;
      }, this.getAttributes = function () {
        return void 0 === M && (M = Bc(i, f)), M;
      }, this.destroy = function () {
        r.releaseStatesOfProgram(this), i.deleteProgram(f), this.program = void 0;
      }, this.name = n.shaderName, this.id = Tc++, this.cacheKey = e, this.usedTimes = 1, this.program = f, this.vertexShader = _, this.fragmentShader = b, this;
    }

    function Kc(t, e, n, r, i, s) {
      var o = [],
          a = r.isWebGL2,
          l = r.logarithmicDepthBuffer,
          c = r.floatVertexTextures,
          h = r.maxVertexUniforms,
          u = r.vertexTextures;
      var m = r.precision;
      var f = {
        MeshDepthMaterial: "depth",
        MeshDistanceMaterial: "distanceRGBA",
        MeshNormalMaterial: "normal",
        MeshBasicMaterial: "basic",
        MeshLambertMaterial: "lambert",
        MeshPhongMaterial: "phong",
        MeshToonMaterial: "toon",
        MeshStandardMaterial: "physical",
        MeshPhysicalMaterial: "physical",
        MeshMatcapMaterial: "matcap",
        LineBasicMaterial: "basic",
        LineDashedMaterial: "dashed",
        PointsMaterial: "points",
        ShadowMaterial: "shadow",
        SpriteMaterial: "sprite"
      },
          g = ["precision", "isWebGL2", "supportsVertexTextures", "outputEncoding", "instancing", "instancingColor", "map", "mapEncoding", "matcap", "matcapEncoding", "envMap", "envMapMode", "envMapEncoding", "envMapCubeUV", "lightMap", "lightMapEncoding", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "objectSpaceNormalMap", "tangentSpaceNormalMap", "clearcoatMap", "clearcoatRoughnessMap", "clearcoatNormalMap", "displacementMap", "specularMap", "roughnessMap", "metalnessMap", "gradientMap", "alphaMap", "combine", "vertexColors", "vertexAlphas", "vertexTangents", "vertexUvs", "uvsVertexOnly", "fog", "useFog", "fogExp2", "flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning", "maxBones", "useVertexTexture", "morphTargets", "morphNormals", "premultipliedAlpha", "numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights", "numDirLightShadows", "numPointLightShadows", "numSpotLightShadows", "shadowMapEnabled", "shadowMapType", "toneMapping", "physicallyCorrectLights", "alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering", "sheen", "transmissionMap"];

      function x(t) {
        var e;
        return t && t.isTexture ? e = t.encoding : t && t.isWebGLRenderTarget ? (console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."), e = t.texture.encoding) : e = Xe, e;
      }

      return {
        getParameters: function getParameters(i, o, g, v, y) {
          var _ = v.fog,
              b = i.isMeshStandardMaterial ? v.environment : null,
              w = e.get(i.envMap || b),
              M = f[i.type],
              S = y.isSkinnedMesh ? function (t) {
            var e = t.skeleton.bones;
            if (c) return 1024;
            {
              var _t68 = h,
                  _n81 = Math.floor((_t68 - 20) / 4),
                  _r75 = Math.min(_n81, e.length);

              return _r75 < e.length ? (console.warn("THREE.WebGLRenderer: Skeleton has " + e.length + " bones. This GPU supports " + _r75 + "."), 0) : _r75;
            }
          }(y) : 0;
          var T, E;

          if (null !== i.precision && (m = r.getMaxPrecision(i.precision)) !== i.precision && console.warn("THREE.WebGLProgram.getParameters:", i.precision, "not supported, using", m, "instead."), M) {
            var _t69 = rl[M];
            T = _t69.vertexShader, E = _t69.fragmentShader;
          } else T = i.vertexShader, E = i.fragmentShader;

          var A = t.getRenderTarget();
          return {
            isWebGL2: a,
            shaderID: M,
            shaderName: i.type,
            vertexShader: T,
            fragmentShader: E,
            defines: i.defines,
            isRawShaderMaterial: !0 === i.isRawShaderMaterial,
            glslVersion: i.glslVersion,
            precision: m,
            instancing: !0 === y.isInstancedMesh,
            instancingColor: !0 === y.isInstancedMesh && null !== y.instanceColor,
            supportsVertexTextures: u,
            outputEncoding: null !== A ? x(A.texture) : t.outputEncoding,
            map: !!i.map,
            mapEncoding: x(i.map),
            matcap: !!i.matcap,
            matcapEncoding: x(i.matcap),
            envMap: !!w,
            envMapMode: w && w.mapping,
            envMapEncoding: x(w),
            envMapCubeUV: !!w && (w.mapping === ot || w.mapping === at),
            lightMap: !!i.lightMap,
            lightMapEncoding: x(i.lightMap),
            aoMap: !!i.aoMap,
            emissiveMap: !!i.emissiveMap,
            emissiveMapEncoding: x(i.emissiveMap),
            bumpMap: !!i.bumpMap,
            normalMap: !!i.normalMap,
            objectSpaceNormalMap: i.normalMapType === sn,
            tangentSpaceNormalMap: i.normalMapType === rn,
            clearcoatMap: !!i.clearcoatMap,
            clearcoatRoughnessMap: !!i.clearcoatRoughnessMap,
            clearcoatNormalMap: !!i.clearcoatNormalMap,
            displacementMap: !!i.displacementMap,
            roughnessMap: !!i.roughnessMap,
            metalnessMap: !!i.metalnessMap,
            specularMap: !!i.specularMap,
            alphaMap: !!i.alphaMap,
            gradientMap: !!i.gradientMap,
            sheen: !!i.sheen,
            transmissionMap: !!i.transmissionMap,
            combine: i.combine,
            vertexTangents: i.normalMap && i.vertexTangents,
            vertexColors: i.vertexColors,
            vertexAlphas: !0 === i.vertexColors && y.geometry.attributes.color && 4 === y.geometry.attributes.color.itemSize,
            vertexUvs: !!(i.map || i.bumpMap || i.normalMap || i.specularMap || i.alphaMap || i.emissiveMap || i.roughnessMap || i.metalnessMap || i.clearcoatMap || i.clearcoatRoughnessMap || i.clearcoatNormalMap || i.displacementMap || i.transmissionMap),
            uvsVertexOnly: !(i.map || i.bumpMap || i.normalMap || i.specularMap || i.alphaMap || i.emissiveMap || i.roughnessMap || i.metalnessMap || i.clearcoatNormalMap || i.transmissionMap || !i.displacementMap),
            fog: !!_,
            useFog: i.fog,
            fogExp2: _ && _.isFogExp2,
            flatShading: !!i.flatShading,
            sizeAttenuation: i.sizeAttenuation,
            logarithmicDepthBuffer: l,
            skinning: i.skinning && S > 0,
            maxBones: S,
            useVertexTexture: c,
            morphTargets: i.morphTargets,
            morphNormals: i.morphNormals,
            numDirLights: o.directional.length,
            numPointLights: o.point.length,
            numSpotLights: o.spot.length,
            numRectAreaLights: o.rectArea.length,
            numHemiLights: o.hemi.length,
            numDirLightShadows: o.directionalShadowMap.length,
            numPointLightShadows: o.pointShadowMap.length,
            numSpotLightShadows: o.spotShadowMap.length,
            numClippingPlanes: s.numPlanes,
            numClipIntersection: s.numIntersection,
            dithering: i.dithering,
            shadowMapEnabled: t.shadowMap.enabled && g.length > 0,
            shadowMapType: t.shadowMap.type,
            toneMapping: i.toneMapped ? t.toneMapping : Z,
            physicallyCorrectLights: t.physicallyCorrectLights,
            premultipliedAlpha: i.premultipliedAlpha,
            alphaTest: i.alphaTest,
            doubleSided: i.side === d,
            flipSided: i.side === p,
            depthPacking: void 0 !== i.depthPacking && i.depthPacking,
            index0AttributeName: i.index0AttributeName,
            extensionDerivatives: i.extensions && i.extensions.derivatives,
            extensionFragDepth: i.extensions && i.extensions.fragDepth,
            extensionDrawBuffers: i.extensions && i.extensions.drawBuffers,
            extensionShaderTextureLOD: i.extensions && i.extensions.shaderTextureLOD,
            rendererExtensionFragDepth: a || n.has("EXT_frag_depth"),
            rendererExtensionDrawBuffers: a || n.has("WEBGL_draw_buffers"),
            rendererExtensionShaderTextureLod: a || n.has("EXT_shader_texture_lod"),
            customProgramCacheKey: i.customProgramCacheKey()
          };
        },
        getProgramCacheKey: function getProgramCacheKey(e) {
          var n = [];
          if (e.shaderID ? n.push(e.shaderID) : (n.push(e.fragmentShader), n.push(e.vertexShader)), void 0 !== e.defines) for (var _t70 in e.defines) {
            n.push(_t70), n.push(e.defines[_t70]);
          }

          if (!1 === e.isRawShaderMaterial) {
            for (var _t71 = 0; _t71 < g.length; _t71++) {
              n.push(e[g[_t71]]);
            }

            n.push(t.outputEncoding), n.push(t.gammaFactor);
          }

          return n.push(e.customProgramCacheKey), n.join();
        },
        getUniforms: function getUniforms(t) {
          var e = f[t.type];
          var n;

          if (e) {
            var _t72 = rl[e];
            n = fs.clone(_t72.uniforms);
          } else n = t.uniforms;

          return n;
        },
        acquireProgram: function acquireProgram(e, n) {
          var r;

          for (var _t73 = 0, _i63 = o.length; _t73 < _i63; _t73++) {
            var _e62 = o[_t73];

            if (_e62.cacheKey === n) {
              ++(r = _e62).usedTimes;
              break;
            }
          }

          return void 0 === r && (r = new Qc(t, n, e, i), o.push(r)), r;
        },
        releaseProgram: function releaseProgram(t) {
          if (0 == --t.usedTimes) {
            var _e63 = o.indexOf(t);

            o[_e63] = o[o.length - 1], o.pop(), t.destroy();
          }
        },
        programs: o
      };
    }

    function $c() {
      var t = new WeakMap();
      return {
        get: function get(e) {
          var n = t.get(e);
          return void 0 === n && (n = {}, t.set(e, n)), n;
        },
        remove: function remove(e) {
          t.delete(e);
        },
        update: function update(e, n, r) {
          t.get(e)[n] = r;
        },
        dispose: function dispose() {
          t = new WeakMap();
        }
      };
    }

    function th(t, e) {
      return t.groupOrder !== e.groupOrder ? t.groupOrder - e.groupOrder : t.renderOrder !== e.renderOrder ? t.renderOrder - e.renderOrder : t.program !== e.program ? t.program.id - e.program.id : t.material.id !== e.material.id ? t.material.id - e.material.id : t.z !== e.z ? t.z - e.z : t.id - e.id;
    }

    function eh(t, e) {
      return t.groupOrder !== e.groupOrder ? t.groupOrder - e.groupOrder : t.renderOrder !== e.renderOrder ? t.renderOrder - e.renderOrder : t.z !== e.z ? e.z - t.z : t.id - e.id;
    }

    function nh(t) {
      var e = [];
      var n = 0;
      var r = [],
          i = [],
          s = {
        id: -1
      };

      function o(r, i, o, a, l, c) {
        var h = e[n];
        var u = t.get(o);
        return void 0 === h ? (h = {
          id: r.id,
          object: r,
          geometry: i,
          material: o,
          program: u.program || s,
          groupOrder: a,
          renderOrder: r.renderOrder,
          z: l,
          group: c
        }, e[n] = h) : (h.id = r.id, h.object = r, h.geometry = i, h.material = o, h.program = u.program || s, h.groupOrder = a, h.renderOrder = r.renderOrder, h.z = l, h.group = c), n++, h;
      }

      return {
        opaque: r,
        transparent: i,
        init: function init() {
          n = 0, r.length = 0, i.length = 0;
        },
        push: function push(t, e, n, s, a, l) {
          var c = o(t, e, n, s, a, l);
          (!0 === n.transparent ? i : r).push(c);
        },
        unshift: function unshift(t, e, n, s, a, l) {
          var c = o(t, e, n, s, a, l);
          (!0 === n.transparent ? i : r).unshift(c);
        },
        finish: function finish() {
          for (var _t74 = n, _r76 = e.length; _t74 < _r76; _t74++) {
            var _n82 = e[_t74];
            if (null === _n82.id) break;
            _n82.id = null, _n82.object = null, _n82.geometry = null, _n82.material = null, _n82.program = null, _n82.group = null;
          }
        },
        sort: function sort(t, e) {
          r.length > 1 && r.sort(t || th), i.length > 1 && i.sort(e || eh);
        }
      };
    }

    function rh(t) {
      var e = new WeakMap();
      return {
        get: function get(n, r) {
          var i;
          return !1 === e.has(n) ? (i = new nh(t), e.set(n, [i])) : r >= e.get(n).length ? (i = new nh(t), e.get(n).push(i)) : i = e.get(n)[r], i;
        },
        dispose: function dispose() {
          e = new WeakMap();
        }
      };
    }

    function ih() {
      var t = {};
      return {
        get: function get(e) {
          if (void 0 !== t[e.id]) return t[e.id];
          var n;

          switch (e.type) {
            case "DirectionalLight":
              n = {
                direction: new Yn(),
                color: new _i()
              };
              break;

            case "SpotLight":
              n = {
                position: new Yn(),
                direction: new Yn(),
                color: new _i(),
                distance: 0,
                coneCos: 0,
                penumbraCos: 0,
                decay: 0
              };
              break;

            case "PointLight":
              n = {
                position: new Yn(),
                color: new _i(),
                distance: 0,
                decay: 0
              };
              break;

            case "HemisphereLight":
              n = {
                direction: new Yn(),
                skyColor: new _i(),
                groundColor: new _i()
              };
              break;

            case "RectAreaLight":
              n = {
                color: new _i(),
                position: new Yn(),
                halfWidth: new Yn(),
                halfHeight: new Yn()
              };
          }

          return t[e.id] = n, n;
        }
      };
    }

    function sh() {
      var t = {};
      return {
        get: function get(e) {
          if (void 0 !== t[e.id]) return t[e.id];
          var n;

          switch (e.type) {
            case "DirectionalLight":
            case "SpotLight":
              n = {
                shadowBias: 0,
                shadowNormalBias: 0,
                shadowRadius: 1,
                shadowMapSize: new On()
              };
              break;

            case "PointLight":
              n = {
                shadowBias: 0,
                shadowNormalBias: 0,
                shadowRadius: 1,
                shadowMapSize: new On(),
                shadowCameraNear: 1,
                shadowCameraFar: 1e3
              };
          }

          return t[e.id] = n, n;
        }
      };
    }

    var oh = 0;

    function ah(t, e) {
      return (e.castShadow ? 1 : 0) - (t.castShadow ? 1 : 0);
    }

    function lh(t, e) {
      var n = new ih(),
          r = sh(),
          i = {
        version: 0,
        hash: {
          directionalLength: -1,
          pointLength: -1,
          spotLength: -1,
          rectAreaLength: -1,
          hemiLength: -1,
          numDirectionalShadows: -1,
          numPointShadows: -1,
          numSpotShadows: -1
        },
        ambient: [0, 0, 0],
        probe: [],
        directional: [],
        directionalShadow: [],
        directionalShadowMap: [],
        directionalShadowMatrix: [],
        spot: [],
        spotShadow: [],
        spotShadowMap: [],
        spotShadowMatrix: [],
        rectArea: [],
        rectAreaLTC1: null,
        rectAreaLTC2: null,
        point: [],
        pointShadow: [],
        pointShadowMap: [],
        pointShadowMatrix: [],
        hemi: []
      };

      for (var _l18 = 0; _l18 < 9; _l18++) {
        i.probe.push(new Yn());
      }

      var s = new Yn(),
          o = new Tr(),
          a = new Tr();
      return {
        setup: function setup(s) {
          var o = 0,
              a = 0,
              l = 0;

          for (var _t75 = 0; _t75 < 9; _t75++) {
            i.probe[_t75].set(0, 0, 0);
          }

          var c = 0,
              h = 0,
              u = 0,
              p = 0,
              d = 0,
              m = 0,
              f = 0,
              g = 0;
          s.sort(ah);

          for (var _t76 = 0, _e64 = s.length; _t76 < _e64; _t76++) {
            var _e65 = s[_t76],
                _x3 = _e65.color,
                _v2 = _e65.intensity,
                _y = _e65.distance,
                _2 = _e65.shadow && _e65.shadow.map ? _e65.shadow.map.texture : null;

            if (_e65.isAmbientLight) o += _x3.r * _v2, a += _x3.g * _v2, l += _x3.b * _v2;else if (_e65.isLightProbe) for (var _t77 = 0; _t77 < 9; _t77++) {
              i.probe[_t77].addScaledVector(_e65.sh.coefficients[_t77], _v2);
            } else if (_e65.isDirectionalLight) {
              var _t78 = n.get(_e65);

              if (_t78.color.copy(_e65.color).multiplyScalar(_e65.intensity), _e65.castShadow) {
                var _t79 = _e65.shadow,
                    _n83 = r.get(_e65);

                _n83.shadowBias = _t79.bias, _n83.shadowNormalBias = _t79.normalBias, _n83.shadowRadius = _t79.radius, _n83.shadowMapSize = _t79.mapSize, i.directionalShadow[c] = _n83, i.directionalShadowMap[c] = _2, i.directionalShadowMatrix[c] = _e65.shadow.matrix, m++;
              }

              i.directional[c] = _t78, c++;
            } else if (_e65.isSpotLight) {
              var _t80 = n.get(_e65);

              if (_t80.position.setFromMatrixPosition(_e65.matrixWorld), _t80.color.copy(_x3).multiplyScalar(_v2), _t80.distance = _y, _t80.coneCos = Math.cos(_e65.angle), _t80.penumbraCos = Math.cos(_e65.angle * (1 - _e65.penumbra)), _t80.decay = _e65.decay, _e65.castShadow) {
                var _t81 = _e65.shadow,
                    _n84 = r.get(_e65);

                _n84.shadowBias = _t81.bias, _n84.shadowNormalBias = _t81.normalBias, _n84.shadowRadius = _t81.radius, _n84.shadowMapSize = _t81.mapSize, i.spotShadow[u] = _n84, i.spotShadowMap[u] = _2, i.spotShadowMatrix[u] = _e65.shadow.matrix, g++;
              }

              i.spot[u] = _t80, u++;
            } else if (_e65.isRectAreaLight) {
              var _t82 = n.get(_e65);

              _t82.color.copy(_x3).multiplyScalar(_v2), _t82.halfWidth.set(.5 * _e65.width, 0, 0), _t82.halfHeight.set(0, .5 * _e65.height, 0), i.rectArea[p] = _t82, p++;
            } else if (_e65.isPointLight) {
              var _t83 = n.get(_e65);

              if (_t83.color.copy(_e65.color).multiplyScalar(_e65.intensity), _t83.distance = _e65.distance, _t83.decay = _e65.decay, _e65.castShadow) {
                var _t84 = _e65.shadow,
                    _n85 = r.get(_e65);

                _n85.shadowBias = _t84.bias, _n85.shadowNormalBias = _t84.normalBias, _n85.shadowRadius = _t84.radius, _n85.shadowMapSize = _t84.mapSize, _n85.shadowCameraNear = _t84.camera.near, _n85.shadowCameraFar = _t84.camera.far, i.pointShadow[h] = _n85, i.pointShadowMap[h] = _2, i.pointShadowMatrix[h] = _e65.shadow.matrix, f++;
              }

              i.point[h] = _t83, h++;
            } else if (_e65.isHemisphereLight) {
              var _t85 = n.get(_e65);

              _t85.skyColor.copy(_e65.color).multiplyScalar(_v2), _t85.groundColor.copy(_e65.groundColor).multiplyScalar(_v2), i.hemi[d] = _t85, d++;
            }
          }

          p > 0 && (e.isWebGL2 ? (i.rectAreaLTC1 = nl.LTC_FLOAT_1, i.rectAreaLTC2 = nl.LTC_FLOAT_2) : !0 === t.has("OES_texture_float_linear") ? (i.rectAreaLTC1 = nl.LTC_FLOAT_1, i.rectAreaLTC2 = nl.LTC_FLOAT_2) : !0 === t.has("OES_texture_half_float_linear") ? (i.rectAreaLTC1 = nl.LTC_HALF_1, i.rectAreaLTC2 = nl.LTC_HALF_2) : console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")), i.ambient[0] = o, i.ambient[1] = a, i.ambient[2] = l;
          var x = i.hash;
          x.directionalLength === c && x.pointLength === h && x.spotLength === u && x.rectAreaLength === p && x.hemiLength === d && x.numDirectionalShadows === m && x.numPointShadows === f && x.numSpotShadows === g || (i.directional.length = c, i.spot.length = u, i.rectArea.length = p, i.point.length = h, i.hemi.length = d, i.directionalShadow.length = m, i.directionalShadowMap.length = m, i.pointShadow.length = f, i.pointShadowMap.length = f, i.spotShadow.length = g, i.spotShadowMap.length = g, i.directionalShadowMatrix.length = m, i.pointShadowMatrix.length = f, i.spotShadowMatrix.length = g, x.directionalLength = c, x.pointLength = h, x.spotLength = u, x.rectAreaLength = p, x.hemiLength = d, x.numDirectionalShadows = m, x.numPointShadows = f, x.numSpotShadows = g, i.version = oh++);
        },
        setupView: function setupView(t, e) {
          var n = 0,
              r = 0,
              l = 0,
              c = 0,
              h = 0;
          var u = e.matrixWorldInverse;

          for (var _p7 = 0, _d8 = t.length; _p7 < _d8; _p7++) {
            var _e66 = t[_p7];

            if (_e66.isDirectionalLight) {
              var _t86 = i.directional[n];
              _t86.direction.setFromMatrixPosition(_e66.matrixWorld), s.setFromMatrixPosition(_e66.target.matrixWorld), _t86.direction.sub(s), _t86.direction.transformDirection(u), n++;
            } else if (_e66.isSpotLight) {
              var _t87 = i.spot[l];
              _t87.position.setFromMatrixPosition(_e66.matrixWorld), _t87.position.applyMatrix4(u), _t87.direction.setFromMatrixPosition(_e66.matrixWorld), s.setFromMatrixPosition(_e66.target.matrixWorld), _t87.direction.sub(s), _t87.direction.transformDirection(u), l++;
            } else if (_e66.isRectAreaLight) {
              var _t88 = i.rectArea[c];
              _t88.position.setFromMatrixPosition(_e66.matrixWorld), _t88.position.applyMatrix4(u), a.identity(), o.copy(_e66.matrixWorld), o.premultiply(u), a.extractRotation(o), _t88.halfWidth.set(.5 * _e66.width, 0, 0), _t88.halfHeight.set(0, .5 * _e66.height, 0), _t88.halfWidth.applyMatrix4(a), _t88.halfHeight.applyMatrix4(a), c++;
            } else if (_e66.isPointLight) {
              var _t89 = i.point[r];
              _t89.position.setFromMatrixPosition(_e66.matrixWorld), _t89.position.applyMatrix4(u), r++;
            } else if (_e66.isHemisphereLight) {
              var _t90 = i.hemi[h];
              _t90.direction.setFromMatrixPosition(_e66.matrixWorld), _t90.direction.transformDirection(u), _t90.direction.normalize(), h++;
            }
          }
        },
        state: i
      };
    }

    function ch(t, e) {
      var n = new lh(t, e),
          r = [],
          i = [];
      return {
        init: function init() {
          r.length = 0, i.length = 0;
        },
        state: {
          lightsArray: r,
          shadowsArray: i,
          lights: n
        },
        setupLights: function setupLights() {
          n.setup(r);
        },
        setupLightsView: function setupLightsView(t) {
          n.setupView(r, t);
        },
        pushLight: function pushLight(t) {
          r.push(t);
        },
        pushShadow: function pushShadow(t) {
          i.push(t);
        }
      };
    }

    function hh(t, e) {
      var n = new WeakMap();
      return {
        get: function get(r) {
          var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          var s;
          return !1 === n.has(r) ? (s = new ch(t, e), n.set(r, [s])) : i >= n.get(r).length ? (s = new ch(t, e), n.get(r).push(s)) : s = n.get(r)[i], s;
        },
        dispose: function dispose() {
          n = new WeakMap();
        }
      };
    }

    var uh = /*#__PURE__*/function (_di2) {
      _inherits(uh, _di2);

      var _super13 = _createSuper(uh);

      function uh(t) {
        var _this13;

        _classCallCheck(this, uh);

        _this13 = _super13.call(this), _this13.type = "MeshDepthMaterial", _this13.depthPacking = en, _this13.skinning = !1, _this13.morphTargets = !1, _this13.map = null, _this13.alphaMap = null, _this13.displacementMap = null, _this13.displacementScale = 1, _this13.displacementBias = 0, _this13.wireframe = !1, _this13.wireframeLinewidth = 1, _this13.fog = !1, _this13.setValues(t);
        return _this13;
      }

      _createClass(uh, [{
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(uh.prototype), "copy", this).call(this, t), this.depthPacking = t.depthPacking, this.skinning = t.skinning, this.morphTargets = t.morphTargets, this.map = t.map, this.alphaMap = t.alphaMap, this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this;
        }
      }]);

      return uh;
    }(di);

    exports.MeshDepthMaterial = uh, uh.prototype.isMeshDepthMaterial = !0;

    var ph = /*#__PURE__*/function (_di3) {
      _inherits(ph, _di3);

      var _super14 = _createSuper(ph);

      function ph(t) {
        var _this14;

        _classCallCheck(this, ph);

        _this14 = _super14.call(this), _this14.type = "MeshDistanceMaterial", _this14.referencePosition = new Yn(), _this14.nearDistance = 1, _this14.farDistance = 1e3, _this14.skinning = !1, _this14.morphTargets = !1, _this14.map = null, _this14.alphaMap = null, _this14.displacementMap = null, _this14.displacementScale = 1, _this14.displacementBias = 0, _this14.fog = !1, _this14.setValues(t);
        return _this14;
      }

      _createClass(ph, [{
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(ph.prototype), "copy", this).call(this, t), this.referencePosition.copy(t.referencePosition), this.nearDistance = t.nearDistance, this.farDistance = t.farDistance, this.skinning = t.skinning, this.morphTargets = t.morphTargets, this.map = t.map, this.alphaMap = t.alphaMap, this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this;
        }
      }]);

      return ph;
    }(di);

    exports.MeshDistanceMaterial = ph, ph.prototype.isMeshDistanceMaterial = !0;
    var dh = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\n\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean * HALF_SAMPLE_RATE;\n\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}",
        mh = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";

    function fh(t, e, n) {
      var r = new Rs();
      var i = new On(),
          s = new On(),
          o = new Wn(),
          a = [],
          c = [],
          m = {},
          f = n.maxTextureSize,
          x = {
        0: p,
        1: u,
        2: d
      },
          v = new vs({
        defines: {
          SAMPLE_RATE: .25,
          HALF_SAMPLE_RATE: 1 / 8
        },
        uniforms: {
          shadow_pass: {
            value: null
          },
          resolution: {
            value: new On()
          },
          radius: {
            value: 4
          }
        },
        vertexShader: mh,
        fragmentShader: dh
      }),
          y = v.clone();
      y.defines.HORIZONTAL_PASS = 1;

      var _ = new ji();

      _.setAttribute("position", new Si(new Float32Array([-1, -1, .5, 3, -1, .5, -1, 3, .5]), 3));

      var b = new cs(_, v),
          w = this;

      function M(n, r) {
        var i = e.update(b);
        v.uniforms.shadow_pass.value = n.map.texture, v.uniforms.resolution.value = n.mapSize, v.uniforms.radius.value = n.radius, t.setRenderTarget(n.mapPass), t.clear(), t.renderBufferDirect(r, null, i, v, b, null), y.uniforms.shadow_pass.value = n.mapPass.texture, y.uniforms.resolution.value = n.mapSize, y.uniforms.radius.value = n.radius, t.setRenderTarget(n.map), t.clear(), t.renderBufferDirect(r, null, i, y, b, null);
      }

      function S(t, e, n) {
        var r = t << 0 | e << 1 | n << 2;
        var i = a[r];
        return void 0 === i && (i = new uh({
          depthPacking: nn,
          morphTargets: t,
          skinning: e
        }), a[r] = i), i;
      }

      function T(t, e, n) {
        var r = t << 0 | e << 1 | n << 2;
        var i = c[r];
        return void 0 === i && (i = new ph({
          morphTargets: t,
          skinning: e
        }), c[r] = i), i;
      }

      function E(e, n, r, i, s, o, a) {
        var l = null,
            c = S,
            u = e.customDepthMaterial;

        if (!0 === i.isPointLight && (c = T, u = e.customDistanceMaterial), void 0 === u) {
          var _t91 = !1;

          !0 === r.morphTargets && (_t91 = n.morphAttributes && n.morphAttributes.position && n.morphAttributes.position.length > 0);

          var _i64 = !1;

          !0 === e.isSkinnedMesh && (!0 === r.skinning ? _i64 = !0 : console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:", e)), l = c(_t91, _i64, !0 === e.isInstancedMesh);
        } else l = u;

        if (t.localClippingEnabled && !0 === r.clipShadows && 0 !== r.clippingPlanes.length) {
          var _t92 = l.uuid,
              _e67 = r.uuid;
          var _n86 = m[_t92];
          void 0 === _n86 && (_n86 = {}, m[_t92] = _n86);
          var _i65 = _n86[_e67];
          void 0 === _i65 && (_i65 = l.clone(), _n86[_e67] = _i65), l = _i65;
        }

        return l.visible = r.visible, l.wireframe = r.wireframe, l.side = a === h ? null !== r.shadowSide ? r.shadowSide : r.side : null !== r.shadowSide ? r.shadowSide : x[r.side], l.clipShadows = r.clipShadows, l.clippingPlanes = r.clippingPlanes, l.clipIntersection = r.clipIntersection, l.wireframeLinewidth = r.wireframeLinewidth, l.linewidth = r.linewidth, !0 === i.isPointLight && !0 === l.isMeshDistanceMaterial && (l.referencePosition.setFromMatrixPosition(i.matrixWorld), l.nearDistance = s, l.farDistance = o), l;
      }

      function A(n, i, s, o, a) {
        if (!1 === n.visible) return;

        if (n.layers.test(i.layers) && (n.isMesh || n.isLine || n.isPoints) && (n.castShadow || n.receiveShadow && a === h) && (!n.frustumCulled || r.intersectsObject(n))) {
          n.modelViewMatrix.multiplyMatrices(s.matrixWorldInverse, n.matrixWorld);

          var _r77 = e.update(n),
              _i66 = n.material;

          if (Array.isArray(_i66)) {
            var _e68 = _r77.groups;

            for (var _l19 = 0, _c12 = _e68.length; _l19 < _c12; _l19++) {
              var _c13 = _e68[_l19],
                  _h7 = _i66[_c13.materialIndex];

              if (_h7 && _h7.visible) {
                var _e69 = E(n, _r77, _h7, o, s.near, s.far, a);

                t.renderBufferDirect(s, null, _r77, _e69, n, _c13);
              }
            }
          } else if (_i66.visible) {
            var _e70 = E(n, _r77, _i66, o, s.near, s.far, a);

            t.renderBufferDirect(s, null, _r77, _e70, n, null);
          }
        }

        var l = n.children;

        for (var _t93 = 0, _e71 = l.length; _t93 < _e71; _t93++) {
          A(l[_t93], i, s, o, a);
        }
      }

      this.enabled = !1, this.autoUpdate = !0, this.needsUpdate = !1, this.type = l, this.render = function (e, n, a) {
        if (!1 === w.enabled) return;
        if (!1 === w.autoUpdate && !1 === w.needsUpdate) return;
        if (0 === e.length) return;
        var l = t.getRenderTarget(),
            c = t.getActiveCubeFace(),
            u = t.getActiveMipmapLevel(),
            p = t.state;
        p.setBlending(g), p.buffers.color.setClear(1, 1, 1, 1), p.buffers.depth.setTest(!0), p.setScissorTest(!1);

        for (var _d9 = 0, _m4 = e.length; _d9 < _m4; _d9++) {
          var _l20 = e[_d9],
              _c14 = _l20.shadow;

          if (void 0 === _c14) {
            console.warn("THREE.WebGLShadowMap:", _l20, "has no shadow.");
            continue;
          }

          if (!1 === _c14.autoUpdate && !1 === _c14.needsUpdate) continue;
          i.copy(_c14.mapSize);

          var _u10 = _c14.getFrameExtents();

          if (i.multiply(_u10), s.copy(_c14.mapSize), (i.x > f || i.y > f) && (i.x > f && (s.x = Math.floor(f / _u10.x), i.x = s.x * _u10.x, _c14.mapSize.x = s.x), i.y > f && (s.y = Math.floor(f / _u10.y), i.y = s.y * _u10.y, _c14.mapSize.y = s.y)), null === _c14.map && !_c14.isPointLightShadow && this.type === h) {
            var _t94 = {
              minFilter: gt,
              magFilter: gt,
              format: Nt
            };
            _c14.map = new jn(i.x, i.y, _t94), _c14.map.texture.name = _l20.name + ".shadowMap", _c14.mapPass = new jn(i.x, i.y, _t94), _c14.camera.updateProjectionMatrix();
          }

          if (null === _c14.map) {
            var _t95 = {
              minFilter: ut,
              magFilter: ut,
              format: Nt
            };
            _c14.map = new jn(i.x, i.y, _t95), _c14.map.texture.name = _l20.name + ".shadowMap", _c14.camera.updateProjectionMatrix();
          }

          t.setRenderTarget(_c14.map), t.clear();

          var _m5 = _c14.getViewportCount();

          for (var _t96 = 0; _t96 < _m5; _t96++) {
            var _e72 = _c14.getViewport(_t96);

            o.set(s.x * _e72.x, s.y * _e72.y, s.x * _e72.z, s.y * _e72.w), p.viewport(o), _c14.updateMatrices(_l20, _t96), r = _c14.getFrustum(), A(n, a, _c14.camera, _l20, this.type);
          }

          _c14.isPointLightShadow || this.type !== h || M(_c14, a), _c14.needsUpdate = !1;
        }

        w.needsUpdate = !1, t.setRenderTarget(l, c, u);
      };
    }

    function gh(t, e, n) {
      var _vt, _yt;

      var o = n.isWebGL2;
      var a = new function () {
        var e = !1;
        var n = new Wn();
        var r = null;
        var i = new Wn(0, 0, 0, 0);
        return {
          setMask: function setMask(n) {
            r === n || e || (t.colorMask(n, n, n, n), r = n);
          },
          setLocked: function setLocked(t) {
            e = t;
          },
          setClear: function setClear(e, r, s, o, a) {
            !0 === a && (e *= o, r *= o, s *= o), n.set(e, r, s, o), !1 === i.equals(n) && (t.clearColor(e, r, s, o), i.copy(n));
          },
          reset: function reset() {
            e = !1, r = null, i.set(-1, 0, 0, 0);
          }
        };
      }(),
          l = new function () {
        var e = !1,
            n = null,
            r = null,
            i = null;
        return {
          setTest: function setTest(t) {
            t ? gt(2929) : xt(2929);
          },
          setMask: function setMask(r) {
            n === r || e || (t.depthMask(r), n = r);
          },
          setFunc: function setFunc(e) {
            if (r !== e) {
              if (e) switch (e) {
                case z:
                  t.depthFunc(512);
                  break;

                case G:
                  t.depthFunc(519);
                  break;

                case H:
                  t.depthFunc(513);
                  break;

                case U:
                  t.depthFunc(515);
                  break;

                case k:
                  t.depthFunc(514);
                  break;

                case V:
                  t.depthFunc(518);
                  break;

                case W:
                  t.depthFunc(516);
                  break;

                case j:
                  t.depthFunc(517);
                  break;

                default:
                  t.depthFunc(515);
              } else t.depthFunc(515);
              r = e;
            }
          },
          setLocked: function setLocked(t) {
            e = t;
          },
          setClear: function setClear(e) {
            i !== e && (t.clearDepth(e), i = e);
          },
          reset: function reset() {
            e = !1, n = null, r = null, i = null;
          }
        };
      }(),
          c = new function () {
        var e = !1,
            n = null,
            r = null,
            i = null,
            s = null,
            o = null,
            a = null,
            l = null,
            c = null;
        return {
          setTest: function setTest(t) {
            e || (t ? gt(2960) : xt(2960));
          },
          setMask: function setMask(r) {
            n === r || e || (t.stencilMask(r), n = r);
          },
          setFunc: function setFunc(e, n, o) {
            r === e && i === n && s === o || (t.stencilFunc(e, n, o), r = e, i = n, s = o);
          },
          setOp: function setOp(e, n, r) {
            o === e && a === n && l === r || (t.stencilOp(e, n, r), o = e, a = n, l = r);
          },
          setLocked: function setLocked(t) {
            e = t;
          },
          setClear: function setClear(e) {
            c !== e && (t.clearStencil(e), c = e);
          },
          reset: function reset() {
            e = !1, n = null, r = null, i = null, s = null, o = null, a = null, l = null, c = null;
          }
        };
      }();
      var h = {},
          u = null,
          m = {},
          f = null,
          q = !1,
          X = null,
          Y = null,
          Z = null,
          J = null,
          Q = null,
          K = null,
          $ = null,
          tt = !1,
          et = null,
          nt = null,
          rt = null,
          it = null,
          st = null;
      var ot = t.getParameter(35661);
      var at = !1,
          lt = 0;
      var ct = t.getParameter(7938);
      -1 !== ct.indexOf("WebGL") ? (lt = parseFloat(/^WebGL (\d)/.exec(ct)[1]), at = lt >= 1) : -1 !== ct.indexOf("OpenGL ES") && (lt = parseFloat(/^OpenGL ES (\d)/.exec(ct)[1]), at = lt >= 2);
      var ht = null,
          ut = {};
      var pt = new Wn(0, 0, t.canvas.width, t.canvas.height),
          dt = new Wn(0, 0, t.canvas.width, t.canvas.height);

      function mt(e, n, r) {
        var i = new Uint8Array(4),
            s = t.createTexture();
        t.bindTexture(e, s), t.texParameteri(e, 10241, 9728), t.texParameteri(e, 10240, 9728);

        for (var _o23 = 0; _o23 < r; _o23++) {
          t.texImage2D(n + _o23, 0, 6408, 1, 1, 0, 6408, 5121, i);
        }

        return s;
      }

      var ft = {};

      function gt(e) {
        !0 !== h[e] && (t.enable(e), h[e] = !0);
      }

      function xt(e) {
        !1 !== h[e] && (t.disable(e), h[e] = !1);
      }

      ft[3553] = mt(3553, 3553, 1), ft[34067] = mt(34067, 34069, 6), a.setClear(0, 0, 0, 1), l.setClear(1), c.setClear(0), gt(2929), l.setFunc(U), bt(!1), wt(i), gt(2884), _t(g);
      var vt = (_vt = {}, _defineProperty(_vt, w, 32774), _defineProperty(_vt, M, 32778), _defineProperty(_vt, S, 32779), _vt);
      if (o) vt[T] = 32775, vt[E] = 32776;else {
        var _t97 = e.get("EXT_blend_minmax");

        null !== _t97 && (vt[T] = _t97.MIN_EXT, vt[E] = _t97.MAX_EXT);
      }
      var yt = (_yt = {}, _defineProperty(_yt, A, 0), _defineProperty(_yt, L, 1), _defineProperty(_yt, R, 768), _defineProperty(_yt, P, 770), _defineProperty(_yt, O, 776), _defineProperty(_yt, N, 774), _defineProperty(_yt, I, 772), _defineProperty(_yt, C, 769), _defineProperty(_yt, D, 771), _defineProperty(_yt, F, 775), _defineProperty(_yt, B, 773), _yt);

      function _t(e, n, r, i, s, o, a, l) {
        if (e !== g) {
          if (!1 === q && (gt(3042), q = !0), e === b) s = s || n, o = o || r, a = a || i, n === Y && s === Q || (t.blendEquationSeparate(vt[n], vt[s]), Y = n, Q = s), r === Z && i === J && o === K && a === $ || (t.blendFuncSeparate(yt[r], yt[i], yt[o], yt[a]), Z = r, J = i, K = o, $ = a), X = e, tt = null;else if (e !== X || l !== tt) {
            if (Y === w && Q === w || (t.blendEquation(32774), Y = w, Q = w), l) switch (e) {
              case x:
                t.blendFuncSeparate(1, 771, 1, 771);
                break;

              case v:
                t.blendFunc(1, 1);
                break;

              case y:
                t.blendFuncSeparate(0, 0, 769, 771);
                break;

              case _:
                t.blendFuncSeparate(0, 768, 0, 770);
                break;

              default:
                console.error("THREE.WebGLState: Invalid blending: ", e);
            } else switch (e) {
              case x:
                t.blendFuncSeparate(770, 771, 1, 771);
                break;

              case v:
                t.blendFunc(770, 1);
                break;

              case y:
                t.blendFunc(0, 769);
                break;

              case _:
                t.blendFunc(0, 768);
                break;

              default:
                console.error("THREE.WebGLState: Invalid blending: ", e);
            }
            Z = null, J = null, K = null, $ = null, X = e, tt = l;
          }
        } else !0 === q && (xt(3042), q = !1);
      }

      function bt(e) {
        et !== e && (e ? t.frontFace(2304) : t.frontFace(2305), et = e);
      }

      function wt(e) {
        e !== r ? (gt(2884), e !== nt && (e === i ? t.cullFace(1029) : e === s ? t.cullFace(1028) : t.cullFace(1032))) : xt(2884), nt = e;
      }

      function Mt(e, n, r) {
        e ? (gt(32823), it === n && st === r || (t.polygonOffset(n, r), it = n, st = r)) : xt(32823);
      }

      function St(e) {
        void 0 === e && (e = 33984 + ot - 1), ht !== e && (t.activeTexture(e), ht = e);
      }

      return {
        buffers: {
          color: a,
          depth: l,
          stencil: c
        },
        enable: gt,
        disable: xt,
        bindFramebuffer: function bindFramebuffer(e, n) {
          null === n && null !== u && (n = u), m[e] !== n && (t.bindFramebuffer(e, n), m[e] = n);
        },
        bindXRFramebuffer: function bindXRFramebuffer(e) {
          e !== u && (t.bindFramebuffer(36160, e), u = e);
        },
        useProgram: function useProgram(e) {
          return f !== e && (t.useProgram(e), f = e, !0);
        },
        setBlending: _t,
        setMaterial: function setMaterial(t, e) {
          t.side === d ? xt(2884) : gt(2884);
          var n = t.side === p;
          e && (n = !n), bt(n), t.blending === x && !1 === t.transparent ? _t(g) : _t(t.blending, t.blendEquation, t.blendSrc, t.blendDst, t.blendEquationAlpha, t.blendSrcAlpha, t.blendDstAlpha, t.premultipliedAlpha), l.setFunc(t.depthFunc), l.setTest(t.depthTest), l.setMask(t.depthWrite), a.setMask(t.colorWrite);
          var r = t.stencilWrite;
          c.setTest(r), r && (c.setMask(t.stencilWriteMask), c.setFunc(t.stencilFunc, t.stencilRef, t.stencilFuncMask), c.setOp(t.stencilFail, t.stencilZFail, t.stencilZPass)), Mt(t.polygonOffset, t.polygonOffsetFactor, t.polygonOffsetUnits), !0 === t.alphaToCoverage ? gt(32926) : xt(32926);
        },
        setFlipSided: bt,
        setCullFace: wt,
        setLineWidth: function setLineWidth(e) {
          e !== rt && (at && t.lineWidth(e), rt = e);
        },
        setPolygonOffset: Mt,
        setScissorTest: function setScissorTest(t) {
          t ? gt(3089) : xt(3089);
        },
        activeTexture: St,
        bindTexture: function bindTexture(e, n) {
          null === ht && St();
          var r = ut[ht];
          void 0 === r && (r = {
            type: void 0,
            texture: void 0
          }, ut[ht] = r), r.type === e && r.texture === n || (t.bindTexture(e, n || ft[e]), r.type = e, r.texture = n);
        },
        unbindTexture: function unbindTexture() {
          var e = ut[ht];
          void 0 !== e && void 0 !== e.type && (t.bindTexture(e.type, null), e.type = void 0, e.texture = void 0);
        },
        compressedTexImage2D: function compressedTexImage2D() {
          try {
            t.compressedTexImage2D.apply(t, arguments);
          } catch (e) {
            console.error("THREE.WebGLState:", e);
          }
        },
        texImage2D: function texImage2D() {
          try {
            t.texImage2D.apply(t, arguments);
          } catch (e) {
            console.error("THREE.WebGLState:", e);
          }
        },
        texImage3D: function texImage3D() {
          try {
            t.texImage3D.apply(t, arguments);
          } catch (e) {
            console.error("THREE.WebGLState:", e);
          }
        },
        scissor: function scissor(e) {
          !1 === pt.equals(e) && (t.scissor(e.x, e.y, e.z, e.w), pt.copy(e));
        },
        viewport: function viewport(e) {
          !1 === dt.equals(e) && (t.viewport(e.x, e.y, e.z, e.w), dt.copy(e));
        },
        reset: function reset() {
          t.disable(3042), t.disable(2884), t.disable(2929), t.disable(32823), t.disable(3089), t.disable(2960), t.disable(32926), t.blendEquation(32774), t.blendFunc(1, 0), t.blendFuncSeparate(1, 0, 1, 0), t.colorMask(!0, !0, !0, !0), t.clearColor(0, 0, 0, 0), t.depthMask(!0), t.depthFunc(513), t.clearDepth(1), t.stencilMask(4294967295), t.stencilFunc(519, 0, 4294967295), t.stencilOp(7680, 7680, 7680), t.clearStencil(0), t.cullFace(1029), t.frontFace(2305), t.polygonOffset(0, 0), t.activeTexture(33984), t.bindFramebuffer(36160, null), !0 === o && (t.bindFramebuffer(36009, null), t.bindFramebuffer(36008, null)), t.useProgram(null), t.lineWidth(1), t.scissor(0, 0, t.canvas.width, t.canvas.height), t.viewport(0, 0, t.canvas.width, t.canvas.height), h = {}, ht = null, ut = {}, u = null, m = {}, f = null, q = !1, X = null, Y = null, Z = null, J = null, Q = null, K = null, $ = null, tt = !1, et = null, nt = null, rt = null, it = null, st = null, pt.set(0, 0, t.canvas.width, t.canvas.height), dt.set(0, 0, t.canvas.width, t.canvas.height), a.reset(), l.reset(), c.reset();
        }
      };
    }

    function xh(t, e, n, r, i, s, o) {
      var _A, _L;

      var a = i.isWebGL2,
          l = i.maxTextures,
          c = i.maxCubemapSize,
          h = i.maxTextureSize,
          u = i.maxSamples,
          p = new WeakMap();
      var d,
          m = !1;

      try {
        m = "undefined" != typeof OffscreenCanvas && null !== new OffscreenCanvas(1, 1).getContext("2d");
      } catch (z) {}

      function f(t, e) {
        return m ? new OffscreenCanvas(t, e) : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
      }

      function g(t, e, n, r) {
        var i = 1;

        if ((t.width > r || t.height > r) && (i = r / Math.max(t.width, t.height)), i < 1 || !0 === e) {
          if ("undefined" != typeof HTMLImageElement && t instanceof HTMLImageElement || "undefined" != typeof HTMLCanvasElement && t instanceof HTMLCanvasElement || "undefined" != typeof ImageBitmap && t instanceof ImageBitmap) {
            var _r78 = e ? Fn.floorPowerOfTwo : Math.floor,
                _s31 = _r78(i * t.width),
                _o24 = _r78(i * t.height);

            void 0 === d && (d = f(_s31, _o24));

            var _a15 = n ? f(_s31, _o24) : d;

            return _a15.width = _s31, _a15.height = _o24, _a15.getContext("2d").drawImage(t, 0, 0, _s31, _o24), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + t.width + "x" + t.height + ") to (" + _s31 + "x" + _o24 + ")."), _a15;
          }

          return "data" in t && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + t.width + "x" + t.height + ")."), t;
        }

        return t;
      }

      function x(t) {
        return Fn.isPowerOfTwo(t.width) && Fn.isPowerOfTwo(t.height);
      }

      function v(t, e) {
        return t.generateMipmaps && e && t.minFilter !== ut && t.minFilter !== gt;
      }

      function y(e, n, i, s) {
        t.generateMipmap(e), r.get(n).__maxMipLevel = Math.log2(Math.max(i, s));
      }

      function _(n, r, i) {
        if (!1 === a) return r;

        if (null !== n) {
          if (void 0 !== t[n]) return t[n];
          console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + n + "'");
        }

        var s = r;
        return 6403 === r && (5126 === i && (s = 33326), 5131 === i && (s = 33325), 5121 === i && (s = 33321)), 6407 === r && (5126 === i && (s = 34837), 5131 === i && (s = 34843), 5121 === i && (s = 32849)), 6408 === r && (5126 === i && (s = 34836), 5131 === i && (s = 34842), 5121 === i && (s = 32856)), 33325 !== s && 33326 !== s && 34842 !== s && 34836 !== s || e.get("EXT_color_buffer_float"), s;
      }

      function b(t) {
        return t === ut || t === pt || t === mt ? 9728 : 9729;
      }

      function w(e) {
        var n = e.target;
        n.removeEventListener("dispose", w), function (e) {
          var n = r.get(e);
          if (void 0 === n.__webglInit) return;
          t.deleteTexture(n.__webglTexture), r.remove(e);
        }(n), n.isVideoTexture && p.delete(n), o.memory.textures--;
      }

      function M(e) {
        var n = e.target;
        n.removeEventListener("dispose", M), function (e) {
          var n = e.texture,
              i = r.get(e),
              s = r.get(n);
          if (!e) return;
          void 0 !== s.__webglTexture && t.deleteTexture(s.__webglTexture);
          e.depthTexture && e.depthTexture.dispose();
          if (e.isWebGLCubeRenderTarget) for (var _r79 = 0; _r79 < 6; _r79++) {
            t.deleteFramebuffer(i.__webglFramebuffer[_r79]), i.__webglDepthbuffer && t.deleteRenderbuffer(i.__webglDepthbuffer[_r79]);
          } else t.deleteFramebuffer(i.__webglFramebuffer), i.__webglDepthbuffer && t.deleteRenderbuffer(i.__webglDepthbuffer), i.__webglMultisampledFramebuffer && t.deleteFramebuffer(i.__webglMultisampledFramebuffer), i.__webglColorRenderbuffer && t.deleteRenderbuffer(i.__webglColorRenderbuffer), i.__webglDepthRenderbuffer && t.deleteRenderbuffer(i.__webglDepthRenderbuffer);
          r.remove(n), r.remove(e);
        }(n), o.memory.textures--;
      }

      var S = 0;

      function T(t, e) {
        var i = r.get(t);

        if (t.isVideoTexture && function (t) {
          var e = o.render.frame;
          p.get(t) !== e && (p.set(t, e), t.update());
        }(t), t.version > 0 && i.__version !== t.version) {
          var _n87 = t.image;
          if (void 0 === _n87) console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else {
            if (!1 !== _n87.complete) return void P(i, t, e);
            console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
          }
        }

        n.activeTexture(33984 + e), n.bindTexture(3553, i.__webglTexture);
      }

      function E(e, i) {
        var o = r.get(e);
        e.version > 0 && o.__version !== e.version ? function (e, r, i) {
          if (6 !== r.image.length) return;
          C(e, r), n.activeTexture(33984 + i), n.bindTexture(34067, e.__webglTexture), t.pixelStorei(37440, r.flipY), t.pixelStorei(37441, r.premultiplyAlpha), t.pixelStorei(3317, r.unpackAlignment), t.pixelStorei(37443, 0);
          var o = r && (r.isCompressedTexture || r.image[0].isCompressedTexture),
              l = r.image[0] && r.image[0].isDataTexture,
              h = [];

          for (var _t98 = 0; _t98 < 6; _t98++) {
            h[_t98] = o || l ? l ? r.image[_t98].image : r.image[_t98] : g(r.image[_t98], !1, !0, c);
          }

          var u = h[0],
              p = x(u) || a,
              d = s.convert(r.format),
              m = s.convert(r.type),
              f = _(r.internalFormat, d, m);

          var b;

          if (R(34067, r, p), o) {
            for (var _t99 = 0; _t99 < 6; _t99++) {
              b = h[_t99].mipmaps;

              for (var _e73 = 0; _e73 < b.length; _e73++) {
                var _i67 = b[_e73];
                r.format !== Nt && r.format !== Bt ? null !== d ? n.compressedTexImage2D(34069 + _t99, _e73, f, _i67.width, _i67.height, 0, _i67.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : n.texImage2D(34069 + _t99, _e73, f, _i67.width, _i67.height, 0, d, m, _i67.data);
              }
            }

            e.__maxMipLevel = b.length - 1;
          } else {
            b = r.mipmaps;

            for (var _t100 = 0; _t100 < 6; _t100++) {
              if (l) {
                n.texImage2D(34069 + _t100, 0, f, h[_t100].width, h[_t100].height, 0, d, m, h[_t100].data);

                for (var _e74 = 0; _e74 < b.length; _e74++) {
                  var _r80 = b[_e74],
                      _i68 = _r80.image[_t100].image;
                  n.texImage2D(34069 + _t100, _e74 + 1, f, _i68.width, _i68.height, 0, d, m, _i68.data);
                }
              } else {
                n.texImage2D(34069 + _t100, 0, f, d, m, h[_t100]);

                for (var _e75 = 0; _e75 < b.length; _e75++) {
                  var _r81 = b[_e75];
                  n.texImage2D(34069 + _t100, _e75 + 1, f, d, m, _r81.image[_t100]);
                }
              }
            }

            e.__maxMipLevel = b.length;
          }

          v(r, p) && y(34067, r, u.width, u.height);
          e.__version = r.version, r.onUpdate && r.onUpdate(r);
        }(o, e, i) : (n.activeTexture(33984 + i), n.bindTexture(34067, o.__webglTexture));
      }

      var A = (_A = {}, _defineProperty(_A, lt, 10497), _defineProperty(_A, ct, 33071), _defineProperty(_A, ht, 33648), _A),
          L = (_L = {}, _defineProperty(_L, ut, 9728), _defineProperty(_L, pt, 9984), _defineProperty(_L, mt, 9986), _defineProperty(_L, gt, 9729), _defineProperty(_L, xt, 9985), _defineProperty(_L, yt, 9987), _L);

      function R(n, s, o) {
        if (o ? (t.texParameteri(n, 10242, A[s.wrapS]), t.texParameteri(n, 10243, A[s.wrapT]), 32879 !== n && 35866 !== n || t.texParameteri(n, 32882, A[s.wrapR]), t.texParameteri(n, 10240, L[s.magFilter]), t.texParameteri(n, 10241, L[s.minFilter])) : (t.texParameteri(n, 10242, 33071), t.texParameteri(n, 10243, 33071), 32879 !== n && 35866 !== n || t.texParameteri(n, 32882, 33071), s.wrapS === ct && s.wrapT === ct || console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."), t.texParameteri(n, 10240, b(s.magFilter)), t.texParameteri(n, 10241, b(s.minFilter)), s.minFilter !== ut && s.minFilter !== gt && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")), !0 === e.has("EXT_texture_filter_anisotropic")) {
          var _o25 = e.get("EXT_texture_filter_anisotropic");

          if (s.type === At && !1 === e.has("OES_texture_float_linear")) return;
          if (!1 === a && s.type === Lt && !1 === e.has("OES_texture_half_float_linear")) return;
          (s.anisotropy > 1 || r.get(s).__currentAnisotropy) && (t.texParameterf(n, _o25.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(s.anisotropy, i.getMaxAnisotropy())), r.get(s).__currentAnisotropy = s.anisotropy);
        }
      }

      function C(e, n) {
        void 0 === e.__webglInit && (e.__webglInit = !0, n.addEventListener("dispose", w), e.__webglTexture = t.createTexture(), o.memory.textures++);
      }

      function P(e, r, i) {
        var o = 3553;
        r.isDataTexture2DArray && (o = 35866), r.isDataTexture3D && (o = 32879), C(e, r), n.activeTexture(33984 + i), n.bindTexture(o, e.__webglTexture), t.pixelStorei(37440, r.flipY), t.pixelStorei(37441, r.premultiplyAlpha), t.pixelStorei(3317, r.unpackAlignment), t.pixelStorei(37443, 0);

        var l = function (t) {
          return !a && (t.wrapS !== ct || t.wrapT !== ct || t.minFilter !== ut && t.minFilter !== gt);
        }(r) && !1 === x(r.image),
            c = g(r.image, l, !1, h),
            u = x(c) || a,
            p = s.convert(r.format);

        var d,
            m = s.convert(r.type),
            f = _(r.internalFormat, p, m);

        R(o, r, u);
        var b = r.mipmaps;
        if (r.isDepthTexture) f = 6402, a ? f = r.type === At ? 36012 : r.type === Et ? 33190 : r.type === Dt ? 35056 : 33189 : r.type === At && console.error("WebGLRenderer: Floating point depth texture requires WebGL2."), r.format === Gt && 6402 === f && r.type !== St && r.type !== Et && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), r.type = St, m = s.convert(r.type)), r.format === Ht && 6402 === f && (f = 34041, r.type !== Dt && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), r.type = Dt, m = s.convert(r.type))), n.texImage2D(3553, 0, f, c.width, c.height, 0, p, m, null);else if (r.isDataTexture) {
          if (b.length > 0 && u) {
            for (var _t101 = 0, _e76 = b.length; _t101 < _e76; _t101++) {
              d = b[_t101], n.texImage2D(3553, _t101, f, d.width, d.height, 0, p, m, d.data);
            }

            r.generateMipmaps = !1, e.__maxMipLevel = b.length - 1;
          } else n.texImage2D(3553, 0, f, c.width, c.height, 0, p, m, c.data), e.__maxMipLevel = 0;
        } else if (r.isCompressedTexture) {
          for (var _t102 = 0, _e77 = b.length; _t102 < _e77; _t102++) {
            d = b[_t102], r.format !== Nt && r.format !== Bt ? null !== p ? n.compressedTexImage2D(3553, _t102, f, d.width, d.height, 0, d.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : n.texImage2D(3553, _t102, f, d.width, d.height, 0, p, m, d.data);
          }

          e.__maxMipLevel = b.length - 1;
        } else if (r.isDataTexture2DArray) n.texImage3D(35866, 0, f, c.width, c.height, c.depth, 0, p, m, c.data), e.__maxMipLevel = 0;else if (r.isDataTexture3D) n.texImage3D(32879, 0, f, c.width, c.height, c.depth, 0, p, m, c.data), e.__maxMipLevel = 0;else if (b.length > 0 && u) {
          for (var _t103 = 0, _e78 = b.length; _t103 < _e78; _t103++) {
            d = b[_t103], n.texImage2D(3553, _t103, f, p, m, d);
          }

          r.generateMipmaps = !1, e.__maxMipLevel = b.length - 1;
        } else n.texImage2D(3553, 0, f, p, m, c), e.__maxMipLevel = 0;
        v(r, u) && y(o, r, c.width, c.height), e.__version = r.version, r.onUpdate && r.onUpdate(r);
      }

      function D(e, i, o, a) {
        var l = i.texture,
            c = s.convert(l.format),
            h = s.convert(l.type),
            u = _(l.internalFormat, c, h);

        32879 === a || 35866 === a ? n.texImage3D(a, 0, u, i.width, i.height, i.depth, 0, c, h, null) : n.texImage2D(a, 0, u, i.width, i.height, 0, c, h, null), n.bindFramebuffer(36160, e), t.framebufferTexture2D(36160, o, a, r.get(l).__webglTexture, 0), n.bindFramebuffer(36160, null);
      }

      function I(e, n, r) {
        if (t.bindRenderbuffer(36161, e), n.depthBuffer && !n.stencilBuffer) {
          var _i69 = 33189;

          if (r) {
            var _e79 = n.depthTexture;
            _e79 && _e79.isDepthTexture && (_e79.type === At ? _i69 = 36012 : _e79.type === Et && (_i69 = 33190));

            var _r82 = N(n);

            t.renderbufferStorageMultisample(36161, _r82, _i69, n.width, n.height);
          } else t.renderbufferStorage(36161, _i69, n.width, n.height);

          t.framebufferRenderbuffer(36160, 36096, 36161, e);
        } else if (n.depthBuffer && n.stencilBuffer) {
          if (r) {
            var _e80 = N(n);

            t.renderbufferStorageMultisample(36161, _e80, 35056, n.width, n.height);
          } else t.renderbufferStorage(36161, 34041, n.width, n.height);

          t.framebufferRenderbuffer(36160, 33306, 36161, e);
        } else {
          var _e81 = n.texture,
              _i70 = s.convert(_e81.format),
              _o26 = s.convert(_e81.type),
              _a16 = _(_e81.internalFormat, _i70, _o26);

          if (r) {
            var _e82 = N(n);

            t.renderbufferStorageMultisample(36161, _e82, _a16, n.width, n.height);
          } else t.renderbufferStorage(36161, _a16, n.width, n.height);
        }

        t.bindRenderbuffer(36161, null);
      }

      function B(e) {
        var i = r.get(e),
            s = !0 === e.isWebGLCubeRenderTarget;

        if (e.depthTexture) {
          if (s) throw new Error("target.depthTexture not supported in Cube render targets");
          !function (e, i) {
            if (i && i.isWebGLCubeRenderTarget) throw new Error("Depth Texture with cube render targets is not supported");
            if (n.bindFramebuffer(36160, e), !i.depthTexture || !i.depthTexture.isDepthTexture) throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
            r.get(i.depthTexture).__webglTexture && i.depthTexture.image.width === i.width && i.depthTexture.image.height === i.height || (i.depthTexture.image.width = i.width, i.depthTexture.image.height = i.height, i.depthTexture.needsUpdate = !0), T(i.depthTexture, 0);

            var s = r.get(i.depthTexture).__webglTexture;

            if (i.depthTexture.format === Gt) t.framebufferTexture2D(36160, 36096, 3553, s, 0);else {
              if (i.depthTexture.format !== Ht) throw new Error("Unknown depthTexture format");
              t.framebufferTexture2D(36160, 33306, 3553, s, 0);
            }
          }(i.__webglFramebuffer, e);
        } else if (s) {
          i.__webglDepthbuffer = [];

          for (var _r83 = 0; _r83 < 6; _r83++) {
            n.bindFramebuffer(36160, i.__webglFramebuffer[_r83]), i.__webglDepthbuffer[_r83] = t.createRenderbuffer(), I(i.__webglDepthbuffer[_r83], e, !1);
          }
        } else n.bindFramebuffer(36160, i.__webglFramebuffer), i.__webglDepthbuffer = t.createRenderbuffer(), I(i.__webglDepthbuffer, e, !1);

        n.bindFramebuffer(36160, null);
      }

      function N(t) {
        return a && t.isWebGLMultisampleRenderTarget ? Math.min(u, t.samples) : 0;
      }

      var F = !1,
          O = !1;
      this.allocateTextureUnit = function () {
        var t = S;
        return t >= l && console.warn("THREE.WebGLTextures: Trying to use " + t + " texture units while this GPU supports only " + l), S += 1, t;
      }, this.resetTextureUnits = function () {
        S = 0;
      }, this.setTexture2D = T, this.setTexture2DArray = function (t, e) {
        var i = r.get(t);
        t.version > 0 && i.__version !== t.version ? P(i, t, e) : (n.activeTexture(33984 + e), n.bindTexture(35866, i.__webglTexture));
      }, this.setTexture3D = function (t, e) {
        var i = r.get(t);
        t.version > 0 && i.__version !== t.version ? P(i, t, e) : (n.activeTexture(33984 + e), n.bindTexture(32879, i.__webglTexture));
      }, this.setTextureCube = E, this.setupRenderTarget = function (e) {
        var i = e.texture,
            l = r.get(e),
            c = r.get(i);
        e.addEventListener("dispose", M), c.__webglTexture = t.createTexture(), c.__version = i.version, o.memory.textures++;
        var h = !0 === e.isWebGLCubeRenderTarget,
            u = !0 === e.isWebGLMultisampleRenderTarget,
            p = i.isDataTexture3D || i.isDataTexture2DArray,
            d = x(e) || a;

        if (!a || i.format !== Bt || i.type !== At && i.type !== Lt || (i.format = Nt, console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")), h) {
          l.__webglFramebuffer = [];

          for (var _e83 = 0; _e83 < 6; _e83++) {
            l.__webglFramebuffer[_e83] = t.createFramebuffer();
          }
        } else if (l.__webglFramebuffer = t.createFramebuffer(), u) if (a) {
          l.__webglMultisampledFramebuffer = t.createFramebuffer(), l.__webglColorRenderbuffer = t.createRenderbuffer(), t.bindRenderbuffer(36161, l.__webglColorRenderbuffer);

          var _r84 = s.convert(i.format),
              _o27 = s.convert(i.type),
              _a17 = _(i.internalFormat, _r84, _o27),
              _c15 = N(e);

          t.renderbufferStorageMultisample(36161, _c15, _a17, e.width, e.height), n.bindFramebuffer(36160, l.__webglMultisampledFramebuffer), t.framebufferRenderbuffer(36160, 36064, 36161, l.__webglColorRenderbuffer), t.bindRenderbuffer(36161, null), e.depthBuffer && (l.__webglDepthRenderbuffer = t.createRenderbuffer(), I(l.__webglDepthRenderbuffer, e, !0)), n.bindFramebuffer(36160, null);
        } else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");

        if (h) {
          n.bindTexture(34067, c.__webglTexture), R(34067, i, d);

          for (var _t104 = 0; _t104 < 6; _t104++) {
            D(l.__webglFramebuffer[_t104], e, 36064, 34069 + _t104);
          }

          v(i, d) && y(34067, i, e.width, e.height), n.bindTexture(34067, null);
        } else {
          var _t105 = 3553;
          p && (a ? _t105 = i.isDataTexture3D ? 32879 : 35866 : console.warn("THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.")), n.bindTexture(_t105, c.__webglTexture), R(_t105, i, d), D(l.__webglFramebuffer, e, 36064, _t105), v(i, d) && y(3553, i, e.width, e.height), n.bindTexture(3553, null);
        }

        e.depthBuffer && B(e);
      }, this.updateRenderTargetMipmap = function (t) {
        var e = t.texture;

        if (v(e, x(t) || a)) {
          var _i71 = t.isWebGLCubeRenderTarget ? 34067 : 3553,
              _s32 = r.get(e).__webglTexture;

          n.bindTexture(_i71, _s32), y(_i71, e, t.width, t.height), n.bindTexture(_i71, null);
        }
      }, this.updateMultisampleRenderTarget = function (e) {
        if (e.isWebGLMultisampleRenderTarget) if (a) {
          var _i72 = r.get(e);

          n.bindFramebuffer(36008, _i72.__webglMultisampledFramebuffer), n.bindFramebuffer(36009, _i72.__webglFramebuffer);
          var _s33 = e.width,
              _o28 = e.height;
          var _a18 = 16384;
          e.depthBuffer && (_a18 |= 256), e.stencilBuffer && (_a18 |= 1024), t.blitFramebuffer(0, 0, _s33, _o28, 0, 0, _s33, _o28, _a18, 9728), n.bindFramebuffer(36160, _i72.__webglMultisampledFramebuffer);
        } else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
      }, this.safeSetTexture2D = function (t, e) {
        t && t.isWebGLRenderTarget && (!1 === F && (console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."), F = !0), t = t.texture), T(t, e);
      }, this.safeSetTextureCube = function (t, e) {
        t && t.isWebGLCubeRenderTarget && (!1 === O && (console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."), O = !0), t = t.texture), E(t, e);
      };
    }

    function vh(t, e, n) {
      var r = n.isWebGL2;
      return {
        convert: function convert(t) {
          var n;
          if (t === bt) return 5121;
          if (t === Rt) return 32819;
          if (t === Ct) return 32820;
          if (t === Pt) return 33635;
          if (t === wt) return 5120;
          if (t === Mt) return 5122;
          if (t === St) return 5123;
          if (t === Tt) return 5124;
          if (t === Et) return 5125;
          if (t === At) return 5126;
          if (t === Lt) return r ? 5131 : null !== (n = e.get("OES_texture_half_float")) ? n.HALF_FLOAT_OES : null;
          if (t === It) return 6406;
          if (t === Bt) return 6407;
          if (t === Nt) return 6408;
          if (t === Ft) return 6409;
          if (t === Ot) return 6410;
          if (t === Gt) return 6402;
          if (t === Ht) return 34041;
          if (t === Ut) return 6403;
          if (t === kt) return 36244;
          if (t === Vt) return 33319;
          if (t === Wt) return 33320;
          if (t === jt) return 36248;
          if (t === qt) return 36249;

          if (t === Xt || t === Yt || t === Zt || t === Jt) {
            if (null === (n = e.get("WEBGL_compressed_texture_s3tc"))) return null;
            if (t === Xt) return n.COMPRESSED_RGB_S3TC_DXT1_EXT;
            if (t === Yt) return n.COMPRESSED_RGBA_S3TC_DXT1_EXT;
            if (t === Zt) return n.COMPRESSED_RGBA_S3TC_DXT3_EXT;
            if (t === Jt) return n.COMPRESSED_RGBA_S3TC_DXT5_EXT;
          }

          if (t === Qt || t === Kt || t === $t || t === te) {
            if (null === (n = e.get("WEBGL_compressed_texture_pvrtc"))) return null;
            if (t === Qt) return n.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
            if (t === Kt) return n.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
            if (t === $t) return n.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
            if (t === te) return n.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
          }

          if (t === ee) return null !== (n = e.get("WEBGL_compressed_texture_etc1")) ? n.COMPRESSED_RGB_ETC1_WEBGL : null;

          if ((t === ne || t === re) && null !== (n = e.get("WEBGL_compressed_texture_etc"))) {
            if (t === ne) return n.COMPRESSED_RGB8_ETC2;
            if (t === re) return n.COMPRESSED_RGBA8_ETC2_EAC;
          }

          return t === ie || t === se || t === oe || t === ae || t === le || t === ce || t === he || t === ue || t === pe || t === de || t === me || t === fe || t === ge || t === xe || t === ye || t === _e || t === be || t === we || t === Me || t === Se || t === Te || t === Ee || t === Ae || t === Le || t === Re || t === Ce || t === Pe || t === De ? null !== (n = e.get("WEBGL_compressed_texture_astc")) ? t : null : t === ve ? null !== (n = e.get("EXT_texture_compression_bptc")) ? t : null : t === Dt ? r ? 34042 : null !== (n = e.get("WEBGL_depth_texture")) ? n.UNSIGNED_INT_24_8_WEBGL : null : void 0;
        }
      };
    }

    var yh = /*#__PURE__*/function (_s34) {
      _inherits(yh, _s34);

      var _super15 = _createSuper(yh);

      function yh() {
        var _this15;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        _classCallCheck(this, yh);

        _this15 = _super15.call(this), _this15.cameras = t;
        return _this15;
      }

      return yh;
    }(_s);

    exports.ArrayCamera = yh, yh.prototype.isArrayCamera = !0;

    var _h = /*#__PURE__*/function (_Jr2) {
      _inherits(_h, _Jr2);

      var _super16 = _createSuper(_h);

      function _h() {
        var _this16;

        _classCallCheck(this, _h);

        _this16 = _super16.call(this), _this16.type = "Group";
        return _this16;
      }

      return _h;
    }(Jr);

    function bh() {
      this._targetRay = null, this._grip = null, this._hand = null;
    }

    function wh(t, e) {
      var n = this,
          r = t.state;
      var i = null,
          s = 1,
          o = null,
          a = "local-floor",
          l = null;
      var c = [],
          h = new Map(),
          u = new _s();
      u.layers.enable(1), u.viewport = new Wn();
      var p = new _s();
      p.layers.enable(2), p.viewport = new Wn();
      var d = [u, p],
          m = new yh();
      m.layers.enable(1), m.layers.enable(2);
      var f = null,
          g = null;

      function x(t) {
        var e = h.get(t.inputSource);
        e && e.dispatchEvent({
          type: t.type,
          data: t.inputSource
        });
      }

      function v() {
        h.forEach(function (t, e) {
          t.disconnect(e);
        }), h.clear(), f = null, g = null, r.bindXRFramebuffer(null), t.setRenderTarget(t.getRenderTarget()), S.stop(), n.isPresenting = !1, n.dispatchEvent({
          type: "sessionend"
        });
      }

      function y(t) {
        var e = i.inputSources;

        for (var _n88 = 0; _n88 < c.length; _n88++) {
          h.set(e[_n88], c[_n88]);
        }

        for (var _n89 = 0; _n89 < t.removed.length; _n89++) {
          var _e84 = t.removed[_n89],
              _r85 = h.get(_e84);

          _r85 && (_r85.dispatchEvent({
            type: "disconnected",
            data: _e84
          }), h.delete(_e84));
        }

        for (var _n90 = 0; _n90 < t.added.length; _n90++) {
          var _e85 = t.added[_n90],
              _r86 = h.get(_e85);

          _r86 && _r86.dispatchEvent({
            type: "connected",
            data: _e85
          });
        }
      }

      this.enabled = !1, this.isPresenting = !1, this.getController = function (t) {
        var e = c[t];
        return void 0 === e && (e = new bh(), c[t] = e), e.getTargetRaySpace();
      }, this.getControllerGrip = function (t) {
        var e = c[t];
        return void 0 === e && (e = new bh(), c[t] = e), e.getGripSpace();
      }, this.getHand = function (t) {
        var e = c[t];
        return void 0 === e && (e = new bh(), c[t] = e), e.getHandSpace();
      }, this.setFramebufferScaleFactor = function (t) {
        s = t, !0 === n.isPresenting && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
      }, this.setReferenceSpaceType = function (t) {
        a = t, !0 === n.isPresenting && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
      }, this.getReferenceSpace = function () {
        return o;
      }, this.getSession = function () {
        return i;
      }, this.setSession = /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(t) {
          var _t106, _r87, _l21;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!(null !== (i = t))) {
                    _context.next = 16;
                    break;
                  }

                  i.addEventListener("select", x), i.addEventListener("selectstart", x), i.addEventListener("selectend", x), i.addEventListener("squeeze", x), i.addEventListener("squeezestart", x), i.addEventListener("squeezeend", x), i.addEventListener("end", v), i.addEventListener("inputsourceschange", y);
                  _t106 = e.getContextAttributes();
                  _context.t0 = !0 !== _t106.xrCompatible;

                  if (!_context.t0) {
                    _context.next = 7;
                    break;
                  }

                  _context.next = 7;
                  return e.makeXRCompatible();

                case 7:
                  _r87 = {
                    antialias: _t106.antialias,
                    alpha: _t106.alpha,
                    depth: _t106.depth,
                    stencil: _t106.stencil,
                    framebufferScaleFactor: s
                  }, _l21 = new XRWebGLLayer(i, e, _r87);
                  i.updateRenderState({
                    baseLayer: _l21
                  });
                  _context.next = 11;
                  return i.requestReferenceSpace(a);

                case 11:
                  o = _context.sent;
                  S.setContext(i);
                  S.start();
                  n.isPresenting = !0;
                  n.dispatchEvent({
                    type: "sessionstart"
                  });

                case 16:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function (_x4) {
          return _ref.apply(this, arguments);
        };
      }();

      var _ = new Yn(),
          b = new Yn();

      function w(t, e) {
        null === e ? t.matrixWorld.copy(t.matrix) : t.matrixWorld.multiplyMatrices(e.matrixWorld, t.matrix), t.matrixWorldInverse.copy(t.matrixWorld).invert();
      }

      this.getCamera = function (t) {
        m.near = p.near = u.near = t.near, m.far = p.far = u.far = t.far, f === m.near && g === m.far || (i.updateRenderState({
          depthNear: m.near,
          depthFar: m.far
        }), f = m.near, g = m.far);
        var e = t.parent,
            n = m.cameras;
        w(m, e);

        for (var _i73 = 0; _i73 < n.length; _i73++) {
          w(n[_i73], e);
        }

        t.matrixWorld.copy(m.matrixWorld), t.matrix.copy(m.matrix), t.matrix.decompose(t.position, t.quaternion, t.scale);
        var r = t.children;

        for (var _i74 = 0, _s35 = r.length; _i74 < _s35; _i74++) {
          r[_i74].updateMatrixWorld(!0);
        }

        return 2 === n.length ? function (t, e, n) {
          _.setFromMatrixPosition(e.matrixWorld), b.setFromMatrixPosition(n.matrixWorld);

          var r = _.distanceTo(b),
              i = e.projectionMatrix.elements,
              s = n.projectionMatrix.elements,
              o = i[14] / (i[10] - 1),
              a = i[14] / (i[10] + 1),
              l = (i[9] + 1) / i[5],
              c = (i[9] - 1) / i[5],
              h = (i[8] - 1) / i[0],
              u = (s[8] + 1) / s[0],
              p = o * h,
              d = o * u,
              m = r / (-h + u),
              f = m * -h;

          e.matrixWorld.decompose(t.position, t.quaternion, t.scale), t.translateX(f), t.translateZ(m), t.matrixWorld.compose(t.position, t.quaternion, t.scale), t.matrixWorldInverse.copy(t.matrixWorld).invert();
          var g = o + m,
              x = a + m,
              v = p - f,
              y = d + (r - f),
              w = l * a / x * g,
              M = c * a / x * g;
          t.projectionMatrix.makePerspective(v, y, w, M, g, x);
        }(m, u, p) : m.projectionMatrix.copy(u.projectionMatrix), m;
      };

      var M = null;
      var S = new Cs();
      S.setAnimationLoop(function (t, e) {
        if (null !== (l = e.getViewerPose(o))) {
          var _t107 = l.views,
              _e86 = i.renderState.baseLayer;
          r.bindXRFramebuffer(_e86.framebuffer);

          var _n91 = !1;

          _t107.length !== m.cameras.length && (m.cameras.length = 0, _n91 = !0);

          for (var _r88 = 0; _r88 < _t107.length; _r88++) {
            var _i75 = _t107[_r88],
                _s36 = _e86.getViewport(_i75),
                _o29 = d[_r88];

            _o29.matrix.fromArray(_i75.transform.matrix), _o29.projectionMatrix.fromArray(_i75.projectionMatrix), _o29.viewport.set(_s36.x, _s36.y, _s36.width, _s36.height), 0 === _r88 && m.matrix.copy(_o29.matrix), !0 === _n91 && m.cameras.push(_o29);
          }
        }

        var n = i.inputSources;

        for (var _r89 = 0; _r89 < c.length; _r89++) {
          var _t108 = c[_r89],
              _i76 = n[_r89];

          _t108.update(_i76, e, o);
        }

        M && M(t, e);
      }), this.setAnimationLoop = function (t) {
        M = t;
      }, this.dispose = function () {};
    }

    function Mh(t) {
      function e(e, n) {
        e.opacity.value = n.opacity, n.color && e.diffuse.value.copy(n.color), n.emissive && e.emissive.value.copy(n.emissive).multiplyScalar(n.emissiveIntensity), n.map && (e.map.value = n.map), n.alphaMap && (e.alphaMap.value = n.alphaMap), n.specularMap && (e.specularMap.value = n.specularMap);
        var r = t.get(n).envMap;

        if (r) {
          e.envMap.value = r, e.flipEnvMap.value = r.isCubeTexture && r._needsFlipEnvMap ? -1 : 1, e.reflectivity.value = n.reflectivity, e.refractionRatio.value = n.refractionRatio;

          var _i77 = t.get(r).__maxMipLevel;

          void 0 !== _i77 && (e.maxMipLevel.value = _i77);
        }

        var i, s;
        n.lightMap && (e.lightMap.value = n.lightMap, e.lightMapIntensity.value = n.lightMapIntensity), n.aoMap && (e.aoMap.value = n.aoMap, e.aoMapIntensity.value = n.aoMapIntensity), n.map ? i = n.map : n.specularMap ? i = n.specularMap : n.displacementMap ? i = n.displacementMap : n.normalMap ? i = n.normalMap : n.bumpMap ? i = n.bumpMap : n.roughnessMap ? i = n.roughnessMap : n.metalnessMap ? i = n.metalnessMap : n.alphaMap ? i = n.alphaMap : n.emissiveMap ? i = n.emissiveMap : n.clearcoatMap ? i = n.clearcoatMap : n.clearcoatNormalMap ? i = n.clearcoatNormalMap : n.clearcoatRoughnessMap && (i = n.clearcoatRoughnessMap), void 0 !== i && (i.isWebGLRenderTarget && (i = i.texture), !0 === i.matrixAutoUpdate && i.updateMatrix(), e.uvTransform.value.copy(i.matrix)), n.aoMap ? s = n.aoMap : n.lightMap && (s = n.lightMap), void 0 !== s && (s.isWebGLRenderTarget && (s = s.texture), !0 === s.matrixAutoUpdate && s.updateMatrix(), e.uv2Transform.value.copy(s.matrix));
      }

      function n(e, n) {
        e.roughness.value = n.roughness, e.metalness.value = n.metalness, n.roughnessMap && (e.roughnessMap.value = n.roughnessMap), n.metalnessMap && (e.metalnessMap.value = n.metalnessMap), n.emissiveMap && (e.emissiveMap.value = n.emissiveMap), n.bumpMap && (e.bumpMap.value = n.bumpMap, e.bumpScale.value = n.bumpScale, n.side === p && (e.bumpScale.value *= -1)), n.normalMap && (e.normalMap.value = n.normalMap, e.normalScale.value.copy(n.normalScale), n.side === p && e.normalScale.value.negate()), n.displacementMap && (e.displacementMap.value = n.displacementMap, e.displacementScale.value = n.displacementScale, e.displacementBias.value = n.displacementBias), t.get(n).envMap && (e.envMapIntensity.value = n.envMapIntensity);
      }

      return {
        refreshFogUniforms: function refreshFogUniforms(t, e) {
          t.fogColor.value.copy(e.color), e.isFog ? (t.fogNear.value = e.near, t.fogFar.value = e.far) : e.isFogExp2 && (t.fogDensity.value = e.density);
        },
        refreshMaterialUniforms: function refreshMaterialUniforms(t, r, i, s) {
          r.isMeshBasicMaterial ? e(t, r) : r.isMeshLambertMaterial ? (e(t, r), function (t, e) {
            e.emissiveMap && (t.emissiveMap.value = e.emissiveMap);
          }(t, r)) : r.isMeshToonMaterial ? (e(t, r), function (t, e) {
            e.gradientMap && (t.gradientMap.value = e.gradientMap), e.emissiveMap && (t.emissiveMap.value = e.emissiveMap), e.bumpMap && (t.bumpMap.value = e.bumpMap, t.bumpScale.value = e.bumpScale, e.side === p && (t.bumpScale.value *= -1)), e.normalMap && (t.normalMap.value = e.normalMap, t.normalScale.value.copy(e.normalScale), e.side === p && t.normalScale.value.negate()), e.displacementMap && (t.displacementMap.value = e.displacementMap, t.displacementScale.value = e.displacementScale, t.displacementBias.value = e.displacementBias);
          }(t, r)) : r.isMeshPhongMaterial ? (e(t, r), function (t, e) {
            t.specular.value.copy(e.specular), t.shininess.value = Math.max(e.shininess, 1e-4), e.emissiveMap && (t.emissiveMap.value = e.emissiveMap), e.bumpMap && (t.bumpMap.value = e.bumpMap, t.bumpScale.value = e.bumpScale, e.side === p && (t.bumpScale.value *= -1)), e.normalMap && (t.normalMap.value = e.normalMap, t.normalScale.value.copy(e.normalScale), e.side === p && t.normalScale.value.negate()), e.displacementMap && (t.displacementMap.value = e.displacementMap, t.displacementScale.value = e.displacementScale, t.displacementBias.value = e.displacementBias);
          }(t, r)) : r.isMeshStandardMaterial ? (e(t, r), r.isMeshPhysicalMaterial ? function (t, e) {
            n(t, e), t.reflectivity.value = e.reflectivity, t.clearcoat.value = e.clearcoat, t.clearcoatRoughness.value = e.clearcoatRoughness, e.sheen && t.sheen.value.copy(e.sheen), e.clearcoatMap && (t.clearcoatMap.value = e.clearcoatMap), e.clearcoatRoughnessMap && (t.clearcoatRoughnessMap.value = e.clearcoatRoughnessMap), e.clearcoatNormalMap && (t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale), t.clearcoatNormalMap.value = e.clearcoatNormalMap, e.side === p && t.clearcoatNormalScale.value.negate()), t.transmission.value = e.transmission, e.transmissionMap && (t.transmissionMap.value = e.transmissionMap);
          }(t, r) : n(t, r)) : r.isMeshMatcapMaterial ? (e(t, r), function (t, e) {
            e.matcap && (t.matcap.value = e.matcap), e.bumpMap && (t.bumpMap.value = e.bumpMap, t.bumpScale.value = e.bumpScale, e.side === p && (t.bumpScale.value *= -1)), e.normalMap && (t.normalMap.value = e.normalMap, t.normalScale.value.copy(e.normalScale), e.side === p && t.normalScale.value.negate()), e.displacementMap && (t.displacementMap.value = e.displacementMap, t.displacementScale.value = e.displacementScale, t.displacementBias.value = e.displacementBias);
          }(t, r)) : r.isMeshDepthMaterial ? (e(t, r), function (t, e) {
            e.displacementMap && (t.displacementMap.value = e.displacementMap, t.displacementScale.value = e.displacementScale, t.displacementBias.value = e.displacementBias);
          }(t, r)) : r.isMeshDistanceMaterial ? (e(t, r), function (t, e) {
            e.displacementMap && (t.displacementMap.value = e.displacementMap, t.displacementScale.value = e.displacementScale, t.displacementBias.value = e.displacementBias), t.referencePosition.value.copy(e.referencePosition), t.nearDistance.value = e.nearDistance, t.farDistance.value = e.farDistance;
          }(t, r)) : r.isMeshNormalMaterial ? (e(t, r), function (t, e) {
            e.bumpMap && (t.bumpMap.value = e.bumpMap, t.bumpScale.value = e.bumpScale, e.side === p && (t.bumpScale.value *= -1)), e.normalMap && (t.normalMap.value = e.normalMap, t.normalScale.value.copy(e.normalScale), e.side === p && t.normalScale.value.negate()), e.displacementMap && (t.displacementMap.value = e.displacementMap, t.displacementScale.value = e.displacementScale, t.displacementBias.value = e.displacementBias);
          }(t, r)) : r.isLineBasicMaterial ? (function (t, e) {
            t.diffuse.value.copy(e.color), t.opacity.value = e.opacity;
          }(t, r), r.isLineDashedMaterial && function (t, e) {
            t.dashSize.value = e.dashSize, t.totalSize.value = e.dashSize + e.gapSize, t.scale.value = e.scale;
          }(t, r)) : r.isPointsMaterial ? function (t, e, n, r) {
            var i;
            t.diffuse.value.copy(e.color), t.opacity.value = e.opacity, t.size.value = e.size * n, t.scale.value = .5 * r, e.map && (t.map.value = e.map), e.alphaMap && (t.alphaMap.value = e.alphaMap), e.map ? i = e.map : e.alphaMap && (i = e.alphaMap), void 0 !== i && (!0 === i.matrixAutoUpdate && i.updateMatrix(), t.uvTransform.value.copy(i.matrix));
          }(t, r, i, s) : r.isSpriteMaterial ? function (t, e) {
            var n;
            t.diffuse.value.copy(e.color), t.opacity.value = e.opacity, t.rotation.value = e.rotation, e.map && (t.map.value = e.map), e.alphaMap && (t.alphaMap.value = e.alphaMap), e.map ? n = e.map : e.alphaMap && (n = e.alphaMap), void 0 !== n && (!0 === n.matrixAutoUpdate && n.updateMatrix(), t.uvTransform.value.copy(n.matrix));
          }(t, r) : r.isShadowMaterial ? (t.color.value.copy(r.color), t.opacity.value = r.opacity) : r.isShaderMaterial && (r.uniformsNeedUpdate = !1);
        }
      };
    }

    function Sh() {
      var t = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
      return t.style.display = "block", t;
    }

    function Th(t) {
      var e = void 0 !== (t = t || {}).canvas ? t.canvas : Sh(),
          n = void 0 !== t.context ? t.context : null,
          r = void 0 !== t.alpha && t.alpha,
          i = void 0 === t.depth || t.depth,
          s = void 0 === t.stencil || t.stencil,
          o = void 0 !== t.antialias && t.antialias,
          a = void 0 === t.premultipliedAlpha || t.premultipliedAlpha,
          l = void 0 !== t.preserveDrawingBuffer && t.preserveDrawingBuffer,
          c = void 0 !== t.powerPreference ? t.powerPreference : "default",
          h = void 0 !== t.failIfMajorPerformanceCaveat && t.failIfMajorPerformanceCaveat;
      var u = null,
          p = null;
      var d = [],
          m = [];
      this.domElement = e, this.debug = {
        checkShaderErrors: !0
      }, this.autoClear = !0, this.autoClearColor = !0, this.autoClearDepth = !0, this.autoClearStencil = !0, this.sortObjects = !0, this.clippingPlanes = [], this.localClippingEnabled = !1, this.gammaFactor = 2, this.outputEncoding = Xe, this.physicallyCorrectLights = !1, this.toneMapping = Z, this.toneMappingExposure = 1;
      var f = this;

      var g = !1,
          x = 0,
          v = 0,
          y = null,
          _ = -1,
          b = null;

      var w = new Wn(),
          M = new Wn();
      var S = null,
          T = e.width,
          E = e.height,
          A = 1,
          L = null,
          R = null;
      var C = new Wn(0, 0, T, E),
          P = new Wn(0, 0, T, E);
      var D = !1;
      var I = new Rs();
      var B = !1,
          N = !1;
      var F = new Tr(),
          O = new Yn(),
          z = {
        background: null,
        fog: null,
        environment: null,
        overrideMaterial: null,
        isScene: !0
      };

      function G() {
        return null === y ? A : 1;
      }

      var H,
          U,
          k,
          V,
          W,
          j,
          q,
          X,
          Y,
          J,
          Q,
          K,
          $,
          tt,
          et,
          nt,
          rt,
          it,
          st,
          ot,
          at,
          lt,
          ct = n;

      function ht(t, n) {
        for (var _r90 = 0; _r90 < t.length; _r90++) {
          var _i78 = t[_r90],
              _s37 = e.getContext(_i78, n);

          if (null !== _s37) return _s37;
        }

        return null;
      }

      try {
        var _t109 = {
          alpha: r,
          depth: i,
          stencil: s,
          antialias: o,
          premultipliedAlpha: a,
          preserveDrawingBuffer: l,
          powerPreference: c,
          failIfMajorPerformanceCaveat: h
        };

        if (e.addEventListener("webglcontextlost", dt, !1), e.addEventListener("webglcontextrestored", mt, !1), null === ct) {
          var _e87 = ["webgl2", "webgl", "experimental-webgl"];
          if (!0 === f.isWebGL1Renderer && _e87.shift(), null === (ct = ht(_e87, _t109))) throw ht(_e87) ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
        }

        void 0 === ct.getShaderPrecisionFormat && (ct.getShaderPrecisionFormat = function () {
          return {
            rangeMin: 1,
            rangeMax: 1,
            precision: 1
          };
        });
      } catch (Et) {
        throw console.error("THREE.WebGLRenderer: " + Et.message), Et;
      }

      function ut() {
        H = new hl(ct), U = new al(ct, H, t), H.init(U), at = new vh(ct, H, U), k = new gh(ct, H, U), V = new dl(ct), W = new $c(), j = new xh(ct, H, k, W, U, at, V), q = new cl(f), X = new Ps(ct, U), lt = new sl(ct, H, X, U), Y = new ul(ct, X, V, lt), J = new xl(ct, Y, X, V), it = new gl(ct), et = new ll(W), Q = new Kc(f, q, H, U, lt, et), K = new Mh(W), $ = new rh(W), tt = new hh(H, U), rt = new il(f, q, k, J, a), nt = new fh(f, J, U), st = new ol(ct, H, V, U), ot = new pl(ct, H, V, U), V.programs = Q.programs, f.capabilities = U, f.extensions = H, f.properties = W, f.renderLists = $, f.shadowMap = nt, f.state = k, f.info = V;
      }

      ut();
      var pt = new wh(f, ct);

      function dt(t) {
        t.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), g = !0;
      }

      function mt() {
        console.log("THREE.WebGLRenderer: Context Restored."), g = !1;
        var t = V.autoReset,
            e = nt.enabled,
            n = nt.autoUpdate,
            r = nt.needsUpdate,
            i = nt.type;
        ut(), V.autoReset = t, nt.enabled = e, nt.autoUpdate = n, nt.needsUpdate = r, nt.type = i;
      }

      function ft(t) {
        var e = t.target;
        e.removeEventListener("dispose", ft), function (t) {
          (function (t) {
            var e = W.get(t).programs;
            void 0 !== e && e.forEach(function (t) {
              Q.releaseProgram(t);
            });
          })(t), W.remove(t);
        }(e);
      }

      this.xr = pt, this.getContext = function () {
        return ct;
      }, this.getContextAttributes = function () {
        return ct.getContextAttributes();
      }, this.forceContextLoss = function () {
        var t = H.get("WEBGL_lose_context");
        t && t.loseContext();
      }, this.forceContextRestore = function () {
        var t = H.get("WEBGL_lose_context");
        t && t.restoreContext();
      }, this.getPixelRatio = function () {
        return A;
      }, this.setPixelRatio = function (t) {
        void 0 !== t && (A = t, this.setSize(T, E, !1));
      }, this.getSize = function (t) {
        return void 0 === t && (console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"), t = new On()), t.set(T, E);
      }, this.setSize = function (t, n, r) {
        pt.isPresenting ? console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.") : (T = t, E = n, e.width = Math.floor(t * A), e.height = Math.floor(n * A), !1 !== r && (e.style.width = t + "px", e.style.height = n + "px"), this.setViewport(0, 0, t, n));
      }, this.getDrawingBufferSize = function (t) {
        return void 0 === t && (console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"), t = new On()), t.set(T * A, E * A).floor();
      }, this.setDrawingBufferSize = function (t, n, r) {
        T = t, E = n, A = r, e.width = Math.floor(t * r), e.height = Math.floor(n * r), this.setViewport(0, 0, t, n);
      }, this.getCurrentViewport = function (t) {
        return void 0 === t && (console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"), t = new Wn()), t.copy(w);
      }, this.getViewport = function (t) {
        return t.copy(C);
      }, this.setViewport = function (t, e, n, r) {
        t.isVector4 ? C.set(t.x, t.y, t.z, t.w) : C.set(t, e, n, r), k.viewport(w.copy(C).multiplyScalar(A).floor());
      }, this.getScissor = function (t) {
        return t.copy(P);
      }, this.setScissor = function (t, e, n, r) {
        t.isVector4 ? P.set(t.x, t.y, t.z, t.w) : P.set(t, e, n, r), k.scissor(M.copy(P).multiplyScalar(A).floor());
      }, this.getScissorTest = function () {
        return D;
      }, this.setScissorTest = function (t) {
        k.setScissorTest(D = t);
      }, this.setOpaqueSort = function (t) {
        L = t;
      }, this.setTransparentSort = function (t) {
        R = t;
      }, this.getClearColor = function (t) {
        return void 0 === t && (console.warn("WebGLRenderer: .getClearColor() now requires a Color as an argument"), t = new _i()), t.copy(rt.getClearColor());
      }, this.setClearColor = function () {
        rt.setClearColor.apply(rt, arguments);
      }, this.getClearAlpha = function () {
        return rt.getClearAlpha();
      }, this.setClearAlpha = function () {
        rt.setClearAlpha.apply(rt, arguments);
      }, this.clear = function (t, e, n) {
        var r = 0;
        (void 0 === t || t) && (r |= 16384), (void 0 === e || e) && (r |= 256), (void 0 === n || n) && (r |= 1024), ct.clear(r);
      }, this.clearColor = function () {
        this.clear(!0, !1, !1);
      }, this.clearDepth = function () {
        this.clear(!1, !0, !1);
      }, this.clearStencil = function () {
        this.clear(!1, !1, !0);
      }, this.dispose = function () {
        e.removeEventListener("webglcontextlost", dt, !1), e.removeEventListener("webglcontextrestored", mt, !1), $.dispose(), tt.dispose(), W.dispose(), q.dispose(), J.dispose(), lt.dispose(), pt.dispose(), pt.removeEventListener("sessionstart", xt), pt.removeEventListener("sessionend", vt), yt.stop();
      }, this.renderBufferImmediate = function (t, e) {
        lt.initAttributes();
        var n = W.get(t);
        t.hasPositions && !n.position && (n.position = ct.createBuffer()), t.hasNormals && !n.normal && (n.normal = ct.createBuffer()), t.hasUvs && !n.uv && (n.uv = ct.createBuffer()), t.hasColors && !n.color && (n.color = ct.createBuffer());
        var r = e.getAttributes();
        t.hasPositions && (ct.bindBuffer(34962, n.position), ct.bufferData(34962, t.positionArray, 35048), lt.enableAttribute(r.position), ct.vertexAttribPointer(r.position, 3, 5126, !1, 0, 0)), t.hasNormals && (ct.bindBuffer(34962, n.normal), ct.bufferData(34962, t.normalArray, 35048), lt.enableAttribute(r.normal), ct.vertexAttribPointer(r.normal, 3, 5126, !1, 0, 0)), t.hasUvs && (ct.bindBuffer(34962, n.uv), ct.bufferData(34962, t.uvArray, 35048), lt.enableAttribute(r.uv), ct.vertexAttribPointer(r.uv, 2, 5126, !1, 0, 0)), t.hasColors && (ct.bindBuffer(34962, n.color), ct.bufferData(34962, t.colorArray, 35048), lt.enableAttribute(r.color), ct.vertexAttribPointer(r.color, 3, 5126, !1, 0, 0)), lt.disableUnusedAttributes(), ct.drawArrays(4, 0, t.count), t.count = 0;
      }, this.renderBufferDirect = function (t, e, n, r, i, s) {
        null === e && (e = z);
        var o = i.isMesh && i.matrixWorld.determinant() < 0,
            a = Tt(t, e, r, i);
        k.setMaterial(r, o);
        var l = n.index;
        var c = n.attributes.position;

        if (null === l) {
          if (void 0 === c || 0 === c.count) return;
        } else if (0 === l.count) return;

        var h,
            u = 1;
        !0 === r.wireframe && (l = Y.getWireframeAttribute(n), u = 2), (r.morphTargets || r.morphNormals) && it.update(i, n, r, a), lt.setup(i, r, a, n, l);
        var p = st;
        null !== l && (h = X.get(l), (p = ot).setIndex(h));

        var d = null !== l ? l.count : c.count,
            m = n.drawRange.start * u,
            f = n.drawRange.count * u,
            g = null !== s ? s.start * u : 0,
            x = null !== s ? s.count * u : 1 / 0,
            v = Math.max(m, g),
            y = Math.min(d, m + f, g + x) - 1,
            _ = Math.max(0, y - v + 1);

        if (0 !== _) {
          if (i.isMesh) !0 === r.wireframe ? (k.setLineWidth(r.wireframeLinewidth * G()), p.setMode(1)) : p.setMode(4);else if (i.isLine) {
            var _t110 = r.linewidth;
            void 0 === _t110 && (_t110 = 1), k.setLineWidth(_t110 * G()), i.isLineSegments ? p.setMode(1) : i.isLineLoop ? p.setMode(2) : p.setMode(3);
          } else i.isPoints ? p.setMode(0) : i.isSprite && p.setMode(4);
          if (i.isInstancedMesh) p.renderInstances(v, _, i.count);else if (n.isInstancedBufferGeometry) {
            var _t111 = Math.min(n.instanceCount, n._maxInstanceCount);

            p.renderInstances(v, _, _t111);
          } else p.render(v, _);
        }
      }, this.compile = function (t, e) {
        (p = tt.get(t)).init(), t.traverseVisible(function (t) {
          t.isLight && t.layers.test(e.layers) && (p.pushLight(t), t.castShadow && p.pushShadow(t));
        }), p.setupLights(), t.traverse(function (e) {
          var n = e.material;
          if (n) if (Array.isArray(n)) for (var _r91 = 0; _r91 < n.length; _r91++) {
            Mt(n[_r91], t, e);
          } else Mt(n, t, e);
        });
      };
      var gt = null;

      function xt() {
        yt.stop();
      }

      function vt() {
        yt.start();
      }

      var yt = new Cs();

      function _t(t, e, n) {
        var r = !0 === e.isScene ? e.overrideMaterial : null;

        for (var _i79 = 0, _s38 = t.length; _i79 < _s38; _i79++) {
          var _s39 = t[_i79],
              _o30 = _s39.object,
              _a19 = _s39.geometry,
              _l22 = null === r ? _s39.material : r,
              _c16 = _s39.group;

          if (n.isArrayCamera) {
            var _t112 = n.cameras;

            for (var _n92 = 0, _r92 = _t112.length; _n92 < _r92; _n92++) {
              var _r93 = _t112[_n92];
              _o30.layers.test(_r93.layers) && (k.viewport(w.copy(_r93.viewport)), p.setupLightsView(_r93), wt(_o30, e, _r93, _a19, _l22, _c16));
            }
          } else wt(_o30, e, n, _a19, _l22, _c16);
        }
      }

      function wt(t, e, n, r, i, s) {
        if (t.onBeforeRender(f, e, n, r, i, s), t.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse, t.matrixWorld), t.normalMatrix.getNormalMatrix(t.modelViewMatrix), t.isImmediateRenderObject) {
          var _r94 = Tt(n, e, i, t);

          k.setMaterial(i), lt.reset(), function (t, e) {
            t.render(function (t) {
              f.renderBufferImmediate(t, e);
            });
          }(t, _r94);
        } else f.renderBufferDirect(n, e, r, i, t, s);

        t.onAfterRender(f, e, n, r, i, s);
      }

      function Mt(t, e, n) {
        !0 !== e.isScene && (e = z);
        var r = W.get(t),
            i = p.state.lights,
            s = p.state.shadowsArray,
            o = i.state.version,
            a = Q.getParameters(t, i.state, s, e, n),
            l = Q.getProgramCacheKey(a);
        var c = r.programs;
        r.environment = t.isMeshStandardMaterial ? e.environment : null, r.fog = e.fog, r.envMap = q.get(t.envMap || r.environment), void 0 === c && (t.addEventListener("dispose", ft), c = new Map(), r.programs = c);
        var h = c.get(l);

        if (void 0 !== h) {
          if (r.currentProgram === h && r.lightsStateVersion === o) return St(t, a), h;
        } else a.uniforms = Q.getUniforms(t), t.onBeforeCompile(a, f), h = Q.acquireProgram(a, l), c.set(l, h), r.uniforms = a.uniforms;

        var u = r.uniforms;
        (t.isShaderMaterial || t.isRawShaderMaterial) && !0 !== t.clipping || (u.clippingPlanes = et.uniform), St(t, a), r.needsLights = function (t) {
          return t.isMeshLambertMaterial || t.isMeshToonMaterial || t.isMeshPhongMaterial || t.isMeshStandardMaterial || t.isShadowMaterial || t.isShaderMaterial && !0 === t.lights;
        }(t), r.lightsStateVersion = o, r.needsLights && (u.ambientLightColor.value = i.state.ambient, u.lightProbe.value = i.state.probe, u.directionalLights.value = i.state.directional, u.directionalLightShadows.value = i.state.directionalShadow, u.spotLights.value = i.state.spot, u.spotLightShadows.value = i.state.spotShadow, u.rectAreaLights.value = i.state.rectArea, u.ltc_1.value = i.state.rectAreaLTC1, u.ltc_2.value = i.state.rectAreaLTC2, u.pointLights.value = i.state.point, u.pointLightShadows.value = i.state.pointShadow, u.hemisphereLights.value = i.state.hemi, u.directionalShadowMap.value = i.state.directionalShadowMap, u.directionalShadowMatrix.value = i.state.directionalShadowMatrix, u.spotShadowMap.value = i.state.spotShadowMap, u.spotShadowMatrix.value = i.state.spotShadowMatrix, u.pointShadowMap.value = i.state.pointShadowMap, u.pointShadowMatrix.value = i.state.pointShadowMatrix);
        var d = h.getUniforms(),
            m = Mc.seqWithValue(d.seq, u);
        return r.currentProgram = h, r.uniformsList = m, h;
      }

      function St(t, e) {
        var n = W.get(t);
        n.outputEncoding = e.outputEncoding, n.instancing = e.instancing, n.numClippingPlanes = e.numClippingPlanes, n.numIntersection = e.numClipIntersection, n.vertexAlphas = e.vertexAlphas;
      }

      function Tt(t, e, n, r) {
        !0 !== e.isScene && (e = z), j.resetTextureUnits();
        var i = e.fog,
            s = n.isMeshStandardMaterial ? e.environment : null,
            o = null === y ? f.outputEncoding : y.texture.encoding,
            a = q.get(n.envMap || s),
            l = !0 === n.vertexColors && r.geometry.attributes.color && 4 === r.geometry.attributes.color.itemSize,
            c = W.get(n),
            h = p.state.lights;

        if (!0 === B && (!0 === N || t !== b)) {
          var _e88 = t === b && n.id === _;

          et.setState(n, t, _e88);
        }

        var u = !1;
        n.version === c.__version ? c.needsLights && c.lightsStateVersion !== h.state.version ? u = !0 : c.outputEncoding !== o ? u = !0 : r.isInstancedMesh && !1 === c.instancing ? u = !0 : r.isInstancedMesh || !0 !== c.instancing ? c.envMap !== a ? u = !0 : n.fog && c.fog !== i ? u = !0 : void 0 === c.numClippingPlanes || c.numClippingPlanes === et.numPlanes && c.numIntersection === et.numIntersection ? c.vertexAlphas !== l && (u = !0) : u = !0 : u = !0 : (u = !0, c.__version = n.version);
        var d = c.currentProgram;
        !0 === u && (d = Mt(n, e, r));
        var m = !1,
            g = !1,
            x = !1;
        var v = d.getUniforms(),
            w = c.uniforms;

        if (k.useProgram(d.program) && (m = !0, g = !0, x = !0), n.id !== _ && (_ = n.id, g = !0), m || b !== t) {
          if (v.setValue(ct, "projectionMatrix", t.projectionMatrix), U.logarithmicDepthBuffer && v.setValue(ct, "logDepthBufFC", 2 / (Math.log(t.far + 1) / Math.LN2)), b !== t && (b = t, g = !0, x = !0), n.isShaderMaterial || n.isMeshPhongMaterial || n.isMeshToonMaterial || n.isMeshStandardMaterial || n.envMap) {
            var _e89 = v.map.cameraPosition;
            void 0 !== _e89 && _e89.setValue(ct, O.setFromMatrixPosition(t.matrixWorld));
          }

          (n.isMeshPhongMaterial || n.isMeshToonMaterial || n.isMeshLambertMaterial || n.isMeshBasicMaterial || n.isMeshStandardMaterial || n.isShaderMaterial) && v.setValue(ct, "isOrthographic", !0 === t.isOrthographicCamera), (n.isMeshPhongMaterial || n.isMeshToonMaterial || n.isMeshLambertMaterial || n.isMeshBasicMaterial || n.isMeshStandardMaterial || n.isShaderMaterial || n.isShadowMaterial || n.skinning) && v.setValue(ct, "viewMatrix", t.matrixWorldInverse);
        }

        if (n.skinning) {
          v.setOptional(ct, r, "bindMatrix"), v.setOptional(ct, r, "bindMatrixInverse");
          var _t113 = r.skeleton;

          if (_t113) {
            var _e90 = _t113.bones;

            if (U.floatVertexTextures) {
              if (null === _t113.boneTexture) {
                var _n93 = Math.sqrt(4 * _e90.length);

                _n93 = Fn.ceilPowerOfTwo(_n93), _n93 = Math.max(_n93, 4);

                var _r95 = new Float32Array(_n93 * _n93 * 4);

                _r95.set(_t113.boneMatrices);

                var _i80 = new Es(_r95, _n93, _n93, Nt, At);

                _t113.boneMatrices = _r95, _t113.boneTexture = _i80, _t113.boneTextureSize = _n93;
              }

              v.setValue(ct, "boneTexture", _t113.boneTexture, j), v.setValue(ct, "boneTextureSize", _t113.boneTextureSize);
            } else v.setOptional(ct, _t113, "boneMatrices");
          }
        }

        var M, S;
        return (g || c.receiveShadow !== r.receiveShadow) && (c.receiveShadow = r.receiveShadow, v.setValue(ct, "receiveShadow", r.receiveShadow)), g && (v.setValue(ct, "toneMappingExposure", f.toneMappingExposure), c.needsLights && (S = x, (M = w).ambientLightColor.needsUpdate = S, M.lightProbe.needsUpdate = S, M.directionalLights.needsUpdate = S, M.directionalLightShadows.needsUpdate = S, M.pointLights.needsUpdate = S, M.pointLightShadows.needsUpdate = S, M.spotLights.needsUpdate = S, M.spotLightShadows.needsUpdate = S, M.rectAreaLights.needsUpdate = S, M.hemisphereLights.needsUpdate = S), i && n.fog && K.refreshFogUniforms(w, i), K.refreshMaterialUniforms(w, n, A, E), Mc.upload(ct, c.uniformsList, w, j)), n.isShaderMaterial && !0 === n.uniformsNeedUpdate && (Mc.upload(ct, c.uniformsList, w, j), n.uniformsNeedUpdate = !1), n.isSpriteMaterial && v.setValue(ct, "center", r.center), v.setValue(ct, "modelViewMatrix", r.modelViewMatrix), v.setValue(ct, "normalMatrix", r.normalMatrix), v.setValue(ct, "modelMatrix", r.matrixWorld), d;
      }

      yt.setAnimationLoop(function (t) {
        gt && gt(t);
      }), "undefined" != typeof window && yt.setContext(window), this.setAnimationLoop = function (t) {
        gt = t, pt.setAnimationLoop(t), null === t ? yt.stop() : yt.start();
      }, pt.addEventListener("sessionstart", xt), pt.addEventListener("sessionend", vt), this.render = function (t, e) {
        var n, r;
        if (void 0 !== arguments[2] && (console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead."), n = arguments[2]), void 0 !== arguments[3] && (console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead."), r = arguments[3]), void 0 !== e && !0 !== e.isCamera) return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
        if (!0 === g) return;
        !0 === t.autoUpdate && t.updateMatrixWorld(), null === e.parent && e.updateMatrixWorld(), !0 === pt.enabled && !0 === pt.isPresenting && (e = pt.getCamera(e)), !0 === t.isScene && t.onBeforeRender(f, t, e, n || y), (p = tt.get(t, m.length)).init(), m.push(p), F.multiplyMatrices(e.projectionMatrix, e.matrixWorldInverse), I.setFromProjectionMatrix(F), N = this.localClippingEnabled, B = et.init(this.clippingPlanes, N, e), (u = $.get(t, d.length)).init(), d.push(u), function t(e, n, r, i) {
          if (!1 === e.visible) return;
          var s = e.layers.test(n.layers);
          if (s) if (e.isGroup) r = e.renderOrder;else if (e.isLOD) !0 === e.autoUpdate && e.update(n);else if (e.isLight) p.pushLight(e), e.castShadow && p.pushShadow(e);else if (e.isSprite) {
            if (!e.frustumCulled || I.intersectsSprite(e)) {
              i && O.setFromMatrixPosition(e.matrixWorld).applyMatrix4(F);

              var _t114 = J.update(e),
                  _n94 = e.material;

              _n94.visible && u.push(e, _t114, _n94, r, O.z, null);
            }
          } else if (e.isImmediateRenderObject) i && O.setFromMatrixPosition(e.matrixWorld).applyMatrix4(F), u.push(e, null, e.material, r, O.z, null);else if ((e.isMesh || e.isLine || e.isPoints) && (e.isSkinnedMesh && e.skeleton.frame !== V.render.frame && (e.skeleton.update(), e.skeleton.frame = V.render.frame), !e.frustumCulled || I.intersectsObject(e))) {
            i && O.setFromMatrixPosition(e.matrixWorld).applyMatrix4(F);

            var _t115 = J.update(e),
                _n95 = e.material;

            if (Array.isArray(_n95)) {
              var _i81 = _t115.groups;

              for (var _s40 = 0, _o31 = _i81.length; _s40 < _o31; _s40++) {
                var _o32 = _i81[_s40],
                    _a20 = _n95[_o32.materialIndex];
                _a20 && _a20.visible && u.push(e, _t115, _a20, r, O.z, _o32);
              }
            } else _n95.visible && u.push(e, _t115, _n95, r, O.z, null);
          }
          var o = e.children;

          for (var _a21 = 0, _l23 = o.length; _a21 < _l23; _a21++) {
            t(o[_a21], n, r, i);
          }
        }(t, e, 0, f.sortObjects), u.finish(), !0 === f.sortObjects && u.sort(L, R), !0 === B && et.beginShadows();
        var i = p.state.shadowsArray;
        nt.render(i, t, e), p.setupLights(), p.setupLightsView(e), !0 === B && et.endShadows(), !0 === this.info.autoReset && this.info.reset(), void 0 !== n && this.setRenderTarget(n), rt.render(u, t, e, r);
        var s = u.opaque,
            o = u.transparent;
        s.length > 0 && _t(s, t, e), o.length > 0 && _t(o, t, e), null !== y && (j.updateRenderTargetMipmap(y), j.updateMultisampleRenderTarget(y)), !0 === t.isScene && t.onAfterRender(f, t, e), k.buffers.depth.setTest(!0), k.buffers.depth.setMask(!0), k.buffers.color.setMask(!0), k.setPolygonOffset(!1), lt.resetDefaultState(), _ = -1, b = null, m.pop(), p = m.length > 0 ? m[m.length - 1] : null, d.pop(), u = d.length > 0 ? d[d.length - 1] : null;
      }, this.getActiveCubeFace = function () {
        return x;
      }, this.getActiveMipmapLevel = function () {
        return v;
      }, this.getRenderTarget = function () {
        return y;
      }, this.setRenderTarget = function (t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        y = t, x = e, v = n, t && void 0 === W.get(t).__webglFramebuffer && j.setupRenderTarget(t);
        var r = null,
            i = !1,
            s = !1;

        if (t) {
          var _n96 = t.texture;
          (_n96.isDataTexture3D || _n96.isDataTexture2DArray) && (s = !0);

          var _o33 = W.get(t).__webglFramebuffer;

          t.isWebGLCubeRenderTarget ? (r = _o33[e], i = !0) : r = t.isWebGLMultisampleRenderTarget ? W.get(t).__webglMultisampledFramebuffer : _o33, w.copy(t.viewport), M.copy(t.scissor), S = t.scissorTest;
        } else w.copy(C).multiplyScalar(A).floor(), M.copy(P).multiplyScalar(A).floor(), S = D;

        if (k.bindFramebuffer(36160, r), k.viewport(w), k.scissor(M), k.setScissorTest(S), i) {
          var _r96 = W.get(t.texture);

          ct.framebufferTexture2D(36160, 36064, 34069 + e, _r96.__webglTexture, n);
        } else if (s) {
          var _r97 = W.get(t.texture),
              _i82 = e || 0;

          ct.framebufferTextureLayer(36160, 36064, _r97.__webglTexture, n || 0, _i82);
        }
      }, this.readRenderTargetPixels = function (t, e, n, r, i, s, o) {
        if (!t || !t.isWebGLRenderTarget) return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");

        var a = W.get(t).__webglFramebuffer;

        if (t.isWebGLCubeRenderTarget && void 0 !== o && (a = a[o]), a) {
          k.bindFramebuffer(36160, a);

          try {
            var _o34 = t.texture,
                _a22 = _o34.format,
                _l24 = _o34.type;
            if (_a22 !== Nt && at.convert(_a22) !== ct.getParameter(35739)) return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");

            var _c17 = _l24 === Lt && (H.has("EXT_color_buffer_half_float") || U.isWebGL2 && H.has("EXT_color_buffer_float"));

            if (!(_l24 === bt || at.convert(_l24) === ct.getParameter(35738) || _l24 === At && (U.isWebGL2 || H.has("OES_texture_float") || H.has("WEBGL_color_buffer_float")) || _c17)) return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
            36053 === ct.checkFramebufferStatus(36160) ? e >= 0 && e <= t.width - r && n >= 0 && n <= t.height - i && ct.readPixels(e, n, r, i, at.convert(_a22), at.convert(_l24), s) : console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.");
          } finally {
            var _t116 = null !== y ? W.get(y).__webglFramebuffer : null;

            k.bindFramebuffer(36160, _t116);
          }
        }
      }, this.copyFramebufferToTexture = function (t, e) {
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var r = Math.pow(2, -n),
            i = Math.floor(e.image.width * r),
            s = Math.floor(e.image.height * r),
            o = at.convert(e.format);
        j.setTexture2D(e, 0), ct.copyTexImage2D(3553, n, o, t.x, t.y, i, s, 0), k.unbindTexture();
      }, this.copyTextureToTexture = function (t, e, n) {
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        var i = e.image.width,
            s = e.image.height,
            o = at.convert(n.format),
            a = at.convert(n.type);
        j.setTexture2D(n, 0), ct.pixelStorei(37440, n.flipY), ct.pixelStorei(37441, n.premultiplyAlpha), ct.pixelStorei(3317, n.unpackAlignment), e.isDataTexture ? ct.texSubImage2D(3553, r, t.x, t.y, i, s, o, a, e.image.data) : e.isCompressedTexture ? ct.compressedTexSubImage2D(3553, r, t.x, t.y, e.mipmaps[0].width, e.mipmaps[0].height, o, e.mipmaps[0].data) : ct.texSubImage2D(3553, r, t.x, t.y, o, a, e.image), 0 === r && n.generateMipmaps && ct.generateMipmap(3553), k.unbindTexture();
      }, this.copyTextureToTexture3D = function (t, e, n, r) {
        var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        if (f.isWebGL1Renderer) return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");
        var _n$image = n.image,
            s = _n$image.width,
            o = _n$image.height,
            a = _n$image.data,
            l = at.convert(r.format),
            c = at.convert(r.type);
        var h;
        if (r.isDataTexture3D) j.setTexture3D(r, 0), h = 32879;else {
          if (!r.isDataTexture2DArray) return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
          j.setTexture2DArray(r, 0), h = 35866;
        }
        ct.pixelStorei(37440, r.flipY), ct.pixelStorei(37441, r.premultiplyAlpha), ct.pixelStorei(3317, r.unpackAlignment);
        var u = ct.getParameter(3314),
            p = ct.getParameter(32878),
            d = ct.getParameter(3316),
            m = ct.getParameter(3315),
            g = ct.getParameter(32877);
        ct.pixelStorei(3314, s), ct.pixelStorei(32878, o), ct.pixelStorei(3316, t.min.x), ct.pixelStorei(3315, t.min.y), ct.pixelStorei(32877, t.min.z), ct.texSubImage3D(h, i, e.x, e.y, e.z, t.max.x - t.min.x + 1, t.max.y - t.min.y + 1, t.max.z - t.min.z + 1, l, c, a), ct.pixelStorei(3314, u), ct.pixelStorei(32878, p), ct.pixelStorei(3316, d), ct.pixelStorei(3315, m), ct.pixelStorei(32877, g), 0 === i && r.generateMipmaps && ct.generateMipmap(h), k.unbindTexture();
      }, this.initTexture = function (t) {
        j.setTexture2D(t, 0), k.unbindTexture();
      }, this.resetState = function () {
        x = 0, v = 0, y = null, k.reset(), lt.reset();
      }, "undefined" != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {
        detail: this
      }));
    }

    exports.Group = _h, _h.prototype.isGroup = !0, Object.assign(bh.prototype, {
      constructor: bh,
      getHandSpace: function getHandSpace() {
        return null === this._hand && (this._hand = new _h(), this._hand.matrixAutoUpdate = !1, this._hand.visible = !1, this._hand.joints = {}, this._hand.inputState = {
          pinching: !1
        }), this._hand;
      },
      getTargetRaySpace: function getTargetRaySpace() {
        return null === this._targetRay && (this._targetRay = new _h(), this._targetRay.matrixAutoUpdate = !1, this._targetRay.visible = !1), this._targetRay;
      },
      getGripSpace: function getGripSpace() {
        return null === this._grip && (this._grip = new _h(), this._grip.matrixAutoUpdate = !1, this._grip.visible = !1), this._grip;
      },
      dispatchEvent: function dispatchEvent(t) {
        return null !== this._targetRay && this._targetRay.dispatchEvent(t), null !== this._grip && this._grip.dispatchEvent(t), null !== this._hand && this._hand.dispatchEvent(t), this;
      },
      disconnect: function disconnect(t) {
        return this.dispatchEvent({
          type: "disconnected",
          data: t
        }), null !== this._targetRay && (this._targetRay.visible = !1), null !== this._grip && (this._grip.visible = !1), null !== this._hand && (this._hand.visible = !1), this;
      },
      update: function update(t, e, n) {
        var r = null,
            i = null,
            s = null;
        var o = this._targetRay,
            a = this._grip,
            l = this._hand;
        if (t && "visible-blurred" !== e.session.visibilityState) if (null !== o && null !== (r = e.getPose(t.targetRaySpace, n)) && (o.matrix.fromArray(r.transform.matrix), o.matrix.decompose(o.position, o.rotation, o.scale)), l && t.hand) {
          s = !0;

          var _iterator = _createForOfIteratorHelper(t.hand.values()),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var _s41 = _step.value;

              var _t117 = e.getJointPose(_s41, n);

              if (void 0 === l.joints[_s41.jointName]) {
                var _t118 = new _h();

                _t118.matrixAutoUpdate = !1, _t118.visible = !1, l.joints[_s41.jointName] = _t118, l.add(_t118);
              }

              var _r99 = l.joints[_s41.jointName];
              null !== _t117 && (_r99.matrix.fromArray(_t117.transform.matrix), _r99.matrix.decompose(_r99.position, _r99.rotation, _r99.scale), _r99.jointRadius = _t117.radius), _r99.visible = null !== _t117;
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          var _r98 = l.joints["index-finger-tip"],
              _i83 = l.joints["thumb-tip"],
              _o35 = _r98.position.distanceTo(_i83.position),
              _a23 = .02,
              _c18 = .005;

          l.inputState.pinching && _o35 > _a23 + _c18 ? (l.inputState.pinching = !1, this.dispatchEvent({
            type: "pinchend",
            handedness: t.handedness,
            target: this
          })) : !l.inputState.pinching && _o35 <= _a23 - _c18 && (l.inputState.pinching = !0, this.dispatchEvent({
            type: "pinchstart",
            handedness: t.handedness,
            target: this
          }));
        } else null !== a && t.gripSpace && null !== (i = e.getPose(t.gripSpace, n)) && (a.matrix.fromArray(i.transform.matrix), a.matrix.decompose(a.position, a.rotation, a.scale));
        return null !== o && (o.visible = null !== r), null !== a && (a.visible = null !== i), null !== l && (l.visible = null !== s), this;
      }
    }), Object.assign(wh.prototype, In.prototype);

    var Eh = /*#__PURE__*/function (_Th) {
      _inherits(Eh, _Th);

      var _super17 = _createSuper(Eh);

      function Eh() {
        _classCallCheck(this, Eh);

        return _super17.apply(this, arguments);
      }

      return Eh;
    }(Th);

    exports.WebGL1Renderer = Eh, Eh.prototype.isWebGL1Renderer = !0;

    var Ah = /*#__PURE__*/function () {
      function Ah(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 25e-5;

        _classCallCheck(this, Ah);

        this.name = "", this.color = new _i(t), this.density = e;
      }

      _createClass(Ah, [{
        key: "clone",
        value: function clone() {
          return new Ah(this.color, this.density);
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          return {
            type: "FogExp2",
            color: this.color.getHex(),
            density: this.density
          };
        }
      }]);

      return Ah;
    }();

    exports.FogExp2 = Ah, Ah.prototype.isFogExp2 = !0;

    var Lh = /*#__PURE__*/function () {
      function Lh(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1e3;

        _classCallCheck(this, Lh);

        this.name = "", this.color = new _i(t), this.near = e, this.far = n;
      }

      _createClass(Lh, [{
        key: "clone",
        value: function clone() {
          return new Lh(this.color, this.near, this.far);
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          return {
            type: "Fog",
            color: this.color.getHex(),
            near: this.near,
            far: this.far
          };
        }
      }]);

      return Lh;
    }();

    exports.Fog = Lh, Lh.prototype.isFog = !0;

    var Rh = /*#__PURE__*/function (_Jr3) {
      _inherits(Rh, _Jr3);

      var _super18 = _createSuper(Rh);

      function Rh() {
        var _this17;

        _classCallCheck(this, Rh);

        _this17 = _super18.call(this), _this17.type = "Scene", _this17.background = null, _this17.environment = null, _this17.fog = null, _this17.overrideMaterial = null, _this17.autoUpdate = !0, "undefined" != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {
          detail: _assertThisInitialized(_this17)
        }));
        return _this17;
      }

      _createClass(Rh, [{
        key: "copy",
        value: function copy(t, e) {
          return _get(_getPrototypeOf(Rh.prototype), "copy", this).call(this, t, e), null !== t.background && (this.background = t.background.clone()), null !== t.environment && (this.environment = t.environment.clone()), null !== t.fog && (this.fog = t.fog.clone()), null !== t.overrideMaterial && (this.overrideMaterial = t.overrideMaterial.clone()), this.autoUpdate = t.autoUpdate, this.matrixAutoUpdate = t.matrixAutoUpdate, this;
        }
      }, {
        key: "toJSON",
        value: function toJSON(t) {
          var e = _get(_getPrototypeOf(Rh.prototype), "toJSON", this).call(this, t);

          return null !== this.background && (e.object.background = this.background.toJSON(t)), null !== this.environment && (e.object.environment = this.environment.toJSON(t)), null !== this.fog && (e.object.fog = this.fog.toJSON()), e;
        }
      }]);

      return Rh;
    }(Jr);

    function Ch(t, e) {
      this.array = t, this.stride = e, this.count = void 0 !== t ? t.length / e : 0, this.usage = wn, this.updateRange = {
        offset: 0,
        count: -1
      }, this.version = 0, this.uuid = Fn.generateUUID();
    }

    exports.Scene = Rh, Rh.prototype.isScene = !0, Object.defineProperty(Ch.prototype, "needsUpdate", {
      set: function set(t) {
        !0 === t && this.version++;
      }
    }), Object.assign(Ch.prototype, {
      isInterleavedBuffer: !0,
      onUploadCallback: function onUploadCallback() {},
      setUsage: function setUsage(t) {
        return this.usage = t, this;
      },
      copy: function copy(t) {
        return this.array = new t.array.constructor(t.array), this.count = t.count, this.stride = t.stride, this.usage = t.usage, this;
      },
      copyAt: function copyAt(t, e, n) {
        t *= this.stride, n *= e.stride;

        for (var _r100 = 0, _i84 = this.stride; _r100 < _i84; _r100++) {
          this.array[t + _r100] = e.array[n + _r100];
        }

        return this;
      },
      set: function set(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return this.array.set(t, e), this;
      },
      clone: function clone(t) {
        void 0 === t.arrayBuffers && (t.arrayBuffers = {}), void 0 === this.array.buffer._uuid && (this.array.buffer._uuid = Fn.generateUUID()), void 0 === t.arrayBuffers[this.array.buffer._uuid] && (t.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer);
        var e = new Ch(new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]), this.stride);
        return e.setUsage(this.usage), e;
      },
      onUpload: function onUpload(t) {
        return this.onUploadCallback = t, this;
      },
      toJSON: function toJSON(t) {
        return void 0 === t.arrayBuffers && (t.arrayBuffers = {}), void 0 === this.array.buffer._uuid && (this.array.buffer._uuid = Fn.generateUUID()), void 0 === t.arrayBuffers[this.array.buffer._uuid] && (t.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer))), {
          uuid: this.uuid,
          buffer: this.array.buffer._uuid,
          type: this.array.constructor.name,
          stride: this.stride
        };
      }
    });
    var Ph = new Yn();

    function Dh(t, e, n, r) {
      this.name = "", this.data = t, this.itemSize = e, this.offset = n, this.normalized = !0 === r;
    }

    Object.defineProperties(Dh.prototype, {
      count: {
        get: function get() {
          return this.data.count;
        }
      },
      array: {
        get: function get() {
          return this.data.array;
        }
      },
      needsUpdate: {
        set: function set(t) {
          this.data.needsUpdate = t;
        }
      }
    }), Object.assign(Dh.prototype, {
      isInterleavedBufferAttribute: !0,
      applyMatrix4: function applyMatrix4(t) {
        for (var _e91 = 0, _n97 = this.data.count; _e91 < _n97; _e91++) {
          Ph.x = this.getX(_e91), Ph.y = this.getY(_e91), Ph.z = this.getZ(_e91), Ph.applyMatrix4(t), this.setXYZ(_e91, Ph.x, Ph.y, Ph.z);
        }

        return this;
      },
      applyNormalMatrix: function applyNormalMatrix(t) {
        for (var _e92 = 0, _n98 = this.count; _e92 < _n98; _e92++) {
          Ph.x = this.getX(_e92), Ph.y = this.getY(_e92), Ph.z = this.getZ(_e92), Ph.applyNormalMatrix(t), this.setXYZ(_e92, Ph.x, Ph.y, Ph.z);
        }

        return this;
      },
      transformDirection: function transformDirection(t) {
        for (var _e93 = 0, _n99 = this.count; _e93 < _n99; _e93++) {
          Ph.x = this.getX(_e93), Ph.y = this.getY(_e93), Ph.z = this.getZ(_e93), Ph.transformDirection(t), this.setXYZ(_e93, Ph.x, Ph.y, Ph.z);
        }

        return this;
      },
      setX: function setX(t, e) {
        return this.data.array[t * this.data.stride + this.offset] = e, this;
      },
      setY: function setY(t, e) {
        return this.data.array[t * this.data.stride + this.offset + 1] = e, this;
      },
      setZ: function setZ(t, e) {
        return this.data.array[t * this.data.stride + this.offset + 2] = e, this;
      },
      setW: function setW(t, e) {
        return this.data.array[t * this.data.stride + this.offset + 3] = e, this;
      },
      getX: function getX(t) {
        return this.data.array[t * this.data.stride + this.offset];
      },
      getY: function getY(t) {
        return this.data.array[t * this.data.stride + this.offset + 1];
      },
      getZ: function getZ(t) {
        return this.data.array[t * this.data.stride + this.offset + 2];
      },
      getW: function getW(t) {
        return this.data.array[t * this.data.stride + this.offset + 3];
      },
      setXY: function setXY(t, e, n) {
        return t = t * this.data.stride + this.offset, this.data.array[t + 0] = e, this.data.array[t + 1] = n, this;
      },
      setXYZ: function setXYZ(t, e, n, r) {
        return t = t * this.data.stride + this.offset, this.data.array[t + 0] = e, this.data.array[t + 1] = n, this.data.array[t + 2] = r, this;
      },
      setXYZW: function setXYZW(t, e, n, r, i) {
        return t = t * this.data.stride + this.offset, this.data.array[t + 0] = e, this.data.array[t + 1] = n, this.data.array[t + 2] = r, this.data.array[t + 3] = i, this;
      },
      clone: function clone(t) {
        if (void 0 === t) {
          console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");
          var _t119 = [];

          for (var _e94 = 0; _e94 < this.count; _e94++) {
            var _n100 = _e94 * this.data.stride + this.offset;

            for (var _e95 = 0; _e95 < this.itemSize; _e95++) {
              _t119.push(this.data.array[_n100 + _e95]);
            }
          }

          return new Si(new this.array.constructor(_t119), this.itemSize, this.normalized);
        }

        return void 0 === t.interleavedBuffers && (t.interleavedBuffers = {}), void 0 === t.interleavedBuffers[this.data.uuid] && (t.interleavedBuffers[this.data.uuid] = this.data.clone(t)), new Dh(t.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
      },
      toJSON: function toJSON(t) {
        if (void 0 === t) {
          console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");
          var _t120 = [];

          for (var _e96 = 0; _e96 < this.count; _e96++) {
            var _n101 = _e96 * this.data.stride + this.offset;

            for (var _e97 = 0; _e97 < this.itemSize; _e97++) {
              _t120.push(this.data.array[_n101 + _e97]);
            }
          }

          return {
            itemSize: this.itemSize,
            type: this.array.constructor.name,
            array: _t120,
            normalized: this.normalized
          };
        }

        return void 0 === t.interleavedBuffers && (t.interleavedBuffers = {}), void 0 === t.interleavedBuffers[this.data.uuid] && (t.interleavedBuffers[this.data.uuid] = this.data.toJSON(t)), {
          isInterleavedBufferAttribute: !0,
          itemSize: this.itemSize,
          data: this.data.uuid,
          offset: this.offset,
          normalized: this.normalized
        };
      }
    });

    var Ih = /*#__PURE__*/function (_di4) {
      _inherits(Ih, _di4);

      var _super19 = _createSuper(Ih);

      function Ih(t) {
        var _this18;

        _classCallCheck(this, Ih);

        _this18 = _super19.call(this), _this18.type = "SpriteMaterial", _this18.color = new _i(16777215), _this18.map = null, _this18.alphaMap = null, _this18.rotation = 0, _this18.sizeAttenuation = !0, _this18.transparent = !0, _this18.setValues(t);
        return _this18;
      }

      _createClass(Ih, [{
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(Ih.prototype), "copy", this).call(this, t), this.color.copy(t.color), this.map = t.map, this.alphaMap = t.alphaMap, this.rotation = t.rotation, this.sizeAttenuation = t.sizeAttenuation, this;
        }
      }]);

      return Ih;
    }(di);

    var Bh;
    exports.SpriteMaterial = Ih, Ih.prototype.isSpriteMaterial = !0;
    var Nh = new Yn(),
        Fh = new Yn(),
        Oh = new Yn(),
        zh = new On(),
        Gh = new On(),
        Hh = new Tr(),
        Uh = new Yn(),
        kh = new Yn(),
        Vh = new Yn(),
        Wh = new On(),
        jh = new On(),
        qh = new On();

    var Xh = /*#__PURE__*/function (_Jr4) {
      _inherits(Xh, _Jr4);

      var _super20 = _createSuper(Xh);

      function Xh(t) {
        var _this19;

        _classCallCheck(this, Xh);

        if (_this19 = _super20.call(this), _this19.type = "Sprite", void 0 === Bh) {
          Bh = new ji();

          var _t121 = new Ch(new Float32Array([-.5, -.5, 0, 0, 0, .5, -.5, 0, 1, 0, .5, .5, 0, 1, 1, -.5, .5, 0, 0, 1]), 5);

          Bh.setIndex([0, 1, 2, 0, 2, 3]), Bh.setAttribute("position", new Dh(_t121, 3, 0, !1)), Bh.setAttribute("uv", new Dh(_t121, 2, 3, !1));
        }

        _this19.geometry = Bh, _this19.material = void 0 !== t ? t : new Ih(), _this19.center = new On(.5, .5);
        return _possibleConstructorReturn(_this19);
      }

      _createClass(Xh, [{
        key: "raycast",
        value: function raycast(t, e) {
          null === t.camera && console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'), Fh.setFromMatrixScale(this.matrixWorld), Hh.copy(t.camera.matrixWorld), this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse, this.matrixWorld), Oh.setFromMatrixPosition(this.modelViewMatrix), t.camera.isPerspectiveCamera && !1 === this.material.sizeAttenuation && Fh.multiplyScalar(-Oh.z);
          var n = this.material.rotation;
          var r, i;
          0 !== n && (i = Math.cos(n), r = Math.sin(n));
          var s = this.center;
          Yh(Uh.set(-.5, -.5, 0), Oh, s, Fh, r, i), Yh(kh.set(.5, -.5, 0), Oh, s, Fh, r, i), Yh(Vh.set(.5, .5, 0), Oh, s, Fh, r, i), Wh.set(0, 0), jh.set(1, 0), qh.set(1, 1);
          var o = t.ray.intersectTriangle(Uh, kh, Vh, !1, Nh);
          if (null === o && (Yh(kh.set(-.5, .5, 0), Oh, s, Fh, r, i), jh.set(0, 1), null === (o = t.ray.intersectTriangle(Uh, Vh, kh, !1, Nh)))) return;
          var a = t.ray.origin.distanceTo(Nh);
          a < t.near || a > t.far || e.push({
            distance: a,
            point: Nh.clone(),
            uv: ui.getUV(Nh, Uh, kh, Vh, Wh, jh, qh, new On()),
            face: null,
            object: this
          });
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(Xh.prototype), "copy", this).call(this, t), void 0 !== t.center && this.center.copy(t.center), this.material = t.material, this;
        }
      }]);

      return Xh;
    }(Jr);

    function Yh(t, e, n, r, i, s) {
      zh.subVectors(t, n).addScalar(.5).multiply(r), void 0 !== i ? (Gh.x = s * zh.x - i * zh.y, Gh.y = i * zh.x + s * zh.y) : Gh.copy(zh), t.copy(e), t.x += Gh.x, t.y += Gh.y, t.applyMatrix4(Hh);
    }

    exports.Sprite = Xh, Xh.prototype.isSprite = !0;
    var Zh = new Yn(),
        Jh = new Yn();

    var Qh = /*#__PURE__*/function (_Jr5) {
      _inherits(Qh, _Jr5);

      var _super21 = _createSuper(Qh);

      function Qh() {
        var _this20;

        _classCallCheck(this, Qh);

        _this20 = _super21.call(this), _this20._currentLevel = 0, _this20.type = "LOD", Object.defineProperties(_assertThisInitialized(_this20), {
          levels: {
            enumerable: !0,
            value: []
          },
          isLOD: {
            value: !0
          }
        }), _this20.autoUpdate = !0;
        return _this20;
      }

      _createClass(Qh, [{
        key: "copy",
        value: function copy(t) {
          _get(_getPrototypeOf(Qh.prototype), "copy", this).call(this, t, !1);

          var e = t.levels;

          for (var _n102 = 0, _r101 = e.length; _n102 < _r101; _n102++) {
            var _t122 = e[_n102];
            this.addLevel(_t122.object.clone(), _t122.distance);
          }

          return this.autoUpdate = t.autoUpdate, this;
        }
      }, {
        key: "addLevel",
        value: function addLevel(t) {
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          e = Math.abs(e);
          var n = this.levels;
          var r;

          for (r = 0; r < n.length && !(e < n[r].distance); r++) {
            ;
          }

          return n.splice(r, 0, {
            distance: e,
            object: t
          }), this.add(t), this;
        }
      }, {
        key: "getCurrentLevel",
        value: function getCurrentLevel() {
          return this._currentLevel;
        }
      }, {
        key: "getObjectForDistance",
        value: function getObjectForDistance(t) {
          var e = this.levels;

          if (e.length > 0) {
            var _n103, _r102;

            for (_n103 = 1, _r102 = e.length; _n103 < _r102 && !(t < e[_n103].distance); _n103++) {
              ;
            }

            return e[_n103 - 1].object;
          }

          return null;
        }
      }, {
        key: "raycast",
        value: function raycast(t, e) {
          if (this.levels.length > 0) {
            Zh.setFromMatrixPosition(this.matrixWorld);

            var _n104 = t.ray.origin.distanceTo(Zh);

            this.getObjectForDistance(_n104).raycast(t, e);
          }
        }
      }, {
        key: "update",
        value: function update(t) {
          var e = this.levels;

          if (e.length > 1) {
            Zh.setFromMatrixPosition(t.matrixWorld), Jh.setFromMatrixPosition(this.matrixWorld);

            var _n105 = Zh.distanceTo(Jh) / t.zoom;

            var _r103, _i85;

            for (e[0].object.visible = !0, _r103 = 1, _i85 = e.length; _r103 < _i85 && _n105 >= e[_r103].distance; _r103++) {
              e[_r103 - 1].object.visible = !1, e[_r103].object.visible = !0;
            }

            for (this._currentLevel = _r103 - 1; _r103 < _i85; _r103++) {
              e[_r103].object.visible = !1;
            }
          }
        }
      }, {
        key: "toJSON",
        value: function toJSON(t) {
          var e = _get(_getPrototypeOf(Qh.prototype), "toJSON", this).call(this, t);

          !1 === this.autoUpdate && (e.object.autoUpdate = !1), e.object.levels = [];
          var n = this.levels;

          for (var _r104 = 0, _i86 = n.length; _r104 < _i86; _r104++) {
            var _t123 = n[_r104];
            e.object.levels.push({
              object: _t123.object.uuid,
              distance: _t123.distance
            });
          }

          return e;
        }
      }]);

      return Qh;
    }(Jr);

    exports.LOD = Qh;
    var Kh = new Yn(),
        $h = new Wn(),
        tu = new Wn(),
        eu = new Yn(),
        nu = new Tr();

    function ru(t, e) {
      cs.call(this, t, e), this.type = "SkinnedMesh", this.bindMode = "attached", this.bindMatrix = new Tr(), this.bindMatrixInverse = new Tr();
    }

    function iu() {
      Jr.call(this), this.type = "Bone";
    }

    ru.prototype = Object.assign(Object.create(cs.prototype), {
      constructor: ru,
      isSkinnedMesh: !0,
      copy: function copy(t) {
        return cs.prototype.copy.call(this, t), this.bindMode = t.bindMode, this.bindMatrix.copy(t.bindMatrix), this.bindMatrixInverse.copy(t.bindMatrixInverse), this.skeleton = t.skeleton, this;
      },
      bind: function bind(t, e) {
        this.skeleton = t, void 0 === e && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), e = this.matrixWorld), this.bindMatrix.copy(e), this.bindMatrixInverse.copy(e).invert();
      },
      pose: function pose() {
        this.skeleton.pose();
      },
      normalizeSkinWeights: function normalizeSkinWeights() {
        var t = new Wn(),
            e = this.geometry.attributes.skinWeight;

        for (var _n106 = 0, _r105 = e.count; _n106 < _r105; _n106++) {
          t.x = e.getX(_n106), t.y = e.getY(_n106), t.z = e.getZ(_n106), t.w = e.getW(_n106);

          var _r106 = 1 / t.manhattanLength();

          _r106 !== 1 / 0 ? t.multiplyScalar(_r106) : t.set(1, 0, 0, 0), e.setXYZW(_n106, t.x, t.y, t.z, t.w);
        }
      },
      updateMatrixWorld: function updateMatrixWorld(t) {
        cs.prototype.updateMatrixWorld.call(this, t), "attached" === this.bindMode ? this.bindMatrixInverse.copy(this.matrixWorld).invert() : "detached" === this.bindMode ? this.bindMatrixInverse.copy(this.bindMatrix).invert() : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
      },
      boneTransform: function boneTransform(t, e) {
        var n = this.skeleton,
            r = this.geometry;
        $h.fromBufferAttribute(r.attributes.skinIndex, t), tu.fromBufferAttribute(r.attributes.skinWeight, t), Kh.fromBufferAttribute(r.attributes.position, t).applyMatrix4(this.bindMatrix), e.set(0, 0, 0);

        for (var _i87 = 0; _i87 < 4; _i87++) {
          var _t124 = tu.getComponent(_i87);

          if (0 !== _t124) {
            var _r107 = $h.getComponent(_i87);

            nu.multiplyMatrices(n.bones[_r107].matrixWorld, n.boneInverses[_r107]), e.addScaledVector(eu.copy(Kh).applyMatrix4(nu), _t124);
          }
        }

        return e.applyMatrix4(this.bindMatrixInverse);
      }
    }), iu.prototype = Object.assign(Object.create(Jr.prototype), {
      constructor: iu,
      isBone: !0
    });
    var su = new Tr(),
        ou = new Tr();

    var au = /*#__PURE__*/function () {
      function au() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

        _classCallCheck(this, au);

        this.uuid = Fn.generateUUID(), this.bones = t.slice(0), this.boneInverses = e, this.boneMatrices = null, this.boneTexture = null, this.boneTextureSize = 0, this.frame = -1, this.init();
      }

      _createClass(au, [{
        key: "init",
        value: function init() {
          var t = this.bones,
              e = this.boneInverses;
          if (this.boneMatrices = new Float32Array(16 * t.length), 0 === e.length) this.calculateInverses();else if (t.length !== e.length) {
            console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."), this.boneInverses = [];

            for (var _t125 = 0, _e98 = this.bones.length; _t125 < _e98; _t125++) {
              this.boneInverses.push(new Tr());
            }
          }
        }
      }, {
        key: "calculateInverses",
        value: function calculateInverses() {
          this.boneInverses.length = 0;

          for (var _t126 = 0, _e99 = this.bones.length; _t126 < _e99; _t126++) {
            var _e100 = new Tr();

            this.bones[_t126] && _e100.copy(this.bones[_t126].matrixWorld).invert(), this.boneInverses.push(_e100);
          }
        }
      }, {
        key: "pose",
        value: function pose() {
          for (var _t127 = 0, _e101 = this.bones.length; _t127 < _e101; _t127++) {
            var _e102 = this.bones[_t127];
            _e102 && _e102.matrixWorld.copy(this.boneInverses[_t127]).invert();
          }

          for (var _t128 = 0, _e103 = this.bones.length; _t128 < _e103; _t128++) {
            var _e104 = this.bones[_t128];
            _e104 && (_e104.parent && _e104.parent.isBone ? (_e104.matrix.copy(_e104.parent.matrixWorld).invert(), _e104.matrix.multiply(_e104.matrixWorld)) : _e104.matrix.copy(_e104.matrixWorld), _e104.matrix.decompose(_e104.position, _e104.quaternion, _e104.scale));
          }
        }
      }, {
        key: "update",
        value: function update() {
          var t = this.bones,
              e = this.boneInverses,
              n = this.boneMatrices,
              r = this.boneTexture;

          for (var _i88 = 0, _s42 = t.length; _i88 < _s42; _i88++) {
            var _r108 = t[_i88] ? t[_i88].matrixWorld : ou;

            su.multiplyMatrices(_r108, e[_i88]), su.toArray(n, 16 * _i88);
          }

          null !== r && (r.needsUpdate = !0);
        }
      }, {
        key: "clone",
        value: function clone() {
          return new au(this.bones, this.boneInverses);
        }
      }, {
        key: "getBoneByName",
        value: function getBoneByName(t) {
          for (var _e105 = 0, _n107 = this.bones.length; _e105 < _n107; _e105++) {
            var _n108 = this.bones[_e105];
            if (_n108.name === t) return _n108;
          }
        }
      }, {
        key: "dispose",
        value: function dispose() {
          null !== this.boneTexture && (this.boneTexture.dispose(), this.boneTexture = null);
        }
      }, {
        key: "fromJSON",
        value: function fromJSON(t, e) {
          this.uuid = t.uuid;

          for (var _n109 = 0, _r109 = t.bones.length; _n109 < _r109; _n109++) {
            var _r110 = t.bones[_n109];
            var _i89 = e[_r110];
            void 0 === _i89 && (console.warn("THREE.Skeleton: No bone found with UUID:", _r110), _i89 = new iu()), this.bones.push(_i89), this.boneInverses.push(new Tr().fromArray(t.boneInverses[_n109]));
          }

          return this.init(), this;
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          var t = {
            metadata: {
              version: 4.5,
              type: "Skeleton",
              generator: "Skeleton.toJSON"
            },
            bones: [],
            boneInverses: []
          };
          t.uuid = this.uuid;
          var e = this.bones,
              n = this.boneInverses;

          for (var _r111 = 0, _i90 = e.length; _r111 < _i90; _r111++) {
            var _i91 = e[_r111];
            t.bones.push(_i91.uuid);
            var _s43 = n[_r111];
            t.boneInverses.push(_s43.toArray());
          }

          return t;
        }
      }]);

      return au;
    }();

    exports.Skeleton = au;
    var lu = new Tr(),
        cu = new Tr(),
        hu = [],
        uu = new cs();

    function pu(t, e, n) {
      cs.call(this, t, e), this.instanceMatrix = new Si(new Float32Array(16 * n), 16), this.instanceColor = null, this.count = n, this.frustumCulled = !1;
    }

    pu.prototype = Object.assign(Object.create(cs.prototype), {
      constructor: pu,
      isInstancedMesh: !0,
      copy: function copy(t) {
        return cs.prototype.copy.call(this, t), this.instanceMatrix.copy(t.instanceMatrix), null !== t.instanceColor && (this.instanceColor = t.instanceColor.clone()), this.count = t.count, this;
      },
      getColorAt: function getColorAt(t, e) {
        e.fromArray(this.instanceColor.array, 3 * t);
      },
      getMatrixAt: function getMatrixAt(t, e) {
        e.fromArray(this.instanceMatrix.array, 16 * t);
      },
      raycast: function raycast(t, e) {
        var n = this.matrixWorld,
            r = this.count;
        if (uu.geometry = this.geometry, uu.material = this.material, void 0 !== uu.material) for (var _i92 = 0; _i92 < r; _i92++) {
          this.getMatrixAt(_i92, lu), cu.multiplyMatrices(n, lu), uu.matrixWorld = cu, uu.raycast(t, hu);

          for (var _t129 = 0, _n110 = hu.length; _t129 < _n110; _t129++) {
            var _n111 = hu[_t129];
            _n111.instanceId = _i92, _n111.object = this, e.push(_n111);
          }

          hu.length = 0;
        }
      },
      setColorAt: function setColorAt(t, e) {
        null === this.instanceColor && (this.instanceColor = new Si(new Float32Array(3 * this.count), 3)), e.toArray(this.instanceColor.array, 3 * t);
      },
      setMatrixAt: function setMatrixAt(t, e) {
        e.toArray(this.instanceMatrix.array, 16 * t);
      },
      updateMorphTargets: function updateMorphTargets() {},
      dispose: function dispose() {
        this.dispatchEvent({
          type: "dispose"
        });
      }
    });

    var du = /*#__PURE__*/function (_di5) {
      _inherits(du, _di5);

      var _super22 = _createSuper(du);

      function du(t) {
        var _this21;

        _classCallCheck(this, du);

        _this21 = _super22.call(this), _this21.type = "LineBasicMaterial", _this21.color = new _i(16777215), _this21.linewidth = 1, _this21.linecap = "round", _this21.linejoin = "round", _this21.morphTargets = !1, _this21.setValues(t);
        return _this21;
      }

      _createClass(du, [{
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(du.prototype), "copy", this).call(this, t), this.color.copy(t.color), this.linewidth = t.linewidth, this.linecap = t.linecap, this.linejoin = t.linejoin, this.morphTargets = t.morphTargets, this;
        }
      }]);

      return du;
    }(di);

    exports.LineBasicMaterial = du, du.prototype.isLineBasicMaterial = !0;
    var mu = new Yn(),
        fu = new Yn(),
        gu = new Tr(),
        xu = new Sr(),
        vu = new gr();

    function yu() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new ji();
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new du();
      Jr.call(this), this.type = "Line", this.geometry = t, this.material = e, this.updateMorphTargets();
    }

    yu.prototype = Object.assign(Object.create(Jr.prototype), {
      constructor: yu,
      isLine: !0,
      copy: function copy(t) {
        return Jr.prototype.copy.call(this, t), this.material = t.material, this.geometry = t.geometry, this;
      },
      computeLineDistances: function computeLineDistances() {
        var t = this.geometry;
        if (t.isBufferGeometry) {
          if (null === t.index) {
            var _e106 = t.attributes.position,
                _n112 = [0];

            for (var _t130 = 1, _r112 = _e106.count; _t130 < _r112; _t130++) {
              mu.fromBufferAttribute(_e106, _t130 - 1), fu.fromBufferAttribute(_e106, _t130), _n112[_t130] = _n112[_t130 - 1], _n112[_t130] += mu.distanceTo(fu);
            }

            t.setAttribute("lineDistance", new Ii(_n112, 1));
          } else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        } else t.isGeometry && console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
        return this;
      },
      raycast: function raycast(t, e) {
        var n = this.geometry,
            r = this.matrixWorld,
            i = t.params.Line.threshold,
            s = n.drawRange;
        if (null === n.boundingSphere && n.computeBoundingSphere(), vu.copy(n.boundingSphere), vu.applyMatrix4(r), vu.radius += i, !1 === t.ray.intersectsSphere(vu)) return;
        gu.copy(r).invert(), xu.copy(t.ray).applyMatrix4(gu);
        var o = i / ((this.scale.x + this.scale.y + this.scale.z) / 3),
            a = o * o,
            l = new Yn(),
            c = new Yn(),
            h = new Yn(),
            u = new Yn(),
            p = this.isLineSegments ? 2 : 1;

        if (n.isBufferGeometry) {
          var _r113 = n.index,
              _i93 = n.attributes.position;

          if (null !== _r113) {
            for (var _n113 = Math.max(0, s.start), _o36 = Math.min(_r113.count, s.start + s.count) - 1; _n113 < _o36; _n113 += p) {
              var _s44 = _r113.getX(_n113),
                  _o37 = _r113.getX(_n113 + 1);

              if (l.fromBufferAttribute(_i93, _s44), c.fromBufferAttribute(_i93, _o37), xu.distanceSqToSegment(l, c, u, h) > a) continue;
              u.applyMatrix4(this.matrixWorld);

              var _p8 = t.ray.origin.distanceTo(u);

              _p8 < t.near || _p8 > t.far || e.push({
                distance: _p8,
                point: h.clone().applyMatrix4(this.matrixWorld),
                index: _n113,
                face: null,
                faceIndex: null,
                object: this
              });
            }
          } else {
            for (var _n114 = Math.max(0, s.start), _r114 = Math.min(_i93.count, s.start + s.count) - 1; _n114 < _r114; _n114 += p) {
              if (l.fromBufferAttribute(_i93, _n114), c.fromBufferAttribute(_i93, _n114 + 1), xu.distanceSqToSegment(l, c, u, h) > a) continue;
              u.applyMatrix4(this.matrixWorld);

              var _r115 = t.ray.origin.distanceTo(u);

              _r115 < t.near || _r115 > t.far || e.push({
                distance: _r115,
                point: h.clone().applyMatrix4(this.matrixWorld),
                index: _n114,
                face: null,
                faceIndex: null,
                object: this
              });
            }
          }
        } else n.isGeometry && console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
      },
      updateMorphTargets: function updateMorphTargets() {
        var t = this.geometry;

        if (t.isBufferGeometry) {
          var _e107 = t.morphAttributes,
              _n115 = Object.keys(_e107);

          if (_n115.length > 0) {
            var _t131 = _e107[_n115[0]];

            if (void 0 !== _t131) {
              this.morphTargetInfluences = [], this.morphTargetDictionary = {};

              for (var _e108 = 0, _n116 = _t131.length; _e108 < _n116; _e108++) {
                var _n117 = _t131[_e108].name || String(_e108);

                this.morphTargetInfluences.push(0), this.morphTargetDictionary[_n117] = _e108;
              }
            }
          }
        } else {
          var _e109 = t.morphTargets;
          void 0 !== _e109 && _e109.length > 0 && console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.");
        }
      }
    });

    var _u = new Yn(),
        bu = new Yn();

    function wu(t, e) {
      yu.call(this, t, e), this.type = "LineSegments";
    }

    wu.prototype = Object.assign(Object.create(yu.prototype), {
      constructor: wu,
      isLineSegments: !0,
      computeLineDistances: function computeLineDistances() {
        var t = this.geometry;
        if (t.isBufferGeometry) {
          if (null === t.index) {
            var _e110 = t.attributes.position,
                _n118 = [];

            for (var _t132 = 0, _r116 = _e110.count; _t132 < _r116; _t132 += 2) {
              _u.fromBufferAttribute(_e110, _t132), bu.fromBufferAttribute(_e110, _t132 + 1), _n118[_t132] = 0 === _t132 ? 0 : _n118[_t132 - 1], _n118[_t132 + 1] = _n118[_t132] + _u.distanceTo(bu);
            }

            t.setAttribute("lineDistance", new Ii(_n118, 1));
          } else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        } else t.isGeometry && console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
        return this;
      }
    });

    var Mu = /*#__PURE__*/function (_yu) {
      _inherits(Mu, _yu);

      var _super23 = _createSuper(Mu);

      function Mu(t, e) {
        var _this22;

        _classCallCheck(this, Mu);

        _this22 = _super23.call(this, t, e), _this22.type = "LineLoop";
        return _this22;
      }

      return Mu;
    }(yu);

    exports.LineLoop = Mu, Mu.prototype.isLineLoop = !0;

    var Su = /*#__PURE__*/function (_di6) {
      _inherits(Su, _di6);

      var _super24 = _createSuper(Su);

      function Su(t) {
        var _this23;

        _classCallCheck(this, Su);

        _this23 = _super24.call(this), _this23.type = "PointsMaterial", _this23.color = new _i(16777215), _this23.map = null, _this23.alphaMap = null, _this23.size = 1, _this23.sizeAttenuation = !0, _this23.morphTargets = !1, _this23.setValues(t);
        return _this23;
      }

      _createClass(Su, [{
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(Su.prototype), "copy", this).call(this, t), this.color.copy(t.color), this.map = t.map, this.alphaMap = t.alphaMap, this.size = t.size, this.sizeAttenuation = t.sizeAttenuation, this.morphTargets = t.morphTargets, this;
        }
      }]);

      return Su;
    }(di);

    exports.PointsMaterial = Su, Su.prototype.isPointsMaterial = !0;
    var Tu = new Tr(),
        Eu = new Sr(),
        Au = new gr(),
        Lu = new Yn();

    function Ru() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new ji();
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Su();
      Jr.call(this), this.type = "Points", this.geometry = t, this.material = e, this.updateMorphTargets();
    }

    function Cu(t, e, n, r, i, s, o) {
      var a = Eu.distanceSqToPoint(t);

      if (a < n) {
        var _n119 = new Yn();

        Eu.closestPointToPoint(t, _n119), _n119.applyMatrix4(r);

        var _l25 = i.ray.origin.distanceTo(_n119);

        if (_l25 < i.near || _l25 > i.far) return;
        s.push({
          distance: _l25,
          distanceToRay: Math.sqrt(a),
          point: _n119,
          index: e,
          face: null,
          object: o
        });
      }
    }

    Ru.prototype = Object.assign(Object.create(Jr.prototype), {
      constructor: Ru,
      isPoints: !0,
      copy: function copy(t) {
        return Jr.prototype.copy.call(this, t), this.material = t.material, this.geometry = t.geometry, this;
      },
      raycast: function raycast(t, e) {
        var n = this.geometry,
            r = this.matrixWorld,
            i = t.params.Points.threshold,
            s = n.drawRange;
        if (null === n.boundingSphere && n.computeBoundingSphere(), Au.copy(n.boundingSphere), Au.applyMatrix4(r), Au.radius += i, !1 === t.ray.intersectsSphere(Au)) return;
        Tu.copy(r).invert(), Eu.copy(t.ray).applyMatrix4(Tu);
        var o = i / ((this.scale.x + this.scale.y + this.scale.z) / 3),
            a = o * o;

        if (n.isBufferGeometry) {
          var _i94 = n.index,
              _o38 = n.attributes.position;

          if (null !== _i94) {
            for (var _n120 = Math.max(0, s.start), _l26 = Math.min(_i94.count, s.start + s.count); _n120 < _l26; _n120++) {
              var _s45 = _i94.getX(_n120);

              Lu.fromBufferAttribute(_o38, _s45), Cu(Lu, _s45, a, r, t, e, this);
            }
          } else {
            for (var _n121 = Math.max(0, s.start), _i95 = Math.min(_o38.count, s.start + s.count); _n121 < _i95; _n121++) {
              Lu.fromBufferAttribute(_o38, _n121), Cu(Lu, _n121, a, r, t, e, this);
            }
          }
        } else console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
      },
      updateMorphTargets: function updateMorphTargets() {
        var t = this.geometry;

        if (t.isBufferGeometry) {
          var _e111 = t.morphAttributes,
              _n122 = Object.keys(_e111);

          if (_n122.length > 0) {
            var _t133 = _e111[_n122[0]];

            if (void 0 !== _t133) {
              this.morphTargetInfluences = [], this.morphTargetDictionary = {};

              for (var _e112 = 0, _n123 = _t133.length; _e112 < _n123; _e112++) {
                var _n124 = _t133[_e112].name || String(_e112);

                this.morphTargetInfluences.push(0), this.morphTargetDictionary[_n124] = _e112;
              }
            }
          }
        } else {
          var _e113 = t.morphTargets;
          void 0 !== _e113 && _e113.length > 0 && console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.");
        }
      }
    });

    var Pu = /*#__PURE__*/function (_kn5) {
      _inherits(Pu, _kn5);

      var _super25 = _createSuper(Pu);

      function Pu(t, e, n, r, i, s, o, a, l) {
        var _this24;

        _classCallCheck(this, Pu);

        _this24 = _super25.call(this, t, e, n, r, i, s, o, a, l), _this24.format = void 0 !== o ? o : Bt, _this24.minFilter = void 0 !== s ? s : gt, _this24.magFilter = void 0 !== i ? i : gt, _this24.generateMipmaps = !1;

        var c = _assertThisInitialized(_this24);

        "requestVideoFrameCallback" in t && t.requestVideoFrameCallback(function e() {
          c.needsUpdate = !0, t.requestVideoFrameCallback(e);
        });
        return _this24;
      }

      _createClass(Pu, [{
        key: "clone",
        value: function clone() {
          return new this.constructor(this.image).copy(this);
        }
      }, {
        key: "update",
        value: function update() {
          var t = this.image;
          !1 === "requestVideoFrameCallback" in t && t.readyState >= t.HAVE_CURRENT_DATA && (this.needsUpdate = !0);
        }
      }]);

      return Pu;
    }(kn);

    exports.VideoTexture = Pu, Pu.prototype.isVideoTexture = !0;

    var Du = /*#__PURE__*/function (_kn6) {
      _inherits(Du, _kn6);

      var _super26 = _createSuper(Du);

      function Du(t, e, n, r, i, s, o, a, l, c, h, u) {
        var _this25;

        _classCallCheck(this, Du);

        _this25 = _super26.call(this, null, s, o, a, l, c, r, i, h, u), _this25.image = {
          width: e,
          height: n
        }, _this25.mipmaps = t, _this25.flipY = !1, _this25.generateMipmaps = !1;
        return _this25;
      }

      return Du;
    }(kn);

    exports.CompressedTexture = Du, Du.prototype.isCompressedTexture = !0;

    var Iu = /*#__PURE__*/function (_kn7) {
      _inherits(Iu, _kn7);

      var _super27 = _createSuper(Iu);

      function Iu(t, e, n, r, i, s, o, a, l) {
        var _this26;

        _classCallCheck(this, Iu);

        _this26 = _super27.call(this, t, e, n, r, i, s, o, a, l), _this26.needsUpdate = !0;
        return _this26;
      }

      return Iu;
    }(kn);

    exports.CanvasTexture = Iu, Iu.prototype.isCanvasTexture = !0;

    var Bu = /*#__PURE__*/function (_kn8) {
      _inherits(Bu, _kn8);

      var _super28 = _createSuper(Bu);

      function Bu(t, e, n, r, i, s, o, a, l, c) {
        var _this27;

        _classCallCheck(this, Bu);

        if ((c = void 0 !== c ? c : Gt) !== Gt && c !== Ht) throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
        void 0 === n && c === Gt && (n = St), void 0 === n && c === Ht && (n = Dt), _this27 = _super28.call(this, null, r, i, s, o, a, c, n, l), _this27.image = {
          width: t,
          height: e
        }, _this27.magFilter = void 0 !== o ? o : ut, _this27.minFilter = void 0 !== a ? a : ut, _this27.flipY = !1, _this27.generateMipmaps = !1;
        return _this27;
      }

      return Bu;
    }(kn);

    exports.DepthTexture = Bu, Bu.prototype.isDepthTexture = !0;

    var Nu = /*#__PURE__*/function (_ji3) {
      _inherits(Nu, _ji3);

      var _super29 = _createSuper(Nu);

      function Nu() {
        var _this28;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2 * Math.PI;

        _classCallCheck(this, Nu);

        _this28 = _super29.call(this), _this28.type = "CircleGeometry", _this28.parameters = {
          radius: t,
          segments: e,
          thetaStart: n,
          thetaLength: r
        }, e = Math.max(3, e);
        var i = [],
            s = [],
            o = [],
            a = [],
            l = new Yn(),
            c = new On();
        s.push(0, 0, 0), o.push(0, 0, 1), a.push(.5, .5);

        for (var _h8 = 0, _u11 = 3; _h8 <= e; _h8++, _u11 += 3) {
          var _i96 = n + _h8 / e * r;

          l.x = t * Math.cos(_i96), l.y = t * Math.sin(_i96), s.push(l.x, l.y, l.z), o.push(0, 0, 1), c.x = (s[_u11] / t + 1) / 2, c.y = (s[_u11 + 1] / t + 1) / 2, a.push(c.x, c.y);
        }

        for (var _h9 = 1; _h9 <= e; _h9++) {
          i.push(_h9, _h9 + 1, 0);
        }

        _this28.setIndex(i), _this28.setAttribute("position", new Ii(s, 3)), _this28.setAttribute("normal", new Ii(o, 3)), _this28.setAttribute("uv", new Ii(a, 2));
        return _this28;
      }

      return Nu;
    }(ji);

    exports.CircleGeometry = exports.CircleBufferGeometry = Nu;

    var Fu = /*#__PURE__*/function (_ji4) {
      _inherits(Fu, _ji4);

      var _super30 = _createSuper(Fu);

      function Fu() {
        var _this29;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;
        var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
        var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : !1;
        var o = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
        var a = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 2 * Math.PI;

        _classCallCheck(this, Fu);

        _this29 = _super30.call(this), _this29.type = "CylinderGeometry", _this29.parameters = {
          radiusTop: t,
          radiusBottom: e,
          height: n,
          radialSegments: r,
          heightSegments: i,
          openEnded: s,
          thetaStart: o,
          thetaLength: a
        };

        var l = _assertThisInitialized(_this29);

        r = Math.floor(r), i = Math.floor(i);
        var c = [],
            h = [],
            u = [],
            p = [];
        var d = 0;
        var m = [],
            f = n / 2;
        var g = 0;

        function x(n) {
          var i = d,
              s = new On(),
              m = new Yn();
          var x = 0;
          var v = !0 === n ? t : e,
              y = !0 === n ? 1 : -1;

          for (var _t134 = 1; _t134 <= r; _t134++) {
            h.push(0, f * y, 0), u.push(0, y, 0), p.push(.5, .5), d++;
          }

          var _ = d;

          for (var _t135 = 0; _t135 <= r; _t135++) {
            var _e114 = _t135 / r * a + o,
                _n125 = Math.cos(_e114),
                _i97 = Math.sin(_e114);

            m.x = v * _i97, m.y = f * y, m.z = v * _n125, h.push(m.x, m.y, m.z), u.push(0, y, 0), s.x = .5 * _n125 + .5, s.y = .5 * _i97 * y + .5, p.push(s.x, s.y), d++;
          }

          for (var _t136 = 0; _t136 < r; _t136++) {
            var _e115 = i + _t136,
                _r117 = _ + _t136;

            !0 === n ? c.push(_r117, _r117 + 1, _e115) : c.push(_r117 + 1, _r117, _e115), x += 3;
          }

          l.addGroup(g, x, !0 === n ? 1 : 2), g += x;
        }

        !function () {
          var s = new Yn(),
              x = new Yn();
          var v = 0;
          var y = (e - t) / n;

          for (var _l27 = 0; _l27 <= i; _l27++) {
            var _c19 = [],
                _g5 = _l27 / i,
                _v3 = _g5 * (e - t) + t;

            for (var _t137 = 0; _t137 <= r; _t137++) {
              var _e116 = _t137 / r,
                  _i98 = _e116 * a + o,
                  _l28 = Math.sin(_i98),
                  _m6 = Math.cos(_i98);

              x.x = _v3 * _l28, x.y = -_g5 * n + f, x.z = _v3 * _m6, h.push(x.x, x.y, x.z), s.set(_l28, y, _m6).normalize(), u.push(s.x, s.y, s.z), p.push(_e116, 1 - _g5), _c19.push(d++);
            }

            m.push(_c19);
          }

          for (var _t138 = 0; _t138 < r; _t138++) {
            for (var _e117 = 0; _e117 < i; _e117++) {
              var _n126 = m[_e117][_t138],
                  _r118 = m[_e117 + 1][_t138],
                  _i99 = m[_e117 + 1][_t138 + 1],
                  _s46 = m[_e117][_t138 + 1];
              c.push(_n126, _r118, _s46), c.push(_r118, _i99, _s46), v += 6;
            }
          }

          l.addGroup(g, v, 0), g += v;
        }(), !1 === s && (t > 0 && x(!0), e > 0 && x(!1)), _this29.setIndex(c), _this29.setAttribute("position", new Ii(h, 3)), _this29.setAttribute("normal", new Ii(u, 3)), _this29.setAttribute("uv", new Ii(p, 2));
        return _this29;
      }

      return Fu;
    }(ji);

    exports.CylinderGeometry = exports.CylinderBufferGeometry = Fu;

    var Ou = /*#__PURE__*/function (_Fu) {
      _inherits(Ou, _Fu);

      var _super31 = _createSuper(Ou);

      function Ou() {
        var _this30;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
        var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : !1;
        var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
        var o = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 2 * Math.PI;

        _classCallCheck(this, Ou);

        _this30 = _super31.call(this, 0, t, e, n, r, i, s, o), _this30.type = "ConeGeometry", _this30.parameters = {
          radius: t,
          height: e,
          radialSegments: n,
          heightSegments: r,
          openEnded: i,
          thetaStart: s,
          thetaLength: o
        };
        return _this30;
      }

      return Ou;
    }(Fu);

    exports.ConeGeometry = exports.ConeBufferGeometry = Ou;

    var zu = /*#__PURE__*/function (_ji5) {
      _inherits(zu, _ji5);

      var _super32 = _createSuper(zu);

      function zu(t, e) {
        var _this31;

        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

        _classCallCheck(this, zu);

        _this31 = _super32.call(this), _this31.type = "PolyhedronGeometry", _this31.parameters = {
          vertices: t,
          indices: e,
          radius: n,
          detail: r
        };
        var i = [],
            s = [];

        function o(t, e, n, r) {
          var i = r + 1,
              s = [];

          for (var _o39 = 0; _o39 <= i; _o39++) {
            s[_o39] = [];

            var _r119 = t.clone().lerp(n, _o39 / i),
                _a24 = e.clone().lerp(n, _o39 / i),
                _l29 = i - _o39;

            for (var _t139 = 0; _t139 <= _l29; _t139++) {
              s[_o39][_t139] = 0 === _t139 && _o39 === i ? _r119 : _r119.clone().lerp(_a24, _t139 / _l29);
            }
          }

          for (var _o40 = 0; _o40 < i; _o40++) {
            for (var _t140 = 0; _t140 < 2 * (i - _o40) - 1; _t140++) {
              var _e118 = Math.floor(_t140 / 2);

              _t140 % 2 == 0 ? (a(s[_o40][_e118 + 1]), a(s[_o40 + 1][_e118]), a(s[_o40][_e118])) : (a(s[_o40][_e118 + 1]), a(s[_o40 + 1][_e118 + 1]), a(s[_o40 + 1][_e118]));
            }
          }
        }

        function a(t) {
          i.push(t.x, t.y, t.z);
        }

        function l(e, n) {
          var r = 3 * e;
          n.x = t[r + 0], n.y = t[r + 1], n.z = t[r + 2];
        }

        function c(t, e, n, r) {
          r < 0 && 1 === t.x && (s[e] = t.x - 1), 0 === n.x && 0 === n.z && (s[e] = r / 2 / Math.PI + .5);
        }

        function h(t) {
          return Math.atan2(t.z, -t.x);
        }

        !function (t) {
          var n = new Yn(),
              r = new Yn(),
              i = new Yn();

          for (var _s47 = 0; _s47 < e.length; _s47 += 3) {
            l(e[_s47 + 0], n), l(e[_s47 + 1], r), l(e[_s47 + 2], i), o(n, r, i, t);
          }
        }(r), function (t) {
          var e = new Yn();

          for (var _n127 = 0; _n127 < i.length; _n127 += 3) {
            e.x = i[_n127 + 0], e.y = i[_n127 + 1], e.z = i[_n127 + 2], e.normalize().multiplyScalar(t), i[_n127 + 0] = e.x, i[_n127 + 1] = e.y, i[_n127 + 2] = e.z;
          }
        }(n), function () {
          var t = new Yn();

          for (var _n128 = 0; _n128 < i.length; _n128 += 3) {
            t.x = i[_n128 + 0], t.y = i[_n128 + 1], t.z = i[_n128 + 2];

            var _r120 = h(t) / 2 / Math.PI + .5,
                _o41 = (e = t, Math.atan2(-e.y, Math.sqrt(e.x * e.x + e.z * e.z)) / Math.PI + .5);

            s.push(_r120, 1 - _o41);
          }

          var e;
          (function () {
            var t = new Yn(),
                e = new Yn(),
                n = new Yn(),
                r = new Yn(),
                o = new On(),
                a = new On(),
                l = new On();

            for (var _u12 = 0, _p9 = 0; _u12 < i.length; _u12 += 9, _p9 += 6) {
              t.set(i[_u12 + 0], i[_u12 + 1], i[_u12 + 2]), e.set(i[_u12 + 3], i[_u12 + 4], i[_u12 + 5]), n.set(i[_u12 + 6], i[_u12 + 7], i[_u12 + 8]), o.set(s[_p9 + 0], s[_p9 + 1]), a.set(s[_p9 + 2], s[_p9 + 3]), l.set(s[_p9 + 4], s[_p9 + 5]), r.copy(t).add(e).add(n).divideScalar(3);

              var _d10 = h(r);

              c(o, _p9 + 0, t, _d10), c(a, _p9 + 2, e, _d10), c(l, _p9 + 4, n, _d10);
            }
          })(), function () {
            for (var _t141 = 0; _t141 < s.length; _t141 += 6) {
              var _e119 = s[_t141 + 0],
                  _n129 = s[_t141 + 2],
                  _r121 = s[_t141 + 4],
                  _i100 = Math.max(_e119, _n129, _r121),
                  _o42 = Math.min(_e119, _n129, _r121);

              _i100 > .9 && _o42 < .1 && (_e119 < .2 && (s[_t141 + 0] += 1), _n129 < .2 && (s[_t141 + 2] += 1), _r121 < .2 && (s[_t141 + 4] += 1));
            }
          }();
        }(), _this31.setAttribute("position", new Ii(i, 3)), _this31.setAttribute("normal", new Ii(i.slice(), 3)), _this31.setAttribute("uv", new Ii(s, 2)), 0 === r ? _this31.computeVertexNormals() : _this31.normalizeNormals();
        return _this31;
      }

      return zu;
    }(ji);

    exports.PolyhedronGeometry = exports.PolyhedronBufferGeometry = zu;

    var Gu = /*#__PURE__*/function (_zu) {
      _inherits(Gu, _zu);

      var _super33 = _createSuper(Gu);

      function Gu() {
        var _this32;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        _classCallCheck(this, Gu);

        var n = (1 + Math.sqrt(5)) / 2,
            r = 1 / n;
        _this32 = _super33.call(this, [-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 0, -r, -n, 0, -r, n, 0, r, -n, 0, r, n, -r, -n, 0, -r, n, 0, r, -n, 0, r, n, 0, -n, 0, -r, n, 0, -r, -n, 0, r, n, 0, r], [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9], t, e), _this32.type = "DodecahedronGeometry", _this32.parameters = {
          radius: t,
          detail: e
        };
        return _this32;
      }

      return Gu;
    }(zu);

    exports.DodecahedronGeometry = exports.DodecahedronBufferGeometry = Gu;
    var Hu = new Yn(),
        Uu = new Yn(),
        ku = new Yn(),
        Vu = new ui();

    var Wu = /*#__PURE__*/function (_ji6) {
      _inherits(Wu, _ji6);

      var _super34 = _createSuper(Wu);

      function Wu(t, e) {
        var _this33;

        _classCallCheck(this, Wu);

        if (_this33 = _super34.call(this), _this33.type = "EdgesGeometry", _this33.parameters = {
          thresholdAngle: e
        }, e = void 0 !== e ? e : 1, !0 === t.isGeometry) return _possibleConstructorReturn(_this33, void console.error("THREE.EdgesGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead."));
        var n = Math.pow(10, 4),
            r = Math.cos(Fn.DEG2RAD * e),
            i = t.getIndex(),
            s = t.getAttribute("position"),
            o = i ? i.count : s.count,
            a = [0, 0, 0],
            l = ["a", "b", "c"],
            c = new Array(3),
            h = {},
            u = [];

        for (var _p10 = 0; _p10 < o; _p10 += 3) {
          i ? (a[0] = i.getX(_p10), a[1] = i.getX(_p10 + 1), a[2] = i.getX(_p10 + 2)) : (a[0] = _p10, a[1] = _p10 + 1, a[2] = _p10 + 2);
          var _t142 = Vu.a,
              _e120 = Vu.b,
              _o43 = Vu.c;
          if (_t142.fromBufferAttribute(s, a[0]), _e120.fromBufferAttribute(s, a[1]), _o43.fromBufferAttribute(s, a[2]), Vu.getNormal(ku), c[0] = "".concat(Math.round(_t142.x * n), ",").concat(Math.round(_t142.y * n), ",").concat(Math.round(_t142.z * n)), c[1] = "".concat(Math.round(_e120.x * n), ",").concat(Math.round(_e120.y * n), ",").concat(Math.round(_e120.z * n)), c[2] = "".concat(Math.round(_o43.x * n), ",").concat(Math.round(_o43.y * n), ",").concat(Math.round(_o43.z * n)), c[0] !== c[1] && c[1] !== c[2] && c[2] !== c[0]) for (var _n130 = 0; _n130 < 3; _n130++) {
            var _t143 = (_n130 + 1) % 3,
                _e121 = c[_n130],
                _i101 = c[_t143],
                _s48 = Vu[l[_n130]],
                _o44 = Vu[l[_t143]],
                _p11 = "".concat(_e121, "_").concat(_i101),
                _d11 = "".concat(_i101, "_").concat(_e121);

            _d11 in h && h[_d11] ? (ku.dot(h[_d11].normal) <= r && (u.push(_s48.x, _s48.y, _s48.z), u.push(_o44.x, _o44.y, _o44.z)), h[_d11] = null) : _p11 in h || (h[_p11] = {
              index0: a[_n130],
              index1: a[_t143],
              normal: ku.clone()
            });
          }
        }

        for (var _p12 in h) {
          if (h[_p12]) {
            var _h$_p = h[_p12],
                _t144 = _h$_p.index0,
                _e122 = _h$_p.index1;
            Hu.fromBufferAttribute(s, _t144), Uu.fromBufferAttribute(s, _e122), u.push(Hu.x, Hu.y, Hu.z), u.push(Uu.x, Uu.y, Uu.z);
          }
        }

        _this33.setAttribute("position", new Ii(u, 3));

        return _possibleConstructorReturn(_this33);
      }

      return Wu;
    }(ji);

    exports.EdgesGeometry = Wu;
    var ju = {
      triangulate: function triangulate(t, e, n) {
        n = n || 2;
        var r = e && e.length,
            i = r ? e[0] * n : t.length;
        var s = qu(t, 0, i, n, !0);
        var o = [];
        if (!s || s.next === s.prev) return o;
        var a, l, c, h, u, p, d;

        if (r && (s = $u(t, e, s, n)), t.length > 80 * n) {
          a = c = t[0], l = h = t[1];

          for (var _e123 = n; _e123 < i; _e123 += n) {
            (u = t[_e123]) < a && (a = u), (p = t[_e123 + 1]) < l && (l = p), u > c && (c = u), p > h && (h = p);
          }

          d = 0 !== (d = Math.max(c - a, h - l)) ? 1 / d : 0;
        }

        return Yu(s, o, n, a, l, d), o;
      }
    };

    function qu(t, e, n, r, i) {
      var s, o;
      if (i === wp(t, e, n, r) > 0) for (s = e; s < n; s += r) {
        o = yp(s, t[s], t[s + 1], o);
      } else for (s = n - r; s >= e; s -= r) {
        o = yp(s, t[s], t[s + 1], o);
      }
      return o && up(o, o.next) && (_p(o), o = o.next), o;
    }

    function Xu(t, e) {
      if (!t) return t;
      e || (e = t);
      var n,
          r = t;

      do {
        if (n = !1, r.steiner || !up(r, r.next) && 0 !== hp(r.prev, r, r.next)) r = r.next;else {
          if (_p(r), (r = e = r.prev) === r.next) break;
          n = !0;
        }
      } while (n || r !== e);

      return e;
    }

    function Yu(t, e, n, r, i, s, o) {
      if (!t) return;
      !o && s && ip(t, r, i, s);
      var a,
          l,
          c = t;

      for (; t.prev !== t.next;) {
        if (a = t.prev, l = t.next, s ? Ju(t, r, i, s) : Zu(t)) e.push(a.i / n), e.push(t.i / n), e.push(l.i / n), _p(t), t = l.next, c = l.next;else if ((t = l) === c) {
          o ? 1 === o ? Yu(t = Qu(Xu(t), e, n), e, n, r, i, s, 2) : 2 === o && Ku(t, e, n, r, i, s) : Yu(Xu(t), e, n, r, i, s, 1);
          break;
        }
      }
    }

    function Zu(t) {
      var e = t.prev,
          n = t,
          r = t.next;
      if (hp(e, n, r) >= 0) return !1;
      var i = t.next.next;

      for (; i !== t.prev;) {
        if (lp(e.x, e.y, n.x, n.y, r.x, r.y, i.x, i.y) && hp(i.prev, i, i.next) >= 0) return !1;
        i = i.next;
      }

      return !0;
    }

    function Ju(t, e, n, r) {
      var i = t.prev,
          s = t,
          o = t.next;
      if (hp(i, s, o) >= 0) return !1;
      var a = i.x < s.x ? i.x < o.x ? i.x : o.x : s.x < o.x ? s.x : o.x,
          l = i.y < s.y ? i.y < o.y ? i.y : o.y : s.y < o.y ? s.y : o.y,
          c = i.x > s.x ? i.x > o.x ? i.x : o.x : s.x > o.x ? s.x : o.x,
          h = i.y > s.y ? i.y > o.y ? i.y : o.y : s.y > o.y ? s.y : o.y,
          u = op(a, l, e, n, r),
          p = op(c, h, e, n, r);
      var d = t.prevZ,
          m = t.nextZ;

      for (; d && d.z >= u && m && m.z <= p;) {
        if (d !== t.prev && d !== t.next && lp(i.x, i.y, s.x, s.y, o.x, o.y, d.x, d.y) && hp(d.prev, d, d.next) >= 0) return !1;
        if (d = d.prevZ, m !== t.prev && m !== t.next && lp(i.x, i.y, s.x, s.y, o.x, o.y, m.x, m.y) && hp(m.prev, m, m.next) >= 0) return !1;
        m = m.nextZ;
      }

      for (; d && d.z >= u;) {
        if (d !== t.prev && d !== t.next && lp(i.x, i.y, s.x, s.y, o.x, o.y, d.x, d.y) && hp(d.prev, d, d.next) >= 0) return !1;
        d = d.prevZ;
      }

      for (; m && m.z <= p;) {
        if (m !== t.prev && m !== t.next && lp(i.x, i.y, s.x, s.y, o.x, o.y, m.x, m.y) && hp(m.prev, m, m.next) >= 0) return !1;
        m = m.nextZ;
      }

      return !0;
    }

    function Qu(t, e, n) {
      var r = t;

      do {
        var _i102 = r.prev,
            _s49 = r.next.next;
        !up(_i102, _s49) && pp(_i102, r, r.next, _s49) && gp(_i102, _s49) && gp(_s49, _i102) && (e.push(_i102.i / n), e.push(r.i / n), e.push(_s49.i / n), _p(r), _p(r.next), r = t = _s49), r = r.next;
      } while (r !== t);

      return Xu(r);
    }

    function Ku(t, e, n, r, i, s) {
      var o = t;

      do {
        var _t145 = o.next.next;

        for (; _t145 !== o.prev;) {
          if (o.i !== _t145.i && cp(o, _t145)) {
            var _a25 = vp(o, _t145);

            return o = Xu(o, o.next), _a25 = Xu(_a25, _a25.next), Yu(o, e, n, r, i, s), void Yu(_a25, e, n, r, i, s);
          }

          _t145 = _t145.next;
        }

        o = o.next;
      } while (o !== t);
    }

    function $u(t, e, n, r) {
      var i = [];
      var s, o, a, l, c;

      for (s = 0, o = e.length; s < o; s++) {
        (c = qu(t, a = e[s] * r, l = s < o - 1 ? e[s + 1] * r : t.length, r, !1)) === c.next && (c.steiner = !0), i.push(ap(c));
      }

      for (i.sort(tp), s = 0; s < i.length; s++) {
        ep(i[s], n), n = Xu(n, n.next);
      }

      return n;
    }

    function tp(t, e) {
      return t.x - e.x;
    }

    function ep(t, e) {
      if (e = np(t, e)) {
        var _n131 = vp(e, t);

        Xu(e, e.next), Xu(_n131, _n131.next);
      }
    }

    function np(t, e) {
      var n = e;
      var r = t.x,
          i = t.y;
      var s,
          o = -1 / 0;

      do {
        if (i <= n.y && i >= n.next.y && n.next.y !== n.y) {
          var _t146 = n.x + (i - n.y) * (n.next.x - n.x) / (n.next.y - n.y);

          if (_t146 <= r && _t146 > o) {
            if (o = _t146, _t146 === r) {
              if (i === n.y) return n;
              if (i === n.next.y) return n.next;
            }

            s = n.x < n.next.x ? n : n.next;
          }
        }

        n = n.next;
      } while (n !== e);

      if (!s) return null;
      if (r === o) return s;
      var a = s,
          l = s.x,
          c = s.y;
      var h,
          u = 1 / 0;
      n = s;

      do {
        r >= n.x && n.x >= l && r !== n.x && lp(i < c ? r : o, i, l, c, i < c ? o : r, i, n.x, n.y) && (h = Math.abs(i - n.y) / (r - n.x), gp(n, t) && (h < u || h === u && (n.x > s.x || n.x === s.x && rp(s, n))) && (s = n, u = h)), n = n.next;
      } while (n !== a);

      return s;
    }

    function rp(t, e) {
      return hp(t.prev, t, e.prev) < 0 && hp(e.next, t, t.next) < 0;
    }

    function ip(t, e, n, r) {
      var i = t;

      do {
        null === i.z && (i.z = op(i.x, i.y, e, n, r)), i.prevZ = i.prev, i.nextZ = i.next, i = i.next;
      } while (i !== t);

      i.prevZ.nextZ = null, i.prevZ = null, sp(i);
    }

    function sp(t) {
      var e,
          n,
          r,
          i,
          s,
          o,
          a,
          l,
          c = 1;

      do {
        for (n = t, t = null, s = null, o = 0; n;) {
          for (o++, r = n, a = 0, e = 0; e < c && (a++, r = r.nextZ); e++) {
            ;
          }

          for (l = c; a > 0 || l > 0 && r;) {
            0 !== a && (0 === l || !r || n.z <= r.z) ? (i = n, n = n.nextZ, a--) : (i = r, r = r.nextZ, l--), s ? s.nextZ = i : t = i, i.prevZ = s, s = i;
          }

          n = r;
        }

        s.nextZ = null, c *= 2;
      } while (o > 1);

      return t;
    }

    function op(t, e, n, r, i) {
      return (t = 1431655765 & ((t = 858993459 & ((t = 252645135 & ((t = 16711935 & ((t = 32767 * (t - n) * i) | t << 8)) | t << 4)) | t << 2)) | t << 1)) | (e = 1431655765 & ((e = 858993459 & ((e = 252645135 & ((e = 16711935 & ((e = 32767 * (e - r) * i) | e << 8)) | e << 4)) | e << 2)) | e << 1)) << 1;
    }

    function ap(t) {
      var e = t,
          n = t;

      do {
        (e.x < n.x || e.x === n.x && e.y < n.y) && (n = e), e = e.next;
      } while (e !== t);

      return n;
    }

    function lp(t, e, n, r, i, s, o, a) {
      return (i - o) * (e - a) - (t - o) * (s - a) >= 0 && (t - o) * (r - a) - (n - o) * (e - a) >= 0 && (n - o) * (s - a) - (i - o) * (r - a) >= 0;
    }

    function cp(t, e) {
      return t.next.i !== e.i && t.prev.i !== e.i && !fp(t, e) && (gp(t, e) && gp(e, t) && xp(t, e) && (hp(t.prev, t, e.prev) || hp(t, e.prev, e)) || up(t, e) && hp(t.prev, t, t.next) > 0 && hp(e.prev, e, e.next) > 0);
    }

    function hp(t, e, n) {
      return (e.y - t.y) * (n.x - e.x) - (e.x - t.x) * (n.y - e.y);
    }

    function up(t, e) {
      return t.x === e.x && t.y === e.y;
    }

    function pp(t, e, n, r) {
      var i = mp(hp(t, e, n)),
          s = mp(hp(t, e, r)),
          o = mp(hp(n, r, t)),
          a = mp(hp(n, r, e));
      return i !== s && o !== a || !(0 !== i || !dp(t, n, e)) || !(0 !== s || !dp(t, r, e)) || !(0 !== o || !dp(n, t, r)) || !(0 !== a || !dp(n, e, r));
    }

    function dp(t, e, n) {
      return e.x <= Math.max(t.x, n.x) && e.x >= Math.min(t.x, n.x) && e.y <= Math.max(t.y, n.y) && e.y >= Math.min(t.y, n.y);
    }

    function mp(t) {
      return t > 0 ? 1 : t < 0 ? -1 : 0;
    }

    function fp(t, e) {
      var n = t;

      do {
        if (n.i !== t.i && n.next.i !== t.i && n.i !== e.i && n.next.i !== e.i && pp(n, n.next, t, e)) return !0;
        n = n.next;
      } while (n !== t);

      return !1;
    }

    function gp(t, e) {
      return hp(t.prev, t, t.next) < 0 ? hp(t, e, t.next) >= 0 && hp(t, t.prev, e) >= 0 : hp(t, e, t.prev) < 0 || hp(t, t.next, e) < 0;
    }

    function xp(t, e) {
      var n = t,
          r = !1;
      var i = (t.x + e.x) / 2,
          s = (t.y + e.y) / 2;

      do {
        n.y > s != n.next.y > s && n.next.y !== n.y && i < (n.next.x - n.x) * (s - n.y) / (n.next.y - n.y) + n.x && (r = !r), n = n.next;
      } while (n !== t);

      return r;
    }

    function vp(t, e) {
      var n = new bp(t.i, t.x, t.y),
          r = new bp(e.i, e.x, e.y),
          i = t.next,
          s = e.prev;
      return t.next = e, e.prev = t, n.next = i, i.prev = n, r.next = n, n.prev = r, s.next = r, r.prev = s, r;
    }

    function yp(t, e, n, r) {
      var i = new bp(t, e, n);
      return r ? (i.next = r.next, i.prev = r, r.next.prev = i, r.next = i) : (i.prev = i, i.next = i), i;
    }

    function _p(t) {
      t.next.prev = t.prev, t.prev.next = t.next, t.prevZ && (t.prevZ.nextZ = t.nextZ), t.nextZ && (t.nextZ.prevZ = t.prevZ);
    }

    function bp(t, e, n) {
      this.i = t, this.x = e, this.y = n, this.prev = null, this.next = null, this.z = null, this.prevZ = null, this.nextZ = null, this.steiner = !1;
    }

    function wp(t, e, n, r) {
      var i = 0;

      for (var _s50 = e, _o45 = n - r; _s50 < n; _s50 += r) {
        i += (t[_o45] - t[_s50]) * (t[_s50 + 1] + t[_o45 + 1]), _o45 = _s50;
      }

      return i;
    }

    var Mp = {
      area: function area(t) {
        var e = t.length;
        var n = 0;

        for (var _r122 = e - 1, _i103 = 0; _i103 < e; _r122 = _i103++) {
          n += t[_r122].x * t[_i103].y - t[_i103].x * t[_r122].y;
        }

        return .5 * n;
      },
      isClockWise: function isClockWise(t) {
        return Mp.area(t) < 0;
      },
      triangulateShape: function triangulateShape(t, e) {
        var n = [],
            r = [],
            i = [];
        Sp(t), Tp(n, t);
        var s = t.length;
        e.forEach(Sp);

        for (var _a26 = 0; _a26 < e.length; _a26++) {
          r.push(s), s += e[_a26].length, Tp(n, e[_a26]);
        }

        var o = ju.triangulate(n, r);

        for (var _a27 = 0; _a27 < o.length; _a27 += 3) {
          i.push(o.slice(_a27, _a27 + 3));
        }

        return i;
      }
    };

    function Sp(t) {
      var e = t.length;
      e > 2 && t[e - 1].equals(t[0]) && t.pop();
    }

    function Tp(t, e) {
      for (var _n132 = 0; _n132 < e.length; _n132++) {
        t.push(e[_n132].x), t.push(e[_n132].y);
      }
    }

    exports.ShapeUtils = Mp;

    var Ep = /*#__PURE__*/function (_ji7) {
      _inherits(Ep, _ji7);

      var _super35 = _createSuper(Ep);

      function Ep(t, e) {
        var _this34;

        _classCallCheck(this, Ep);

        _this34 = _super35.call(this), _this34.type = "ExtrudeGeometry", _this34.parameters = {
          shapes: t,
          options: e
        }, t = Array.isArray(t) ? t : [t];

        var n = _assertThisInitialized(_this34),
            r = [],
            i = [];

        for (var _o46 = 0, _a28 = t.length; _o46 < _a28; _o46++) {
          s(t[_o46]);
        }

        function s(t) {
          var s = [],
              o = void 0 !== e.curveSegments ? e.curveSegments : 12,
              a = void 0 !== e.steps ? e.steps : 1;
          var l = void 0 !== e.depth ? e.depth : 100,
              c = void 0 === e.bevelEnabled || e.bevelEnabled,
              h = void 0 !== e.bevelThickness ? e.bevelThickness : 6,
              u = void 0 !== e.bevelSize ? e.bevelSize : h - 2,
              p = void 0 !== e.bevelOffset ? e.bevelOffset : 0,
              d = void 0 !== e.bevelSegments ? e.bevelSegments : 3;
          var m = e.extrudePath,
              f = void 0 !== e.UVGenerator ? e.UVGenerator : Ap;
          void 0 !== e.amount && (console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."), l = e.amount);

          var g,
              x,
              v,
              y,
              _,
              b = !1;

          m && (g = m.getSpacedPoints(a), b = !0, c = !1, x = m.computeFrenetFrames(a, !1), v = new Yn(), y = new Yn(), _ = new Yn()), c || (d = 0, h = 0, u = 0, p = 0);
          var w = t.extractPoints(o);
          var M = w.shape;
          var S = w.holes;

          if (!Mp.isClockWise(M)) {
            M = M.reverse();

            for (var _t147 = 0, _e124 = S.length; _t147 < _e124; _t147++) {
              var _e125 = S[_t147];
              Mp.isClockWise(_e125) && (S[_t147] = _e125.reverse());
            }
          }

          var T = Mp.triangulateShape(M, S),
              E = M;

          for (var _e126 = 0, _n133 = S.length; _e126 < _n133; _e126++) {
            var _t148 = S[_e126];
            M = M.concat(_t148);
          }

          function A(t, e, n) {
            return e || console.error("THREE.ExtrudeGeometry: vec does not exist"), e.clone().multiplyScalar(n).add(t);
          }

          var L = M.length,
              R = T.length;

          function C(t, e, n) {
            var r, i, s;
            var o = t.x - e.x,
                a = t.y - e.y,
                l = n.x - t.x,
                c = n.y - t.y,
                h = o * o + a * a,
                u = o * c - a * l;

            if (Math.abs(u) > Number.EPSILON) {
              var _u13 = Math.sqrt(h),
                  _p13 = Math.sqrt(l * l + c * c),
                  _d12 = e.x - a / _u13,
                  _m7 = e.y + o / _u13,
                  _f3 = ((n.x - c / _p13 - _d12) * c - (n.y + l / _p13 - _m7) * l) / (o * c - a * l),
                  _g6 = (r = _d12 + o * _f3 - t.x) * r + (i = _m7 + a * _f3 - t.y) * i;

              if (_g6 <= 2) return new On(r, i);
              s = Math.sqrt(_g6 / 2);
            } else {
              var _t149 = !1;

              o > Number.EPSILON ? l > Number.EPSILON && (_t149 = !0) : o < -Number.EPSILON ? l < -Number.EPSILON && (_t149 = !0) : Math.sign(a) === Math.sign(c) && (_t149 = !0), _t149 ? (r = -a, i = o, s = Math.sqrt(h)) : (r = o, i = a, s = Math.sqrt(h / 2));
            }

            return new On(r / s, i / s);
          }

          var P = [];

          for (var _e127 = 0, _n134 = E.length, _r123 = _n134 - 1, _i104 = _e127 + 1; _e127 < _n134; _e127++, _r123++, _i104++) {
            _r123 === _n134 && (_r123 = 0), _i104 === _n134 && (_i104 = 0), P[_e127] = C(E[_e127], E[_r123], E[_i104]);
          }

          var D = [];
          var I,
              B = P.concat();

          for (var _e128 = 0, _n135 = S.length; _e128 < _n135; _e128++) {
            var _t150 = S[_e128];
            I = [];

            for (var _e129 = 0, _n136 = _t150.length, _r124 = _n136 - 1, _i105 = _e129 + 1; _e129 < _n136; _e129++, _r124++, _i105++) {
              _r124 === _n136 && (_r124 = 0), _i105 === _n136 && (_i105 = 0), I[_e129] = C(_t150[_e129], _t150[_r124], _t150[_i105]);
            }

            D.push(I), B = B.concat(I);
          }

          for (var _e130 = 0; _e130 < d; _e130++) {
            var _t151 = _e130 / d,
                _n137 = h * Math.cos(_t151 * Math.PI / 2),
                _r125 = u * Math.sin(_t151 * Math.PI / 2) + p;

            for (var _e131 = 0, _i106 = E.length; _e131 < _i106; _e131++) {
              var _t152 = A(E[_e131], P[_e131], _r125);

              O(_t152.x, _t152.y, -_n137);
            }

            for (var _e132 = 0, _i107 = S.length; _e132 < _i107; _e132++) {
              var _t153 = S[_e132];
              I = D[_e132];

              for (var _e133 = 0, _i108 = _t153.length; _e133 < _i108; _e133++) {
                var _i109 = A(_t153[_e133], I[_e133], _r125);

                O(_i109.x, _i109.y, -_n137);
              }
            }
          }

          var N = u + p;

          for (var _e134 = 0; _e134 < L; _e134++) {
            var _t154 = c ? A(M[_e134], B[_e134], N) : M[_e134];

            b ? (y.copy(x.normals[0]).multiplyScalar(_t154.x), v.copy(x.binormals[0]).multiplyScalar(_t154.y), _.copy(g[0]).add(y).add(v), O(_.x, _.y, _.z)) : O(_t154.x, _t154.y, 0);
          }

          for (var _e135 = 1; _e135 <= a; _e135++) {
            for (var _t155 = 0; _t155 < L; _t155++) {
              var _n138 = c ? A(M[_t155], B[_t155], N) : M[_t155];

              b ? (y.copy(x.normals[_e135]).multiplyScalar(_n138.x), v.copy(x.binormals[_e135]).multiplyScalar(_n138.y), _.copy(g[_e135]).add(y).add(v), O(_.x, _.y, _.z)) : O(_n138.x, _n138.y, l / a * _e135);
            }
          }

          for (var _e136 = d - 1; _e136 >= 0; _e136--) {
            var _t156 = _e136 / d,
                _n139 = h * Math.cos(_t156 * Math.PI / 2),
                _r126 = u * Math.sin(_t156 * Math.PI / 2) + p;

            for (var _e137 = 0, _i110 = E.length; _e137 < _i110; _e137++) {
              var _t157 = A(E[_e137], P[_e137], _r126);

              O(_t157.x, _t157.y, l + _n139);
            }

            for (var _e138 = 0, _i111 = S.length; _e138 < _i111; _e138++) {
              var _t158 = S[_e138];
              I = D[_e138];

              for (var _e139 = 0, _i112 = _t158.length; _e139 < _i112; _e139++) {
                var _i113 = A(_t158[_e139], I[_e139], _r126);

                b ? O(_i113.x, _i113.y + g[a - 1].y, g[a - 1].x + _n139) : O(_i113.x, _i113.y, l + _n139);
              }
            }
          }

          function F(t, e) {
            var n = t.length;

            for (; --n >= 0;) {
              var _r127 = n;

              var _i114 = n - 1;

              _i114 < 0 && (_i114 = t.length - 1);

              for (var _t159 = 0, _n140 = a + 2 * d; _t159 < _n140; _t159++) {
                var _n141 = L * _t159,
                    _s51 = L * (_t159 + 1);

                G(e + _r127 + _n141, e + _i114 + _n141, e + _i114 + _s51, e + _r127 + _s51);
              }
            }
          }

          function O(t, e, n) {
            s.push(t), s.push(e), s.push(n);
          }

          function z(t, e, i) {
            H(t), H(e), H(i);
            var s = r.length / 3,
                o = f.generateTopUV(n, r, s - 3, s - 2, s - 1);
            U(o[0]), U(o[1]), U(o[2]);
          }

          function G(t, e, i, s) {
            H(t), H(e), H(s), H(e), H(i), H(s);
            var o = r.length / 3,
                a = f.generateSideWallUV(n, r, o - 6, o - 3, o - 2, o - 1);
            U(a[0]), U(a[1]), U(a[3]), U(a[1]), U(a[2]), U(a[3]);
          }

          function H(t) {
            r.push(s[3 * t + 0]), r.push(s[3 * t + 1]), r.push(s[3 * t + 2]);
          }

          function U(t) {
            i.push(t.x), i.push(t.y);
          }

          !function () {
            var t = r.length / 3;

            if (c) {
              var _t160 = 0,
                  _e140 = L * _t160;

              for (var _n142 = 0; _n142 < R; _n142++) {
                var _t161 = T[_n142];
                z(_t161[2] + _e140, _t161[1] + _e140, _t161[0] + _e140);
              }

              _e140 = L * (_t160 = a + 2 * d);

              for (var _n143 = 0; _n143 < R; _n143++) {
                var _t162 = T[_n143];
                z(_t162[0] + _e140, _t162[1] + _e140, _t162[2] + _e140);
              }
            } else {
              for (var _t163 = 0; _t163 < R; _t163++) {
                var _e141 = T[_t163];
                z(_e141[2], _e141[1], _e141[0]);
              }

              for (var _t164 = 0; _t164 < R; _t164++) {
                var _e142 = T[_t164];
                z(_e142[0] + L * a, _e142[1] + L * a, _e142[2] + L * a);
              }
            }

            n.addGroup(t, r.length / 3 - t, 0);
          }(), function () {
            var t = r.length / 3;
            var e = 0;
            F(E, e), e += E.length;

            for (var _n144 = 0, _r128 = S.length; _n144 < _r128; _n144++) {
              var _t165 = S[_n144];
              F(_t165, e), e += _t165.length;
            }

            n.addGroup(t, r.length / 3 - t, 1);
          }();
        }

        _this34.setAttribute("position", new Ii(r, 3)), _this34.setAttribute("uv", new Ii(i, 2)), _this34.computeVertexNormals();
        return _this34;
      }

      _createClass(Ep, [{
        key: "toJSON",
        value: function toJSON() {
          var t = ji.prototype.toJSON.call(this);
          return Lp(this.parameters.shapes, this.parameters.options, t);
        }
      }]);

      return Ep;
    }(ji);

    exports.ExtrudeGeometry = exports.ExtrudeBufferGeometry = Ep;
    var Ap = {
      generateTopUV: function generateTopUV(t, e, n, r, i) {
        var s = e[3 * n],
            o = e[3 * n + 1],
            a = e[3 * r],
            l = e[3 * r + 1],
            c = e[3 * i],
            h = e[3 * i + 1];
        return [new On(s, o), new On(a, l), new On(c, h)];
      },
      generateSideWallUV: function generateSideWallUV(t, e, n, r, i, s) {
        var o = e[3 * n],
            a = e[3 * n + 1],
            l = e[3 * n + 2],
            c = e[3 * r],
            h = e[3 * r + 1],
            u = e[3 * r + 2],
            p = e[3 * i],
            d = e[3 * i + 1],
            m = e[3 * i + 2],
            f = e[3 * s],
            g = e[3 * s + 1],
            x = e[3 * s + 2];
        return Math.abs(a - h) < .01 ? [new On(o, 1 - l), new On(c, 1 - u), new On(p, 1 - m), new On(f, 1 - x)] : [new On(a, 1 - l), new On(h, 1 - u), new On(d, 1 - m), new On(g, 1 - x)];
      }
    };

    function Lp(t, e, n) {
      if (n.shapes = [], Array.isArray(t)) for (var _r129 = 0, _i115 = t.length; _r129 < _i115; _r129++) {
        var _e143 = t[_r129];
        n.shapes.push(_e143.uuid);
      } else n.shapes.push(t.uuid);
      return void 0 !== e.extrudePath && (n.options.extrudePath = e.extrudePath.toJSON()), n;
    }

    var Rp = /*#__PURE__*/function (_zu2) {
      _inherits(Rp, _zu2);

      var _super36 = _createSuper(Rp);

      function Rp() {
        var _this35;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        _classCallCheck(this, Rp);

        var n = (1 + Math.sqrt(5)) / 2;
        _this35 = _super36.call(this, [-1, n, 0, 1, n, 0, -1, -n, 0, 1, -n, 0, 0, -1, n, 0, 1, n, 0, -1, -n, 0, 1, -n, n, 0, -1, n, 0, 1, -n, 0, -1, -n, 0, 1], [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1], t, e), _this35.type = "IcosahedronGeometry", _this35.parameters = {
          radius: t,
          detail: e
        };
        return _this35;
      }

      return Rp;
    }(zu);

    exports.IcosahedronGeometry = exports.IcosahedronBufferGeometry = Rp;

    var Cp = /*#__PURE__*/function (_ji8) {
      _inherits(Cp, _ji8);

      var _super37 = _createSuper(Cp);

      function Cp(t) {
        var _this36;

        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2 * Math.PI;

        _classCallCheck(this, Cp);

        _this36 = _super37.call(this), _this36.type = "LatheGeometry", _this36.parameters = {
          points: t,
          segments: e,
          phiStart: n,
          phiLength: r
        }, e = Math.floor(e), r = Fn.clamp(r, 0, 2 * Math.PI);
        var i = [],
            s = [],
            o = [],
            a = 1 / e,
            l = new Yn(),
            c = new On();

        for (var _h10 = 0; _h10 <= e; _h10++) {
          var _i116 = n + _h10 * a * r,
              _u14 = Math.sin(_i116),
              _p14 = Math.cos(_i116);

          for (var _n145 = 0; _n145 <= t.length - 1; _n145++) {
            l.x = t[_n145].x * _u14, l.y = t[_n145].y, l.z = t[_n145].x * _p14, s.push(l.x, l.y, l.z), c.x = _h10 / e, c.y = _n145 / (t.length - 1), o.push(c.x, c.y);
          }
        }

        for (var _h11 = 0; _h11 < e; _h11++) {
          for (var _e144 = 0; _e144 < t.length - 1; _e144++) {
            var _n146 = _e144 + _h11 * t.length,
                _r130 = _n146,
                _s52 = _n146 + t.length,
                _o47 = _n146 + t.length + 1,
                _a29 = _n146 + 1;

            i.push(_r130, _s52, _a29), i.push(_s52, _o47, _a29);
          }
        }

        if (_this36.setIndex(i), _this36.setAttribute("position", new Ii(s, 3)), _this36.setAttribute("uv", new Ii(o, 2)), _this36.computeVertexNormals(), r === 2 * Math.PI) {
          var _n147 = _this36.attributes.normal.array,
              _r131 = new Yn(),
              _i117 = new Yn(),
              _s53 = new Yn(),
              _o48 = e * t.length * 3;

          for (var _e145 = 0, _a30 = 0; _e145 < t.length; _e145++, _a30 += 3) {
            _r131.x = _n147[_a30 + 0], _r131.y = _n147[_a30 + 1], _r131.z = _n147[_a30 + 2], _i117.x = _n147[_o48 + _a30 + 0], _i117.y = _n147[_o48 + _a30 + 1], _i117.z = _n147[_o48 + _a30 + 2], _s53.addVectors(_r131, _i117).normalize(), _n147[_a30 + 0] = _n147[_o48 + _a30 + 0] = _s53.x, _n147[_a30 + 1] = _n147[_o48 + _a30 + 1] = _s53.y, _n147[_a30 + 2] = _n147[_o48 + _a30 + 2] = _s53.z;
          }
        }

        return _this36;
      }

      return Cp;
    }(ji);

    exports.LatheGeometry = exports.LatheBufferGeometry = Cp;

    var Pp = /*#__PURE__*/function (_zu3) {
      _inherits(Pp, _zu3);

      var _super38 = _createSuper(Pp);

      function Pp() {
        var _this37;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        _classCallCheck(this, Pp);

        _this37 = _super38.call(this, [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1], [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2], t, e), _this37.type = "OctahedronGeometry", _this37.parameters = {
          radius: t,
          detail: e
        };
        return _this37;
      }

      return Pp;
    }(zu);

    function Dp(t, e, n) {
      ji.call(this), this.type = "ParametricGeometry", this.parameters = {
        func: t,
        slices: e,
        stacks: n
      };
      var r = [],
          i = [],
          s = [],
          o = [],
          a = new Yn(),
          l = new Yn(),
          c = new Yn(),
          h = new Yn(),
          u = new Yn();
      t.length < 3 && console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");
      var p = e + 1;

      for (var _d13 = 0; _d13 <= n; _d13++) {
        var _r132 = _d13 / n;

        for (var _n148 = 0; _n148 <= e; _n148++) {
          var _p15 = _n148 / e;

          t(_p15, _r132, l), i.push(l.x, l.y, l.z), _p15 - 1e-5 >= 0 ? (t(_p15 - 1e-5, _r132, c), h.subVectors(l, c)) : (t(_p15 + 1e-5, _r132, c), h.subVectors(c, l)), _r132 - 1e-5 >= 0 ? (t(_p15, _r132 - 1e-5, c), u.subVectors(l, c)) : (t(_p15, _r132 + 1e-5, c), u.subVectors(c, l)), a.crossVectors(h, u).normalize(), s.push(a.x, a.y, a.z), o.push(_p15, _r132);
        }
      }

      for (var _d14 = 0; _d14 < n; _d14++) {
        for (var _t166 = 0; _t166 < e; _t166++) {
          var _e146 = _d14 * p + _t166,
              _n149 = _d14 * p + _t166 + 1,
              _i118 = (_d14 + 1) * p + _t166 + 1,
              _s54 = (_d14 + 1) * p + _t166;

          r.push(_e146, _n149, _s54), r.push(_n149, _i118, _s54);
        }
      }

      this.setIndex(r), this.setAttribute("position", new Ii(i, 3)), this.setAttribute("normal", new Ii(s, 3)), this.setAttribute("uv", new Ii(o, 2));
    }

    exports.OctahedronGeometry = exports.OctahedronBufferGeometry = Pp, Dp.prototype = Object.create(ji.prototype), Dp.prototype.constructor = Dp;

    var Ip = /*#__PURE__*/function (_ji9) {
      _inherits(Ip, _ji9);

      var _super39 = _createSuper(Ip);

      function Ip() {
        var _this38;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : .5;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
        var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 2 * Math.PI;

        _classCallCheck(this, Ip);

        _this38 = _super39.call(this), _this38.type = "RingGeometry", _this38.parameters = {
          innerRadius: t,
          outerRadius: e,
          thetaSegments: n,
          phiSegments: r,
          thetaStart: i,
          thetaLength: s
        }, n = Math.max(3, n);
        var o = [],
            a = [],
            l = [],
            c = [];
        var h = t;
        var u = (e - t) / (r = Math.max(1, r)),
            p = new Yn(),
            d = new On();

        for (var _m8 = 0; _m8 <= r; _m8++) {
          for (var _t167 = 0; _t167 <= n; _t167++) {
            var _r133 = i + _t167 / n * s;

            p.x = h * Math.cos(_r133), p.y = h * Math.sin(_r133), a.push(p.x, p.y, p.z), l.push(0, 0, 1), d.x = (p.x / e + 1) / 2, d.y = (p.y / e + 1) / 2, c.push(d.x, d.y);
          }

          h += u;
        }

        for (var _m9 = 0; _m9 < r; _m9++) {
          var _t168 = _m9 * (n + 1);

          for (var _e147 = 0; _e147 < n; _e147++) {
            var _r134 = _e147 + _t168,
                _i119 = _r134,
                _s55 = _r134 + n + 1,
                _a31 = _r134 + n + 2,
                _l30 = _r134 + 1;

            o.push(_i119, _s55, _l30), o.push(_s55, _a31, _l30);
          }
        }

        _this38.setIndex(o), _this38.setAttribute("position", new Ii(a, 3)), _this38.setAttribute("normal", new Ii(l, 3)), _this38.setAttribute("uv", new Ii(c, 2));
        return _this38;
      }

      return Ip;
    }(ji);

    exports.RingGeometry = exports.RingBufferGeometry = Ip;

    var Bp = /*#__PURE__*/function (_ji10) {
      _inherits(Bp, _ji10);

      var _super40 = _createSuper(Bp);

      function Bp(t) {
        var _this39;

        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;

        _classCallCheck(this, Bp);

        _this39 = _super40.call(this), _this39.type = "ShapeGeometry", _this39.parameters = {
          shapes: t,
          curveSegments: e
        };
        var n = [],
            r = [],
            i = [],
            s = [];
        var o = 0,
            a = 0;
        if (!1 === Array.isArray(t)) l(t);else for (var _c20 = 0; _c20 < t.length; _c20++) {
          l(t[_c20]), _this39.addGroup(o, a, _c20), o += a, a = 0;
        }

        function l(t) {
          var o = r.length / 3,
              l = t.extractPoints(e);
          var c = l.shape;
          var h = l.holes;
          !1 === Mp.isClockWise(c) && (c = c.reverse());

          for (var _e148 = 0, _n150 = h.length; _e148 < _n150; _e148++) {
            var _t169 = h[_e148];
            !0 === Mp.isClockWise(_t169) && (h[_e148] = _t169.reverse());
          }

          var u = Mp.triangulateShape(c, h);

          for (var _e149 = 0, _n151 = h.length; _e149 < _n151; _e149++) {
            var _t170 = h[_e149];
            c = c.concat(_t170);
          }

          for (var _e150 = 0, _n152 = c.length; _e150 < _n152; _e150++) {
            var _t171 = c[_e150];
            r.push(_t171.x, _t171.y, 0), i.push(0, 0, 1), s.push(_t171.x, _t171.y);
          }

          for (var _e151 = 0, _r135 = u.length; _e151 < _r135; _e151++) {
            var _t172 = u[_e151],
                _r136 = _t172[0] + o,
                _i120 = _t172[1] + o,
                _s56 = _t172[2] + o;

            n.push(_r136, _i120, _s56), a += 3;
          }
        }

        _this39.setIndex(n), _this39.setAttribute("position", new Ii(r, 3)), _this39.setAttribute("normal", new Ii(i, 3)), _this39.setAttribute("uv", new Ii(s, 2));
        return _this39;
      }

      _createClass(Bp, [{
        key: "toJSON",
        value: function toJSON() {
          var t = ji.prototype.toJSON.call(this);
          return Np(this.parameters.shapes, t);
        }
      }]);

      return Bp;
    }(ji);

    function Np(t, e) {
      if (e.shapes = [], Array.isArray(t)) for (var _n153 = 0, _r137 = t.length; _n153 < _r137; _n153++) {
        var _r138 = t[_n153];
        e.shapes.push(_r138.uuid);
      } else e.shapes.push(t.uuid);
      return e;
    }

    exports.ShapeGeometry = exports.ShapeBufferGeometry = Bp;

    var Fp = /*#__PURE__*/function (_ji11) {
      _inherits(Fp, _ji11);

      var _super41 = _createSuper(Fp);

      function Fp() {
        var _this40;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 6;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2 * Math.PI;
        var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
        var o = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : Math.PI;

        _classCallCheck(this, Fp);

        _this40 = _super41.call(this), _this40.type = "SphereGeometry", _this40.parameters = {
          radius: t,
          widthSegments: e,
          heightSegments: n,
          phiStart: r,
          phiLength: i,
          thetaStart: s,
          thetaLength: o
        }, e = Math.max(3, Math.floor(e)), n = Math.max(2, Math.floor(n));
        var a = Math.min(s + o, Math.PI);
        var l = 0;
        var c = [],
            h = new Yn(),
            u = new Yn(),
            p = [],
            d = [],
            m = [],
            f = [];

        for (var _g7 = 0; _g7 <= n; _g7++) {
          var _p16 = [],
              _x5 = _g7 / n;

          var _v4 = 0;
          0 == _g7 && 0 == s ? _v4 = .5 / e : _g7 == n && a == Math.PI && (_v4 = -.5 / e);

          for (var _n154 = 0; _n154 <= e; _n154++) {
            var _a32 = _n154 / e;

            h.x = -t * Math.cos(r + _a32 * i) * Math.sin(s + _x5 * o), h.y = t * Math.cos(s + _x5 * o), h.z = t * Math.sin(r + _a32 * i) * Math.sin(s + _x5 * o), d.push(h.x, h.y, h.z), u.copy(h).normalize(), m.push(u.x, u.y, u.z), f.push(_a32 + _v4, 1 - _x5), _p16.push(l++);
          }

          c.push(_p16);
        }

        for (var _g8 = 0; _g8 < n; _g8++) {
          for (var _t173 = 0; _t173 < e; _t173++) {
            var _e152 = c[_g8][_t173 + 1],
                _r139 = c[_g8][_t173],
                _i121 = c[_g8 + 1][_t173],
                _o49 = c[_g8 + 1][_t173 + 1];
            (0 !== _g8 || s > 0) && p.push(_e152, _r139, _o49), (_g8 !== n - 1 || a < Math.PI) && p.push(_r139, _i121, _o49);
          }
        }

        _this40.setIndex(p), _this40.setAttribute("position", new Ii(d, 3)), _this40.setAttribute("normal", new Ii(m, 3)), _this40.setAttribute("uv", new Ii(f, 2));
        return _this40;
      }

      return Fp;
    }(ji);

    exports.SphereGeometry = exports.SphereBufferGeometry = Fp;

    var Op = /*#__PURE__*/function (_zu4) {
      _inherits(Op, _zu4);

      var _super42 = _createSuper(Op);

      function Op() {
        var _this41;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        _classCallCheck(this, Op);

        _this41 = _super42.call(this, [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1], [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1], t, e), _this41.type = "TetrahedronGeometry", _this41.parameters = {
          radius: t,
          detail: e
        };
        return _this41;
      }

      return Op;
    }(zu);

    exports.TetrahedronGeometry = exports.TetrahedronBufferGeometry = Op;

    var zp = /*#__PURE__*/function (_Ep) {
      _inherits(zp, _Ep);

      var _super43 = _createSuper(zp);

      function zp(t) {
        var _this42;

        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, zp);

        var n = e.font;
        if (!n || !n.isFont) return _possibleConstructorReturn(_this42, (console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."), new ji()));
        var r = n.generateShapes(t, e.size);
        e.depth = void 0 !== e.height ? e.height : 50, void 0 === e.bevelThickness && (e.bevelThickness = 10), void 0 === e.bevelSize && (e.bevelSize = 8), void 0 === e.bevelEnabled && (e.bevelEnabled = !1), _this42 = _super43.call(this, r, e), _this42.type = "TextGeometry";
        return _this42;
      }

      return zp;
    }(Ep);

    exports.TextGeometry = exports.TextBufferGeometry = zp;

    var Gp = /*#__PURE__*/function (_ji12) {
      _inherits(Gp, _ji12);

      var _super44 = _createSuper(Gp);

      function Gp() {
        var _this43;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : .4;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 6;
        var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2 * Math.PI;

        _classCallCheck(this, Gp);

        _this43 = _super44.call(this), _this43.type = "TorusGeometry", _this43.parameters = {
          radius: t,
          tube: e,
          radialSegments: n,
          tubularSegments: r,
          arc: i
        }, n = Math.floor(n), r = Math.floor(r);
        var s = [],
            o = [],
            a = [],
            l = [],
            c = new Yn(),
            h = new Yn(),
            u = new Yn();

        for (var _p17 = 0; _p17 <= n; _p17++) {
          for (var _s57 = 0; _s57 <= r; _s57++) {
            var _d15 = _s57 / r * i,
                _m10 = _p17 / n * Math.PI * 2;

            h.x = (t + e * Math.cos(_m10)) * Math.cos(_d15), h.y = (t + e * Math.cos(_m10)) * Math.sin(_d15), h.z = e * Math.sin(_m10), o.push(h.x, h.y, h.z), c.x = t * Math.cos(_d15), c.y = t * Math.sin(_d15), u.subVectors(h, c).normalize(), a.push(u.x, u.y, u.z), l.push(_s57 / r), l.push(_p17 / n);
          }
        }

        for (var _p18 = 1; _p18 <= n; _p18++) {
          for (var _t174 = 1; _t174 <= r; _t174++) {
            var _e153 = (r + 1) * _p18 + _t174 - 1,
                _n155 = (r + 1) * (_p18 - 1) + _t174 - 1,
                _i122 = (r + 1) * (_p18 - 1) + _t174,
                _o50 = (r + 1) * _p18 + _t174;

            s.push(_e153, _n155, _o50), s.push(_n155, _i122, _o50);
          }
        }

        _this43.setIndex(s), _this43.setAttribute("position", new Ii(o, 3)), _this43.setAttribute("normal", new Ii(a, 3)), _this43.setAttribute("uv", new Ii(l, 2));
        return _this43;
      }

      return Gp;
    }(ji);

    exports.TorusGeometry = exports.TorusBufferGeometry = Gp;

    var Hp = /*#__PURE__*/function (_ji13) {
      _inherits(Hp, _ji13);

      var _super45 = _createSuper(Hp);

      function Hp() {
        var _this44;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : .4;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 64;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;
        var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2;
        var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 3;

        _classCallCheck(this, Hp);

        _this44 = _super45.call(this), _this44.type = "TorusKnotGeometry", _this44.parameters = {
          radius: t,
          tube: e,
          tubularSegments: n,
          radialSegments: r,
          p: i,
          q: s
        }, n = Math.floor(n), r = Math.floor(r);
        var o = [],
            a = [],
            l = [],
            c = [],
            h = new Yn(),
            u = new Yn(),
            p = new Yn(),
            d = new Yn(),
            m = new Yn(),
            f = new Yn(),
            g = new Yn();

        for (var _v5 = 0; _v5 <= n; ++_v5) {
          var _o51 = _v5 / n * i * Math.PI * 2;

          x(_o51, i, s, t, p), x(_o51 + .01, i, s, t, d), f.subVectors(d, p), g.addVectors(d, p), m.crossVectors(f, g), g.crossVectors(m, f), m.normalize(), g.normalize();

          for (var _t175 = 0; _t175 <= r; ++_t175) {
            var _i123 = _t175 / r * Math.PI * 2,
                _s58 = -e * Math.cos(_i123),
                _o52 = e * Math.sin(_i123);

            h.x = p.x + (_s58 * g.x + _o52 * m.x), h.y = p.y + (_s58 * g.y + _o52 * m.y), h.z = p.z + (_s58 * g.z + _o52 * m.z), a.push(h.x, h.y, h.z), u.subVectors(h, p).normalize(), l.push(u.x, u.y, u.z), c.push(_v5 / n), c.push(_t175 / r);
          }
        }

        for (var _v6 = 1; _v6 <= n; _v6++) {
          for (var _t176 = 1; _t176 <= r; _t176++) {
            var _e154 = (r + 1) * (_v6 - 1) + (_t176 - 1),
                _n156 = (r + 1) * _v6 + (_t176 - 1),
                _i124 = (r + 1) * _v6 + _t176,
                _s59 = (r + 1) * (_v6 - 1) + _t176;

            o.push(_e154, _n156, _s59), o.push(_n156, _i124, _s59);
          }
        }

        function x(t, e, n, r, i) {
          var s = Math.cos(t),
              o = Math.sin(t),
              a = n / e * t,
              l = Math.cos(a);
          i.x = r * (2 + l) * .5 * s, i.y = r * (2 + l) * o * .5, i.z = r * Math.sin(a) * .5;
        }

        _this44.setIndex(o), _this44.setAttribute("position", new Ii(a, 3)), _this44.setAttribute("normal", new Ii(l, 3)), _this44.setAttribute("uv", new Ii(c, 2));
        return _this44;
      }

      return Hp;
    }(ji);

    exports.TorusKnotGeometry = exports.TorusKnotBufferGeometry = Hp;

    var Up = /*#__PURE__*/function (_ji14) {
      _inherits(Up, _ji14);

      var _super46 = _createSuper(Up);

      function Up(t) {
        var _this45;

        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 64;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;
        var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : !1;

        _classCallCheck(this, Up);

        _this45 = _super46.call(this), _this45.type = "TubeGeometry", _this45.parameters = {
          path: t,
          tubularSegments: e,
          radius: n,
          radialSegments: r,
          closed: i
        };
        var s = t.computeFrenetFrames(e, i);
        _this45.tangents = s.tangents, _this45.normals = s.normals, _this45.binormals = s.binormals;
        var o = new Yn(),
            a = new Yn(),
            l = new On();
        var c = new Yn();
        var h = [],
            u = [],
            p = [],
            d = [];

        function m(i) {
          c = t.getPointAt(i / e, c);
          var l = s.normals[i],
              p = s.binormals[i];

          for (var _t177 = 0; _t177 <= r; _t177++) {
            var _e155 = _t177 / r * Math.PI * 2,
                _i125 = Math.sin(_e155),
                _s60 = -Math.cos(_e155);

            a.x = _s60 * l.x + _i125 * p.x, a.y = _s60 * l.y + _i125 * p.y, a.z = _s60 * l.z + _i125 * p.z, a.normalize(), u.push(a.x, a.y, a.z), o.x = c.x + n * a.x, o.y = c.y + n * a.y, o.z = c.z + n * a.z, h.push(o.x, o.y, o.z);
          }
        }

        !function () {
          for (var _t178 = 0; _t178 < e; _t178++) {
            m(_t178);
          }

          m(!1 === i ? e : 0), function () {
            for (var _t179 = 0; _t179 <= e; _t179++) {
              for (var _n157 = 0; _n157 <= r; _n157++) {
                l.x = _t179 / e, l.y = _n157 / r, p.push(l.x, l.y);
              }
            }
          }(), function () {
            for (var _t180 = 1; _t180 <= e; _t180++) {
              for (var _e156 = 1; _e156 <= r; _e156++) {
                var _n158 = (r + 1) * (_t180 - 1) + (_e156 - 1),
                    _i126 = (r + 1) * _t180 + (_e156 - 1),
                    _s61 = (r + 1) * _t180 + _e156,
                    _o53 = (r + 1) * (_t180 - 1) + _e156;

                d.push(_n158, _i126, _o53), d.push(_i126, _s61, _o53);
              }
            }
          }();
        }(), _this45.setIndex(d), _this45.setAttribute("position", new Ii(h, 3)), _this45.setAttribute("normal", new Ii(u, 3)), _this45.setAttribute("uv", new Ii(p, 2));
        return _this45;
      }

      _createClass(Up, [{
        key: "toJSON",
        value: function toJSON() {
          var t = ji.prototype.toJSON.call(this);
          return t.path = this.parameters.path.toJSON(), t;
        }
      }]);

      return Up;
    }(ji);

    exports.TubeGeometry = exports.TubeBufferGeometry = Up;

    var kp = /*#__PURE__*/function (_ji15) {
      _inherits(kp, _ji15);

      var _super47 = _createSuper(kp);

      function kp(t) {
        var _this46;

        _classCallCheck(this, kp);

        if (_this46 = _super47.call(this), _this46.type = "WireframeGeometry", !0 === t.isGeometry) return _possibleConstructorReturn(_this46, void console.error("THREE.WireframeGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead."));
        var e = [],
            n = [0, 0],
            r = {},
            i = new Yn();

        if (null !== t.index) {
          var _s62 = t.attributes.position,
              _o54 = t.index;
          var _a33 = t.groups;
          0 === _a33.length && (_a33 = [{
            start: 0,
            count: _o54.count,
            materialIndex: 0
          }]);

          for (var _t181 = 0, _e157 = _a33.length; _t181 < _e157; ++_t181) {
            var _e158 = _a33[_t181],
                _i127 = _e158.start;

            for (var _t182 = _i127, _s63 = _i127 + _e158.count; _t182 < _s63; _t182 += 3) {
              for (var _e159 = 0; _e159 < 3; _e159++) {
                var _i128 = _o54.getX(_t182 + _e159),
                    _s64 = _o54.getX(_t182 + (_e159 + 1) % 3);

                n[0] = Math.min(_i128, _s64), n[1] = Math.max(_i128, _s64);

                var _a34 = n[0] + "," + n[1];

                void 0 === r[_a34] && (r[_a34] = {
                  index1: n[0],
                  index2: n[1]
                });
              }
            }
          }

          for (var _t183 in r) {
            var _n159 = r[_t183];
            i.fromBufferAttribute(_s62, _n159.index1), e.push(i.x, i.y, i.z), i.fromBufferAttribute(_s62, _n159.index2), e.push(i.x, i.y, i.z);
          }
        } else {
          var _n160 = t.attributes.position;

          for (var _t184 = 0, _r140 = _n160.count / 3; _t184 < _r140; _t184++) {
            for (var _s65 = 0; _s65 < 3; _s65++) {
              var _r141 = 3 * _t184 + _s65;

              i.fromBufferAttribute(_n160, _r141), e.push(i.x, i.y, i.z);

              var _o55 = 3 * _t184 + (_s65 + 1) % 3;

              i.fromBufferAttribute(_n160, _o55), e.push(i.x, i.y, i.z);
            }
          }
        }

        _this46.setAttribute("position", new Ii(e, 3));

        return _possibleConstructorReturn(_this46);
      }

      return kp;
    }(ji);

    exports.WireframeGeometry = kp;
    var Vp = Object.freeze({
      __proto__: null,
      BoxGeometry: ps,
      BoxBufferGeometry: ps,
      CircleGeometry: Nu,
      CircleBufferGeometry: Nu,
      ConeGeometry: Ou,
      ConeBufferGeometry: Ou,
      CylinderGeometry: Fu,
      CylinderBufferGeometry: Fu,
      DodecahedronGeometry: Gu,
      DodecahedronBufferGeometry: Gu,
      EdgesGeometry: Wu,
      ExtrudeGeometry: Ep,
      ExtrudeBufferGeometry: Ep,
      IcosahedronGeometry: Rp,
      IcosahedronBufferGeometry: Rp,
      LatheGeometry: Cp,
      LatheBufferGeometry: Cp,
      OctahedronGeometry: Pp,
      OctahedronBufferGeometry: Pp,
      ParametricGeometry: Dp,
      ParametricBufferGeometry: Dp,
      PlaneGeometry: Ds,
      PlaneBufferGeometry: Ds,
      PolyhedronGeometry: zu,
      PolyhedronBufferGeometry: zu,
      RingGeometry: Ip,
      RingBufferGeometry: Ip,
      ShapeGeometry: Bp,
      ShapeBufferGeometry: Bp,
      SphereGeometry: Fp,
      SphereBufferGeometry: Fp,
      TetrahedronGeometry: Op,
      TetrahedronBufferGeometry: Op,
      TextGeometry: zp,
      TextBufferGeometry: zp,
      TorusGeometry: Gp,
      TorusBufferGeometry: Gp,
      TorusKnotGeometry: Hp,
      TorusKnotBufferGeometry: Hp,
      TubeGeometry: Up,
      TubeBufferGeometry: Up,
      WireframeGeometry: kp
    });

    var Wp = /*#__PURE__*/function (_di7) {
      _inherits(Wp, _di7);

      var _super48 = _createSuper(Wp);

      function Wp(t) {
        var _this47;

        _classCallCheck(this, Wp);

        _this47 = _super48.call(this), _this47.type = "ShadowMaterial", _this47.color = new _i(0), _this47.transparent = !0, _this47.setValues(t);
        return _this47;
      }

      _createClass(Wp, [{
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(Wp.prototype), "copy", this).call(this, t), this.color.copy(t.color), this;
        }
      }]);

      return Wp;
    }(di);

    exports.ShadowMaterial = Wp, Wp.prototype.isShadowMaterial = !0;

    var jp = /*#__PURE__*/function (_vs) {
      _inherits(jp, _vs);

      var _super49 = _createSuper(jp);

      function jp(t) {
        var _this48;

        _classCallCheck(this, jp);

        _this48 = _super49.call(this, t), _this48.type = "RawShaderMaterial";
        return _this48;
      }

      return jp;
    }(vs);

    function qp(t) {
      di.call(this), this.defines = {
        STANDARD: ""
      }, this.type = "MeshStandardMaterial", this.color = new _i(16777215), this.roughness = 1, this.metalness = 0, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new _i(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = rn, this.normalScale = new On(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.roughnessMap = null, this.metalnessMap = null, this.alphaMap = null, this.envMap = null, this.envMapIntensity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.skinning = !1, this.morphTargets = !1, this.morphNormals = !1, this.flatShading = !1, this.vertexTangents = !1, this.setValues(t);
    }

    function Xp(t) {
      qp.call(this), this.defines = {
        STANDARD: "",
        PHYSICAL: ""
      }, this.type = "MeshPhysicalMaterial", this.clearcoat = 0, this.clearcoatMap = null, this.clearcoatRoughness = 0, this.clearcoatRoughnessMap = null, this.clearcoatNormalScale = new On(1, 1), this.clearcoatNormalMap = null, this.reflectivity = .5, Object.defineProperty(this, "ior", {
        get: function get() {
          return (1 + .4 * this.reflectivity) / (1 - .4 * this.reflectivity);
        },
        set: function set(t) {
          this.reflectivity = Fn.clamp(2.5 * (t - 1) / (t + 1), 0, 1);
        }
      }), this.sheen = null, this.transmission = 0, this.transmissionMap = null, this.setValues(t);
    }

    exports.RawShaderMaterial = jp, jp.prototype.isRawShaderMaterial = !0, qp.prototype = Object.create(di.prototype), qp.prototype.constructor = qp, qp.prototype.isMeshStandardMaterial = !0, qp.prototype.copy = function (t) {
      return di.prototype.copy.call(this, t), this.defines = {
        STANDARD: ""
      }, this.color.copy(t.color), this.roughness = t.roughness, this.metalness = t.metalness, this.map = t.map, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.emissive.copy(t.emissive), this.emissiveMap = t.emissiveMap, this.emissiveIntensity = t.emissiveIntensity, this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.roughnessMap = t.roughnessMap, this.metalnessMap = t.metalnessMap, this.alphaMap = t.alphaMap, this.envMap = t.envMap, this.envMapIntensity = t.envMapIntensity, this.refractionRatio = t.refractionRatio, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.skinning = t.skinning, this.morphTargets = t.morphTargets, this.morphNormals = t.morphNormals, this.flatShading = t.flatShading, this.vertexTangents = t.vertexTangents, this;
    }, Xp.prototype = Object.create(qp.prototype), Xp.prototype.constructor = Xp, Xp.prototype.isMeshPhysicalMaterial = !0, Xp.prototype.copy = function (t) {
      return qp.prototype.copy.call(this, t), this.defines = {
        STANDARD: "",
        PHYSICAL: ""
      }, this.clearcoat = t.clearcoat, this.clearcoatMap = t.clearcoatMap, this.clearcoatRoughness = t.clearcoatRoughness, this.clearcoatRoughnessMap = t.clearcoatRoughnessMap, this.clearcoatNormalMap = t.clearcoatNormalMap, this.clearcoatNormalScale.copy(t.clearcoatNormalScale), this.reflectivity = t.reflectivity, t.sheen ? this.sheen = (this.sheen || new _i()).copy(t.sheen) : this.sheen = null, this.transmission = t.transmission, this.transmissionMap = t.transmissionMap, this;
    };

    var Yp = /*#__PURE__*/function (_di8) {
      _inherits(Yp, _di8);

      var _super50 = _createSuper(Yp);

      function Yp(t) {
        var _this49;

        _classCallCheck(this, Yp);

        _this49 = _super50.call(this), _this49.type = "MeshPhongMaterial", _this49.color = new _i(16777215), _this49.specular = new _i(1118481), _this49.shininess = 30, _this49.map = null, _this49.lightMap = null, _this49.lightMapIntensity = 1, _this49.aoMap = null, _this49.aoMapIntensity = 1, _this49.emissive = new _i(0), _this49.emissiveIntensity = 1, _this49.emissiveMap = null, _this49.bumpMap = null, _this49.bumpScale = 1, _this49.normalMap = null, _this49.normalMapType = rn, _this49.normalScale = new On(1, 1), _this49.displacementMap = null, _this49.displacementScale = 1, _this49.displacementBias = 0, _this49.specularMap = null, _this49.alphaMap = null, _this49.envMap = null, _this49.combine = q, _this49.reflectivity = 1, _this49.refractionRatio = .98, _this49.wireframe = !1, _this49.wireframeLinewidth = 1, _this49.wireframeLinecap = "round", _this49.wireframeLinejoin = "round", _this49.skinning = !1, _this49.morphTargets = !1, _this49.morphNormals = !1, _this49.flatShading = !1, _this49.setValues(t);
        return _this49;
      }

      _createClass(Yp, [{
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(Yp.prototype), "copy", this).call(this, t), this.color.copy(t.color), this.specular.copy(t.specular), this.shininess = t.shininess, this.map = t.map, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.emissive.copy(t.emissive), this.emissiveMap = t.emissiveMap, this.emissiveIntensity = t.emissiveIntensity, this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.specularMap = t.specularMap, this.alphaMap = t.alphaMap, this.envMap = t.envMap, this.combine = t.combine, this.reflectivity = t.reflectivity, this.refractionRatio = t.refractionRatio, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.skinning = t.skinning, this.morphTargets = t.morphTargets, this.morphNormals = t.morphNormals, this.flatShading = t.flatShading, this;
        }
      }]);

      return Yp;
    }(di);

    exports.MeshPhongMaterial = Yp, Yp.prototype.isMeshPhongMaterial = !0;

    var Zp = /*#__PURE__*/function (_di9) {
      _inherits(Zp, _di9);

      var _super51 = _createSuper(Zp);

      function Zp(t) {
        var _this50;

        _classCallCheck(this, Zp);

        _this50 = _super51.call(this), _this50.defines = {
          TOON: ""
        }, _this50.type = "MeshToonMaterial", _this50.color = new _i(16777215), _this50.map = null, _this50.gradientMap = null, _this50.lightMap = null, _this50.lightMapIntensity = 1, _this50.aoMap = null, _this50.aoMapIntensity = 1, _this50.emissive = new _i(0), _this50.emissiveIntensity = 1, _this50.emissiveMap = null, _this50.bumpMap = null, _this50.bumpScale = 1, _this50.normalMap = null, _this50.normalMapType = rn, _this50.normalScale = new On(1, 1), _this50.displacementMap = null, _this50.displacementScale = 1, _this50.displacementBias = 0, _this50.alphaMap = null, _this50.wireframe = !1, _this50.wireframeLinewidth = 1, _this50.wireframeLinecap = "round", _this50.wireframeLinejoin = "round", _this50.skinning = !1, _this50.morphTargets = !1, _this50.morphNormals = !1, _this50.setValues(t);
        return _this50;
      }

      _createClass(Zp, [{
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(Zp.prototype), "copy", this).call(this, t), this.color.copy(t.color), this.map = t.map, this.gradientMap = t.gradientMap, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.emissive.copy(t.emissive), this.emissiveMap = t.emissiveMap, this.emissiveIntensity = t.emissiveIntensity, this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.alphaMap = t.alphaMap, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.skinning = t.skinning, this.morphTargets = t.morphTargets, this.morphNormals = t.morphNormals, this;
        }
      }]);

      return Zp;
    }(di);

    exports.MeshToonMaterial = Zp, Zp.prototype.isMeshToonMaterial = !0;

    var Jp = /*#__PURE__*/function (_di10) {
      _inherits(Jp, _di10);

      var _super52 = _createSuper(Jp);

      function Jp(t) {
        var _this51;

        _classCallCheck(this, Jp);

        _this51 = _super52.call(this), _this51.type = "MeshNormalMaterial", _this51.bumpMap = null, _this51.bumpScale = 1, _this51.normalMap = null, _this51.normalMapType = rn, _this51.normalScale = new On(1, 1), _this51.displacementMap = null, _this51.displacementScale = 1, _this51.displacementBias = 0, _this51.wireframe = !1, _this51.wireframeLinewidth = 1, _this51.fog = !1, _this51.skinning = !1, _this51.morphTargets = !1, _this51.morphNormals = !1, _this51.flatShading = !1, _this51.setValues(t);
        return _this51;
      }

      _createClass(Jp, [{
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(Jp.prototype), "copy", this).call(this, t), this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.skinning = t.skinning, this.morphTargets = t.morphTargets, this.morphNormals = t.morphNormals, this.flatShading = t.flatShading, this;
        }
      }]);

      return Jp;
    }(di);

    exports.MeshNormalMaterial = Jp, Jp.prototype.isMeshNormalMaterial = !0;

    var Qp = /*#__PURE__*/function (_di11) {
      _inherits(Qp, _di11);

      var _super53 = _createSuper(Qp);

      function Qp(t) {
        var _this52;

        _classCallCheck(this, Qp);

        _this52 = _super53.call(this), _this52.type = "MeshLambertMaterial", _this52.color = new _i(16777215), _this52.map = null, _this52.lightMap = null, _this52.lightMapIntensity = 1, _this52.aoMap = null, _this52.aoMapIntensity = 1, _this52.emissive = new _i(0), _this52.emissiveIntensity = 1, _this52.emissiveMap = null, _this52.specularMap = null, _this52.alphaMap = null, _this52.envMap = null, _this52.combine = q, _this52.reflectivity = 1, _this52.refractionRatio = .98, _this52.wireframe = !1, _this52.wireframeLinewidth = 1, _this52.wireframeLinecap = "round", _this52.wireframeLinejoin = "round", _this52.skinning = !1, _this52.morphTargets = !1, _this52.morphNormals = !1, _this52.setValues(t);
        return _this52;
      }

      _createClass(Qp, [{
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(Qp.prototype), "copy", this).call(this, t), this.color.copy(t.color), this.map = t.map, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.emissive.copy(t.emissive), this.emissiveMap = t.emissiveMap, this.emissiveIntensity = t.emissiveIntensity, this.specularMap = t.specularMap, this.alphaMap = t.alphaMap, this.envMap = t.envMap, this.combine = t.combine, this.reflectivity = t.reflectivity, this.refractionRatio = t.refractionRatio, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.skinning = t.skinning, this.morphTargets = t.morphTargets, this.morphNormals = t.morphNormals, this;
        }
      }]);

      return Qp;
    }(di);

    exports.MeshLambertMaterial = Qp, Qp.prototype.isMeshLambertMaterial = !0;

    var Kp = /*#__PURE__*/function (_di12) {
      _inherits(Kp, _di12);

      var _super54 = _createSuper(Kp);

      function Kp(t) {
        var _this53;

        _classCallCheck(this, Kp);

        _this53 = _super54.call(this), _this53.defines = {
          MATCAP: ""
        }, _this53.type = "MeshMatcapMaterial", _this53.color = new _i(16777215), _this53.matcap = null, _this53.map = null, _this53.bumpMap = null, _this53.bumpScale = 1, _this53.normalMap = null, _this53.normalMapType = rn, _this53.normalScale = new On(1, 1), _this53.displacementMap = null, _this53.displacementScale = 1, _this53.displacementBias = 0, _this53.alphaMap = null, _this53.skinning = !1, _this53.morphTargets = !1, _this53.morphNormals = !1, _this53.flatShading = !1, _this53.setValues(t);
        return _this53;
      }

      _createClass(Kp, [{
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(Kp.prototype), "copy", this).call(this, t), this.defines = {
            MATCAP: ""
          }, this.color.copy(t.color), this.matcap = t.matcap, this.map = t.map, this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.alphaMap = t.alphaMap, this.skinning = t.skinning, this.morphTargets = t.morphTargets, this.morphNormals = t.morphNormals, this.flatShading = t.flatShading, this;
        }
      }]);

      return Kp;
    }(di);

    exports.MeshMatcapMaterial = Kp, Kp.prototype.isMeshMatcapMaterial = !0;

    var $p = /*#__PURE__*/function (_du) {
      _inherits($p, _du);

      var _super55 = _createSuper($p);

      function $p(t) {
        var _this54;

        _classCallCheck(this, $p);

        _this54 = _super55.call(this), _this54.type = "LineDashedMaterial", _this54.scale = 1, _this54.dashSize = 3, _this54.gapSize = 1, _this54.setValues(t);
        return _this54;
      }

      _createClass($p, [{
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf($p.prototype), "copy", this).call(this, t), this.scale = t.scale, this.dashSize = t.dashSize, this.gapSize = t.gapSize, this;
        }
      }]);

      return $p;
    }(du);

    exports.LineDashedMaterial = $p, $p.prototype.isLineDashedMaterial = !0;
    var td = Object.freeze({
      __proto__: null,
      ShadowMaterial: Wp,
      SpriteMaterial: Ih,
      RawShaderMaterial: jp,
      ShaderMaterial: vs,
      PointsMaterial: Su,
      MeshPhysicalMaterial: Xp,
      MeshStandardMaterial: qp,
      MeshPhongMaterial: Yp,
      MeshToonMaterial: Zp,
      MeshNormalMaterial: Jp,
      MeshLambertMaterial: Qp,
      MeshDepthMaterial: uh,
      MeshDistanceMaterial: ph,
      MeshBasicMaterial: bi,
      MeshMatcapMaterial: Kp,
      LineDashedMaterial: $p,
      LineBasicMaterial: du,
      Material: di
    });
    var ed = {
      arraySlice: function arraySlice(t, e, n) {
        return ed.isTypedArray(t) ? new t.constructor(t.subarray(e, void 0 !== n ? n : t.length)) : t.slice(e, n);
      },
      convertArray: function convertArray(t, e, n) {
        return !t || !n && t.constructor === e ? t : "number" == typeof e.BYTES_PER_ELEMENT ? new e(t) : Array.prototype.slice.call(t);
      },
      isTypedArray: function isTypedArray(t) {
        return ArrayBuffer.isView(t) && !(t instanceof DataView);
      },
      getKeyframeOrder: function getKeyframeOrder(t) {
        var e = t.length,
            n = new Array(e);

        for (var _r142 = 0; _r142 !== e; ++_r142) {
          n[_r142] = _r142;
        }

        return n.sort(function (e, n) {
          return t[e] - t[n];
        }), n;
      },
      sortedArray: function sortedArray(t, e, n) {
        var r = t.length,
            i = new t.constructor(r);

        for (var _s66 = 0, _o56 = 0; _o56 !== r; ++_s66) {
          var _r143 = n[_s66] * e;

          for (var _n161 = 0; _n161 !== e; ++_n161) {
            i[_o56++] = t[_r143 + _n161];
          }
        }

        return i;
      },
      flattenJSON: function flattenJSON(t, e, n, r) {
        var i = 1,
            s = t[0];

        for (; void 0 !== s && void 0 === s[r];) {
          s = t[i++];
        }

        if (void 0 === s) return;
        var o = s[r];
        if (void 0 !== o) if (Array.isArray(o)) do {
          void 0 !== (o = s[r]) && (e.push(s.time), n.push.apply(n, o)), s = t[i++];
        } while (void 0 !== s);else if (void 0 !== o.toArray) do {
          void 0 !== (o = s[r]) && (e.push(s.time), o.toArray(n, n.length)), s = t[i++];
        } while (void 0 !== s);else do {
          void 0 !== (o = s[r]) && (e.push(s.time), n.push(o)), s = t[i++];
        } while (void 0 !== s);
      },
      subclip: function subclip(t, e, n, r) {
        var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 30;
        var s = t.clone();
        s.name = e;
        var o = [];

        for (var _l31 = 0; _l31 < s.tracks.length; ++_l31) {
          var _t185 = s.tracks[_l31],
              _e160 = _t185.getValueSize(),
              _a35 = [],
              _c21 = [];

          for (var _s67 = 0; _s67 < _t185.times.length; ++_s67) {
            var _o57 = _t185.times[_s67] * i;

            if (!(_o57 < n || _o57 >= r)) {
              _a35.push(_t185.times[_s67]);

              for (var _n162 = 0; _n162 < _e160; ++_n162) {
                _c21.push(_t185.values[_s67 * _e160 + _n162]);
              }
            }
          }

          0 !== _a35.length && (_t185.times = ed.convertArray(_a35, _t185.times.constructor), _t185.values = ed.convertArray(_c21, _t185.values.constructor), o.push(_t185));
        }

        s.tracks = o;
        var a = 1 / 0;

        for (var _l32 = 0; _l32 < s.tracks.length; ++_l32) {
          a > s.tracks[_l32].times[0] && (a = s.tracks[_l32].times[0]);
        }

        for (var _l33 = 0; _l33 < s.tracks.length; ++_l33) {
          s.tracks[_l33].shift(-1 * a);
        }

        return s.resetDuration(), s;
      },
      makeClipAdditive: function makeClipAdditive(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : t;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 30;
        r <= 0 && (r = 30);
        var i = n.tracks.length,
            s = e / r;

        var _loop = function _loop(_o58) {
          var e = n.tracks[_o58],
              r = e.ValueTypeName;
          if ("bool" === r || "string" === r) return "continue";
          var i = t.tracks.find(function (t) {
            return t.name === e.name && t.ValueTypeName === r;
          });
          if (void 0 === i) return "continue";
          var a = 0;
          var l = e.getValueSize();
          e.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (a = l / 3);
          var c = 0;
          var h = i.getValueSize();
          i.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (c = h / 3);
          var u = e.times.length - 1;
          var p = void 0;

          if (s <= e.times[0]) {
            var _t186 = a,
                _n163 = l - a;

            p = ed.arraySlice(e.values, _t186, _n163);
          } else if (s >= e.times[u]) {
            var _t187 = u * l + a,
                _n164 = _t187 + l - a;

            p = ed.arraySlice(e.values, _t187, _n164);
          } else {
            var _t188 = e.createInterpolant(),
                _n165 = a,
                _r144 = l - a;

            _t188.evaluate(s), p = ed.arraySlice(_t188.resultBuffer, _n165, _r144);
          }

          if ("quaternion" === r) {
            new Xn().fromArray(p).normalize().conjugate().toArray(p);
          }

          var d = i.times.length;

          for (var _t189 = 0; _t189 < d; ++_t189) {
            var _e161 = _t189 * h + c;

            if ("quaternion" === r) Xn.multiplyQuaternionsFlat(i.values, _e161, p, 0, i.values, _e161);else {
              var _t190 = h - 2 * c;

              for (var _n166 = 0; _n166 < _t190; ++_n166) {
                i.values[_e161 + _n166] -= p[_n166];
              }
            }
          }
        };

        for (var _o58 = 0; _o58 < i; ++_o58) {
          var _ret = _loop(_o58);

          if (_ret === "continue") continue;
        }

        return t.blendMode = Ve, t;
      }
    };

    function nd(t, e, n, r) {
      this.parameterPositions = t, this._cachedIndex = 0, this.resultBuffer = void 0 !== r ? r : new e.constructor(n), this.sampleValues = e, this.valueSize = n;
    }

    function rd(t, e, n, r) {
      nd.call(this, t, e, n, r), this._weightPrev = -0, this._offsetPrev = -0, this._weightNext = -0, this._offsetNext = -0;
    }

    function id(t, e, n, r) {
      nd.call(this, t, e, n, r);
    }

    function sd(t, e, n, r) {
      nd.call(this, t, e, n, r);
    }

    exports.AnimationUtils = ed, Object.assign(nd.prototype, {
      evaluate: function evaluate(t) {
        var e = this.parameterPositions;
        var n = this._cachedIndex,
            r = e[n],
            i = e[n - 1];

        t: {
          e: {
            var _s68;

            n: {
              r: if (!(t < r)) {
                for (var _s69 = n + 2;;) {
                  if (void 0 === r) {
                    if (t < i) break r;
                    return n = e.length, this._cachedIndex = n, this.afterEnd_(n - 1, t, i);
                  }

                  if (n === _s69) break;
                  if (i = r, t < (r = e[++n])) break e;
                }

                _s68 = e.length;
                break n;
              }

              if (t >= i) break t;
              {
                var _o59 = e[1];
                t < _o59 && (n = 2, i = _o59);

                for (var _s70 = n - 2;;) {
                  if (void 0 === i) return this._cachedIndex = 0, this.beforeStart_(0, t, r);
                  if (n === _s70) break;
                  if (r = i, t >= (i = e[--n - 1])) break e;
                }

                _s68 = n, n = 0;
              }
            }

            for (; n < _s68;) {
              var _r145 = n + _s68 >>> 1;

              t < e[_r145] ? _s68 = _r145 : n = _r145 + 1;
            }

            if (r = e[n], void 0 === (i = e[n - 1])) return this._cachedIndex = 0, this.beforeStart_(0, t, r);
            if (void 0 === r) return n = e.length, this._cachedIndex = n, this.afterEnd_(n - 1, i, t);
          }

          this._cachedIndex = n, this.intervalChanged_(n, i, r);
        }

        return this.interpolate_(n, i, t, r);
      },
      settings: null,
      DefaultSettings_: {},
      getSettings_: function getSettings_() {
        return this.settings || this.DefaultSettings_;
      },
      copySampleValue_: function copySampleValue_(t) {
        var e = this.resultBuffer,
            n = this.sampleValues,
            r = this.valueSize,
            i = t * r;

        for (var _s71 = 0; _s71 !== r; ++_s71) {
          e[_s71] = n[i + _s71];
        }

        return e;
      },
      interpolate_: function interpolate_() {
        throw new Error("call to abstract method");
      },
      intervalChanged_: function intervalChanged_() {}
    }), Object.assign(nd.prototype, {
      beforeStart_: nd.prototype.copySampleValue_,
      afterEnd_: nd.prototype.copySampleValue_
    }), rd.prototype = Object.assign(Object.create(nd.prototype), {
      constructor: rd,
      DefaultSettings_: {
        endingStart: Ge,
        endingEnd: Ge
      },
      intervalChanged_: function intervalChanged_(t, e, n) {
        var r = this.parameterPositions;
        var i = t - 2,
            s = t + 1,
            o = r[i],
            a = r[s];
        if (void 0 === o) switch (this.getSettings_().endingStart) {
          case He:
            i = t, o = 2 * e - n;
            break;

          case Ue:
            o = e + r[i = r.length - 2] - r[i + 1];
            break;

          default:
            i = t, o = n;
        }
        if (void 0 === a) switch (this.getSettings_().endingEnd) {
          case He:
            s = t, a = 2 * n - e;
            break;

          case Ue:
            s = 1, a = n + r[1] - r[0];
            break;

          default:
            s = t - 1, a = e;
        }
        var l = .5 * (n - e),
            c = this.valueSize;
        this._weightPrev = l / (e - o), this._weightNext = l / (a - n), this._offsetPrev = i * c, this._offsetNext = s * c;
      },
      interpolate_: function interpolate_(t, e, n, r) {
        var i = this.resultBuffer,
            s = this.sampleValues,
            o = this.valueSize,
            a = t * o,
            l = a - o,
            c = this._offsetPrev,
            h = this._offsetNext,
            u = this._weightPrev,
            p = this._weightNext,
            d = (n - e) / (r - e),
            m = d * d,
            f = m * d,
            g = -u * f + 2 * u * m - u * d,
            x = (1 + u) * f + (-1.5 - 2 * u) * m + (-.5 + u) * d + 1,
            v = (-1 - p) * f + (1.5 + p) * m + .5 * d,
            y = p * f - p * m;

        for (var _3 = 0; _3 !== o; ++_3) {
          i[_3] = g * s[c + _3] + x * s[l + _3] + v * s[a + _3] + y * s[h + _3];
        }

        return i;
      }
    }), id.prototype = Object.assign(Object.create(nd.prototype), {
      constructor: id,
      interpolate_: function interpolate_(t, e, n, r) {
        var i = this.resultBuffer,
            s = this.sampleValues,
            o = this.valueSize,
            a = t * o,
            l = a - o,
            c = (n - e) / (r - e),
            h = 1 - c;

        for (var _u15 = 0; _u15 !== o; ++_u15) {
          i[_u15] = s[l + _u15] * h + s[a + _u15] * c;
        }

        return i;
      }
    }), sd.prototype = Object.assign(Object.create(nd.prototype), {
      constructor: sd,
      interpolate_: function interpolate_(t) {
        return this.copySampleValue_(t - 1);
      }
    });

    var od = /*#__PURE__*/function () {
      function od(t, e, n, r) {
        _classCallCheck(this, od);

        if (void 0 === t) throw new Error("THREE.KeyframeTrack: track name is undefined");
        if (void 0 === e || 0 === e.length) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + t);
        this.name = t, this.times = ed.convertArray(e, this.TimeBufferType), this.values = ed.convertArray(n, this.ValueBufferType), this.setInterpolation(r || this.DefaultInterpolation);
      }

      _createClass(od, [{
        key: "InterpolantFactoryMethodDiscrete",
        value: function InterpolantFactoryMethodDiscrete(t) {
          return new sd(this.times, this.values, this.getValueSize(), t);
        }
      }, {
        key: "InterpolantFactoryMethodLinear",
        value: function InterpolantFactoryMethodLinear(t) {
          return new id(this.times, this.values, this.getValueSize(), t);
        }
      }, {
        key: "InterpolantFactoryMethodSmooth",
        value: function InterpolantFactoryMethodSmooth(t) {
          return new rd(this.times, this.values, this.getValueSize(), t);
        }
      }, {
        key: "setInterpolation",
        value: function setInterpolation(t) {
          var e;

          switch (t) {
            case Fe:
              e = this.InterpolantFactoryMethodDiscrete;
              break;

            case Oe:
              e = this.InterpolantFactoryMethodLinear;
              break;

            case ze:
              e = this.InterpolantFactoryMethodSmooth;
          }

          if (void 0 === e) {
            var _e162 = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;

            if (void 0 === this.createInterpolant) {
              if (t === this.DefaultInterpolation) throw new Error(_e162);
              this.setInterpolation(this.DefaultInterpolation);
            }

            return console.warn("THREE.KeyframeTrack:", _e162), this;
          }

          return this.createInterpolant = e, this;
        }
      }, {
        key: "getInterpolation",
        value: function getInterpolation() {
          switch (this.createInterpolant) {
            case this.InterpolantFactoryMethodDiscrete:
              return Fe;

            case this.InterpolantFactoryMethodLinear:
              return Oe;

            case this.InterpolantFactoryMethodSmooth:
              return ze;
          }
        }
      }, {
        key: "getValueSize",
        value: function getValueSize() {
          return this.values.length / this.times.length;
        }
      }, {
        key: "shift",
        value: function shift(t) {
          if (0 !== t) {
            var _e163 = this.times;

            for (var _n167 = 0, _r146 = _e163.length; _n167 !== _r146; ++_n167) {
              _e163[_n167] += t;
            }
          }

          return this;
        }
      }, {
        key: "scale",
        value: function scale(t) {
          if (1 !== t) {
            var _e164 = this.times;

            for (var _n168 = 0, _r147 = _e164.length; _n168 !== _r147; ++_n168) {
              _e164[_n168] *= t;
            }
          }

          return this;
        }
      }, {
        key: "trim",
        value: function trim(t, e) {
          var n = this.times,
              r = n.length;
          var i = 0,
              s = r - 1;

          for (; i !== r && n[i] < t;) {
            ++i;
          }

          for (; -1 !== s && n[s] > e;) {
            --s;
          }

          if (++s, 0 !== i || s !== r) {
            i >= s && (i = (s = Math.max(s, 1)) - 1);

            var _t191 = this.getValueSize();

            this.times = ed.arraySlice(n, i, s), this.values = ed.arraySlice(this.values, i * _t191, s * _t191);
          }

          return this;
        }
      }, {
        key: "validate",
        value: function validate() {
          var t = !0;
          var e = this.getValueSize();
          e - Math.floor(e) != 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), t = !1);
          var n = this.times,
              r = this.values,
              i = n.length;
          0 === i && (console.error("THREE.KeyframeTrack: Track is empty.", this), t = !1);
          var s = null;

          for (var _o60 = 0; _o60 !== i; _o60++) {
            var _e165 = n[_o60];

            if ("number" == typeof _e165 && isNaN(_e165)) {
              console.error("THREE.KeyframeTrack: Time is not a valid number.", this, _o60, _e165), t = !1;
              break;
            }

            if (null !== s && s > _e165) {
              console.error("THREE.KeyframeTrack: Out of order keys.", this, _o60, _e165, s), t = !1;
              break;
            }

            s = _e165;
          }

          if (void 0 !== r && ed.isTypedArray(r)) for (var _o61 = 0, _a36 = r.length; _o61 !== _a36; ++_o61) {
            var _e166 = r[_o61];

            if (isNaN(_e166)) {
              console.error("THREE.KeyframeTrack: Value is not a valid number.", this, _o61, _e166), t = !1;
              break;
            }
          }
          return t;
        }
      }, {
        key: "optimize",
        value: function optimize() {
          var t = ed.arraySlice(this.times),
              e = ed.arraySlice(this.values),
              n = this.getValueSize(),
              r = this.getInterpolation() === ze,
              i = t.length - 1;
          var s = 1;

          for (var _o62 = 1; _o62 < i; ++_o62) {
            var _i129 = !1;

            var _a37 = t[_o62];
            if (_a37 !== t[_o62 + 1] && (1 !== _o62 || _a37 !== t[0])) if (r) _i129 = !0;else {
              var _t192 = _o62 * n,
                  _r148 = _t192 - n,
                  _s72 = _t192 + n;

              for (var _o63 = 0; _o63 !== n; ++_o63) {
                var _n169 = e[_t192 + _o63];

                if (_n169 !== e[_r148 + _o63] || _n169 !== e[_s72 + _o63]) {
                  _i129 = !0;
                  break;
                }
              }
            }

            if (_i129) {
              if (_o62 !== s) {
                t[s] = t[_o62];

                var _r149 = _o62 * n,
                    _i130 = s * n;

                for (var _t193 = 0; _t193 !== n; ++_t193) {
                  e[_i130 + _t193] = e[_r149 + _t193];
                }
              }

              ++s;
            }
          }

          if (i > 0) {
            t[s] = t[i];

            for (var _t194 = i * n, _r150 = s * n, _o64 = 0; _o64 !== n; ++_o64) {
              e[_r150 + _o64] = e[_t194 + _o64];
            }

            ++s;
          }

          return s !== t.length ? (this.times = ed.arraySlice(t, 0, s), this.values = ed.arraySlice(e, 0, s * n)) : (this.times = t, this.values = e), this;
        }
      }, {
        key: "clone",
        value: function clone() {
          var t = ed.arraySlice(this.times, 0),
              e = ed.arraySlice(this.values, 0),
              n = new (0, this.constructor)(this.name, t, e);
          return n.createInterpolant = this.createInterpolant, n;
        }
      }], [{
        key: "toJSON",
        value: function toJSON(t) {
          var e = t.constructor;
          var n;
          if (e.toJSON !== this.toJSON) n = e.toJSON(t);else {
            n = {
              name: t.name,
              times: ed.convertArray(t.times, Array),
              values: ed.convertArray(t.values, Array)
            };

            var _e167 = t.getInterpolation();

            _e167 !== t.DefaultInterpolation && (n.interpolation = _e167);
          }
          return n.type = t.ValueTypeName, n;
        }
      }]);

      return od;
    }();

    exports.KeyframeTrack = od, od.prototype.TimeBufferType = Float32Array, od.prototype.ValueBufferType = Float32Array, od.prototype.DefaultInterpolation = Oe;

    var ad = /*#__PURE__*/function (_od) {
      _inherits(ad, _od);

      var _super56 = _createSuper(ad);

      function ad() {
        _classCallCheck(this, ad);

        return _super56.apply(this, arguments);
      }

      return ad;
    }(od);

    exports.BooleanKeyframeTrack = ad, ad.prototype.ValueTypeName = "bool", ad.prototype.ValueBufferType = Array, ad.prototype.DefaultInterpolation = Fe, ad.prototype.InterpolantFactoryMethodLinear = void 0, ad.prototype.InterpolantFactoryMethodSmooth = void 0;

    var ld = /*#__PURE__*/function (_od2) {
      _inherits(ld, _od2);

      var _super57 = _createSuper(ld);

      function ld() {
        _classCallCheck(this, ld);

        return _super57.apply(this, arguments);
      }

      return ld;
    }(od);

    exports.ColorKeyframeTrack = ld, ld.prototype.ValueTypeName = "color";

    var cd = /*#__PURE__*/function (_od3) {
      _inherits(cd, _od3);

      var _super58 = _createSuper(cd);

      function cd() {
        _classCallCheck(this, cd);

        return _super58.apply(this, arguments);
      }

      return cd;
    }(od);

    function hd(t, e, n, r) {
      nd.call(this, t, e, n, r);
    }

    exports.NumberKeyframeTrack = cd, cd.prototype.ValueTypeName = "number", hd.prototype = Object.assign(Object.create(nd.prototype), {
      constructor: hd,
      interpolate_: function interpolate_(t, e, n, r) {
        var i = this.resultBuffer,
            s = this.sampleValues,
            o = this.valueSize,
            a = (n - e) / (r - e);
        var l = t * o;

        for (var _c22 = l + o; l !== _c22; l += 4) {
          Xn.slerpFlat(i, 0, s, l - o, s, l, a);
        }

        return i;
      }
    });

    var ud = /*#__PURE__*/function (_od4) {
      _inherits(ud, _od4);

      var _super59 = _createSuper(ud);

      function ud() {
        _classCallCheck(this, ud);

        return _super59.apply(this, arguments);
      }

      _createClass(ud, [{
        key: "InterpolantFactoryMethodLinear",
        value: function InterpolantFactoryMethodLinear(t) {
          return new hd(this.times, this.values, this.getValueSize(), t);
        }
      }]);

      return ud;
    }(od);

    exports.QuaternionKeyframeTrack = ud, ud.prototype.ValueTypeName = "quaternion", ud.prototype.DefaultInterpolation = Oe, ud.prototype.InterpolantFactoryMethodSmooth = void 0;

    var pd = /*#__PURE__*/function (_od5) {
      _inherits(pd, _od5);

      var _super60 = _createSuper(pd);

      function pd() {
        _classCallCheck(this, pd);

        return _super60.apply(this, arguments);
      }

      return pd;
    }(od);

    exports.StringKeyframeTrack = pd, pd.prototype.ValueTypeName = "string", pd.prototype.ValueBufferType = Array, pd.prototype.DefaultInterpolation = Fe, pd.prototype.InterpolantFactoryMethodLinear = void 0, pd.prototype.InterpolantFactoryMethodSmooth = void 0;

    var dd = /*#__PURE__*/function (_od6) {
      _inherits(dd, _od6);

      var _super61 = _createSuper(dd);

      function dd() {
        _classCallCheck(this, dd);

        return _super61.apply(this, arguments);
      }

      return dd;
    }(od);

    exports.VectorKeyframeTrack = dd, dd.prototype.ValueTypeName = "vector";

    var md = /*#__PURE__*/function () {
      function md(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
        var n = arguments.length > 2 ? arguments[2] : undefined;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ke;

        _classCallCheck(this, md);

        this.name = t, this.tracks = n, this.duration = e, this.blendMode = r, this.uuid = Fn.generateUUID(), this.duration < 0 && this.resetDuration();
      }

      _createClass(md, [{
        key: "resetDuration",
        value: function resetDuration() {
          var t = 0;

          for (var _e168 = 0, _n170 = this.tracks.length; _e168 !== _n170; ++_e168) {
            var _n171 = this.tracks[_e168];
            t = Math.max(t, _n171.times[_n171.times.length - 1]);
          }

          return this.duration = t, this;
        }
      }, {
        key: "trim",
        value: function trim() {
          for (var _t195 = 0; _t195 < this.tracks.length; _t195++) {
            this.tracks[_t195].trim(0, this.duration);
          }

          return this;
        }
      }, {
        key: "validate",
        value: function validate() {
          var t = !0;

          for (var _e169 = 0; _e169 < this.tracks.length; _e169++) {
            t = t && this.tracks[_e169].validate();
          }

          return t;
        }
      }, {
        key: "optimize",
        value: function optimize() {
          for (var _t196 = 0; _t196 < this.tracks.length; _t196++) {
            this.tracks[_t196].optimize();
          }

          return this;
        }
      }, {
        key: "clone",
        value: function clone() {
          var t = [];

          for (var _e170 = 0; _e170 < this.tracks.length; _e170++) {
            t.push(this.tracks[_e170].clone());
          }

          return new this.constructor(this.name, this.duration, t, this.blendMode);
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          return this.constructor.toJSON(this);
        }
      }], [{
        key: "parse",
        value: function parse(t) {
          var e = [],
              n = t.tracks,
              r = 1 / (t.fps || 1);

          for (var _s73 = 0, _o65 = n.length; _s73 !== _o65; ++_s73) {
            e.push(gd(n[_s73]).scale(r));
          }

          var i = new this(t.name, t.duration, e, t.blendMode);
          return i.uuid = t.uuid, i;
        }
      }, {
        key: "toJSON",
        value: function toJSON(t) {
          var e = [],
              n = t.tracks,
              r = {
            name: t.name,
            duration: t.duration,
            tracks: e,
            uuid: t.uuid,
            blendMode: t.blendMode
          };

          for (var _i131 = 0, _s74 = n.length; _i131 !== _s74; ++_i131) {
            e.push(od.toJSON(n[_i131]));
          }

          return r;
        }
      }, {
        key: "CreateFromMorphTargetSequence",
        value: function CreateFromMorphTargetSequence(t, e, n, r) {
          var i = e.length,
              s = [];

          for (var _o66 = 0; _o66 < i; _o66++) {
            var _t197 = [],
                _a38 = [];
            _t197.push((_o66 + i - 1) % i, _o66, (_o66 + 1) % i), _a38.push(0, 1, 0);

            var _l34 = ed.getKeyframeOrder(_t197);

            _t197 = ed.sortedArray(_t197, 1, _l34), _a38 = ed.sortedArray(_a38, 1, _l34), r || 0 !== _t197[0] || (_t197.push(i), _a38.push(_a38[0])), s.push(new cd(".morphTargetInfluences[" + e[_o66].name + "]", _t197, _a38).scale(1 / n));
          }

          return new this(t, -1, s);
        }
      }, {
        key: "findByName",
        value: function findByName(t, e) {
          var n = t;

          if (!Array.isArray(t)) {
            var _e171 = t;
            n = _e171.geometry && _e171.geometry.animations || _e171.animations;
          }

          for (var _r151 = 0; _r151 < n.length; _r151++) {
            if (n[_r151].name === e) return n[_r151];
          }

          return null;
        }
      }, {
        key: "CreateClipsFromMorphTargetSequences",
        value: function CreateClipsFromMorphTargetSequences(t, e, n) {
          var r = {},
              i = /^([\w-]*?)([\d]+)$/;

          for (var _o67 = 0, _a39 = t.length; _o67 < _a39; _o67++) {
            var _e172 = t[_o67],
                _n172 = _e172.name.match(i);

            if (_n172 && _n172.length > 1) {
              var _t198 = _n172[1];
              var _i132 = r[_t198];
              _i132 || (r[_t198] = _i132 = []), _i132.push(_e172);
            }
          }

          var s = [];

          for (var _o68 in r) {
            s.push(this.CreateFromMorphTargetSequence(_o68, r[_o68], e, n));
          }

          return s;
        }
      }, {
        key: "parseAnimation",
        value: function parseAnimation(t, e) {
          if (!t) return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;

          var n = function n(t, e, _n173, r, i) {
            if (0 !== _n173.length) {
              var _s75 = [],
                  _o69 = [];
              ed.flattenJSON(_n173, _s75, _o69, r), 0 !== _s75.length && i.push(new t(e, _s75, _o69));
            }
          },
              r = [],
              i = t.name || "default",
              s = t.fps || 30,
              o = t.blendMode;

          var a = t.length || -1;
          var l = t.hierarchy || [];

          for (var _c23 = 0; _c23 < l.length; _c23++) {
            var _t199 = l[_c23].keys;
            if (_t199 && 0 !== _t199.length) if (_t199[0].morphTargets) {
              var _e173 = {};

              var _n174 = void 0;

              for (_n174 = 0; _n174 < _t199.length; _n174++) {
                if (_t199[_n174].morphTargets) for (var _r152 = 0; _r152 < _t199[_n174].morphTargets.length; _r152++) {
                  _e173[_t199[_n174].morphTargets[_r152]] = -1;
                }
              }

              for (var _i133 in _e173) {
                var _e174 = [],
                    _s76 = [];

                for (var _r153 = 0; _r153 !== _t199[_n174].morphTargets.length; ++_r153) {
                  var _r154 = _t199[_n174];
                  _e174.push(_r154.time), _s76.push(_r154.morphTarget === _i133 ? 1 : 0);
                }

                r.push(new cd(".morphTargetInfluence[" + _i133 + "]", _e174, _s76));
              }

              a = _e173.length * (s || 1);
            } else {
              var _i134 = ".bones[" + e[_c23].name + "]";

              n(dd, _i134 + ".position", _t199, "pos", r), n(ud, _i134 + ".quaternion", _t199, "rot", r), n(dd, _i134 + ".scale", _t199, "scl", r);
            }
          }

          return 0 === r.length ? null : new this(i, a, r, o);
        }
      }]);

      return md;
    }();

    function fd(t) {
      switch (t.toLowerCase()) {
        case "scalar":
        case "double":
        case "float":
        case "number":
        case "integer":
          return cd;

        case "vector":
        case "vector2":
        case "vector3":
        case "vector4":
          return dd;

        case "color":
          return ld;

        case "quaternion":
          return ud;

        case "bool":
        case "boolean":
          return ad;

        case "string":
          return pd;
      }

      throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + t);
    }

    function gd(t) {
      if (void 0 === t.type) throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
      var e = fd(t.type);

      if (void 0 === t.times) {
        var _e175 = [],
            _n175 = [];
        ed.flattenJSON(t.keys, _e175, _n175, "value"), t.times = _e175, t.values = _n175;
      }

      return void 0 !== e.parse ? e.parse(t) : new e(t.name, t.times, t.values, t.interpolation);
    }

    exports.AnimationClip = md;
    var xd = {
      enabled: !1,
      files: {},
      add: function add(t, e) {
        !1 !== this.enabled && (this.files[t] = e);
      },
      get: function get(t) {
        if (!1 !== this.enabled) return this.files[t];
      },
      remove: function remove(t) {
        delete this.files[t];
      },
      clear: function clear() {
        this.files = {};
      }
    };

    function vd(t, e, n) {
      var r = this;
      var i = !1,
          s = 0,
          o = 0,
          a = void 0;
      var l = [];
      this.onStart = void 0, this.onLoad = t, this.onProgress = e, this.onError = n, this.itemStart = function (t) {
        o++, !1 === i && void 0 !== r.onStart && r.onStart(t, s, o), i = !0;
      }, this.itemEnd = function (t) {
        s++, void 0 !== r.onProgress && r.onProgress(t, s, o), s === o && (i = !1, void 0 !== r.onLoad && r.onLoad());
      }, this.itemError = function (t) {
        void 0 !== r.onError && r.onError(t);
      }, this.resolveURL = function (t) {
        return a ? a(t) : t;
      }, this.setURLModifier = function (t) {
        return a = t, this;
      }, this.addHandler = function (t, e) {
        return l.push(t, e), this;
      }, this.removeHandler = function (t) {
        var e = l.indexOf(t);
        return -1 !== e && l.splice(e, 2), this;
      }, this.getHandler = function (t) {
        for (var _e176 = 0, _n176 = l.length; _e176 < _n176; _e176 += 2) {
          var _n177 = l[_e176],
              _r155 = l[_e176 + 1];
          if (_n177.global && (_n177.lastIndex = 0), _n177.test(t)) return _r155;
        }

        return null;
      };
    }

    exports.Cache = xd;
    var yd = new vd();

    function _d(t) {
      this.manager = void 0 !== t ? t : yd, this.crossOrigin = "anonymous", this.withCredentials = !1, this.path = "", this.resourcePath = "", this.requestHeader = {};
    }

    exports.DefaultLoadingManager = yd, Object.assign(_d.prototype, {
      load: function load() {},
      loadAsync: function loadAsync(t, e) {
        var n = this;
        return new Promise(function (r, i) {
          n.load(t, r, e, i);
        });
      },
      parse: function parse() {},
      setCrossOrigin: function setCrossOrigin(t) {
        return this.crossOrigin = t, this;
      },
      setWithCredentials: function setWithCredentials(t) {
        return this.withCredentials = t, this;
      },
      setPath: function setPath(t) {
        return this.path = t, this;
      },
      setResourcePath: function setResourcePath(t) {
        return this.resourcePath = t, this;
      },
      setRequestHeader: function setRequestHeader(t) {
        return this.requestHeader = t, this;
      }
    });
    var bd = {};

    function wd(t) {
      _d.call(this, t);
    }

    wd.prototype = Object.assign(Object.create(_d.prototype), {
      constructor: wd,
      load: function load(t, e, n, r) {
        void 0 === t && (t = ""), void 0 !== this.path && (t = this.path + t), t = this.manager.resolveURL(t);
        var i = this,
            s = xd.get(t);
        if (void 0 !== s) return i.manager.itemStart(t), setTimeout(function () {
          e && e(s), i.manager.itemEnd(t);
        }, 0), s;
        if (void 0 !== bd[t]) return void bd[t].push({
          onLoad: e,
          onProgress: n,
          onError: r
        });
        var o = t.match(/^data:(.*?)(;base64)?,(.*)$/);
        var a;

        if (o) {
          var _n178 = o[1],
              _s77 = !!o[2];

          var _a40 = o[3];
          _a40 = decodeURIComponent(_a40), _s77 && (_a40 = atob(_a40));

          try {
            var _s78;

            var _o70 = (this.responseType || "").toLowerCase();

            switch (_o70) {
              case "arraybuffer":
              case "blob":
                var _t200 = new Uint8Array(_a40.length);

                for (var _n179 = 0; _n179 < _a40.length; _n179++) {
                  _t200[_n179] = _a40.charCodeAt(_n179);
                }

                _s78 = "blob" === _o70 ? new Blob([_t200.buffer], {
                  type: _n178
                }) : _t200.buffer;
                break;

              case "document":
                var _e177 = new DOMParser();

                _s78 = _e177.parseFromString(_a40, _n178);
                break;

              case "json":
                _s78 = JSON.parse(_a40);
                break;

              default:
                _s78 = _a40;
            }

            setTimeout(function () {
              e && e(_s78), i.manager.itemEnd(t);
            }, 0);
          } catch (l) {
            setTimeout(function () {
              r && r(l), i.manager.itemError(t), i.manager.itemEnd(t);
            }, 0);
          }
        } else {
          bd[t] = [], bd[t].push({
            onLoad: e,
            onProgress: n,
            onError: r
          }), (a = new XMLHttpRequest()).open("GET", t, !0), a.addEventListener("load", function (e) {
            var n = this.response,
                r = bd[t];

            if (delete bd[t], 200 === this.status || 0 === this.status) {
              0 === this.status && console.warn("THREE.FileLoader: HTTP Status 0 received."), xd.add(t, n);

              for (var _t201 = 0, _e178 = r.length; _t201 < _e178; _t201++) {
                var _e179 = r[_t201];
                _e179.onLoad && _e179.onLoad(n);
              }

              i.manager.itemEnd(t);
            } else {
              for (var _t202 = 0, _n180 = r.length; _t202 < _n180; _t202++) {
                var _n181 = r[_t202];
                _n181.onError && _n181.onError(e);
              }

              i.manager.itemError(t), i.manager.itemEnd(t);
            }
          }, !1), a.addEventListener("progress", function (e) {
            var n = bd[t];

            for (var _t203 = 0, _r156 = n.length; _t203 < _r156; _t203++) {
              var _r157 = n[_t203];
              _r157.onProgress && _r157.onProgress(e);
            }
          }, !1), a.addEventListener("error", function (e) {
            var n = bd[t];
            delete bd[t];

            for (var _t204 = 0, _r158 = n.length; _t204 < _r158; _t204++) {
              var _r159 = n[_t204];
              _r159.onError && _r159.onError(e);
            }

            i.manager.itemError(t), i.manager.itemEnd(t);
          }, !1), a.addEventListener("abort", function (e) {
            var n = bd[t];
            delete bd[t];

            for (var _t205 = 0, _r160 = n.length; _t205 < _r160; _t205++) {
              var _r161 = n[_t205];
              _r161.onError && _r161.onError(e);
            }

            i.manager.itemError(t), i.manager.itemEnd(t);
          }, !1), void 0 !== this.responseType && (a.responseType = this.responseType), void 0 !== this.withCredentials && (a.withCredentials = this.withCredentials), a.overrideMimeType && a.overrideMimeType(void 0 !== this.mimeType ? this.mimeType : "text/plain");

          for (var _t206 in this.requestHeader) {
            a.setRequestHeader(_t206, this.requestHeader[_t206]);
          }

          a.send(null);
        }

        return i.manager.itemStart(t), a;
      },
      setResponseType: function setResponseType(t) {
        return this.responseType = t, this;
      },
      setMimeType: function setMimeType(t) {
        return this.mimeType = t, this;
      }
    });

    var Md = /*#__PURE__*/function (_d16) {
      _inherits(Md, _d16);

      var _super62 = _createSuper(Md);

      function Md(t) {
        _classCallCheck(this, Md);

        return _super62.call(this, t);
      }

      _createClass(Md, [{
        key: "load",
        value: function load(t, e, n, r) {
          var i = this,
              s = new wd(this.manager);
          s.setPath(this.path), s.setRequestHeader(this.requestHeader), s.setWithCredentials(this.withCredentials), s.load(t, function (n) {
            try {
              e(i.parse(JSON.parse(n)));
            } catch (s) {
              r ? r(s) : console.error(s), i.manager.itemError(t);
            }
          }, n, r);
        }
      }, {
        key: "parse",
        value: function parse(t) {
          var e = [];

          for (var _n182 = 0; _n182 < t.length; _n182++) {
            var _r162 = md.parse(t[_n182]);

            e.push(_r162);
          }

          return e;
        }
      }]);

      return Md;
    }(_d);

    function Sd(t) {
      _d.call(this, t);
    }

    exports.AnimationLoader = Md, Sd.prototype = Object.assign(Object.create(_d.prototype), {
      constructor: Sd,
      load: function load(t, e, n, r) {
        var i = this,
            s = [],
            o = new Du(),
            a = new wd(this.manager);
        a.setPath(this.path), a.setResponseType("arraybuffer"), a.setRequestHeader(this.requestHeader), a.setWithCredentials(i.withCredentials);
        var l = 0;

        function c(c) {
          a.load(t[c], function (t) {
            var n = i.parse(t, !0);
            s[c] = {
              width: n.width,
              height: n.height,
              format: n.format,
              mipmaps: n.mipmaps
            }, 6 === (l += 1) && (1 === n.mipmapCount && (o.minFilter = gt), o.image = s, o.format = n.format, o.needsUpdate = !0, e && e(o));
          }, n, r);
        }

        if (Array.isArray(t)) for (var _h12 = 0, _u16 = t.length; _h12 < _u16; ++_h12) {
          c(_h12);
        } else a.load(t, function (t) {
          var n = i.parse(t, !0);

          if (n.isCubemap) {
            var _t207 = n.mipmaps.length / n.mipmapCount;

            for (var _e180 = 0; _e180 < _t207; _e180++) {
              s[_e180] = {
                mipmaps: []
              };

              for (var _t208 = 0; _t208 < n.mipmapCount; _t208++) {
                s[_e180].mipmaps.push(n.mipmaps[_e180 * n.mipmapCount + _t208]), s[_e180].format = n.format, s[_e180].width = n.width, s[_e180].height = n.height;
              }
            }

            o.image = s;
          } else o.image.width = n.width, o.image.height = n.height, o.mipmaps = n.mipmaps;

          1 === n.mipmapCount && (o.minFilter = gt), o.format = n.format, o.needsUpdate = !0, e && e(o);
        }, n, r);
        return o;
      }
    });

    var Td = /*#__PURE__*/function (_d17) {
      _inherits(Td, _d17);

      var _super63 = _createSuper(Td);

      function Td(t) {
        _classCallCheck(this, Td);

        return _super63.call(this, t);
      }

      _createClass(Td, [{
        key: "load",
        value: function load(t, e, n, r) {
          void 0 !== this.path && (t = this.path + t), t = this.manager.resolveURL(t);
          var i = this,
              s = xd.get(t);
          if (void 0 !== s) return i.manager.itemStart(t), setTimeout(function () {
            e && e(s), i.manager.itemEnd(t);
          }, 0), s;
          var o = document.createElementNS("http://www.w3.org/1999/xhtml", "img");

          function a() {
            o.removeEventListener("load", a, !1), o.removeEventListener("error", l, !1), xd.add(t, this), e && e(this), i.manager.itemEnd(t);
          }

          function l(e) {
            o.removeEventListener("load", a, !1), o.removeEventListener("error", l, !1), r && r(e), i.manager.itemError(t), i.manager.itemEnd(t);
          }

          return o.addEventListener("load", a, !1), o.addEventListener("error", l, !1), "data:" !== t.substr(0, 5) && void 0 !== this.crossOrigin && (o.crossOrigin = this.crossOrigin), i.manager.itemStart(t), o.src = t, o;
        }
      }]);

      return Td;
    }(_d);

    exports.ImageLoader = Td;

    var Ed = /*#__PURE__*/function (_d18) {
      _inherits(Ed, _d18);

      var _super64 = _createSuper(Ed);

      function Ed(t) {
        _classCallCheck(this, Ed);

        return _super64.call(this, t);
      }

      _createClass(Ed, [{
        key: "load",
        value: function load(t, e, n, r) {
          var i = new Ss(),
              s = new Td(this.manager);
          s.setCrossOrigin(this.crossOrigin), s.setPath(this.path);
          var o = 0;

          function a(n) {
            s.load(t[n], function (t) {
              i.images[n] = t, 6 === ++o && (i.needsUpdate = !0, e && e(i));
            }, void 0, r);
          }

          for (var _l35 = 0; _l35 < t.length; ++_l35) {
            a(_l35);
          }

          return i;
        }
      }]);

      return Ed;
    }(_d);

    function Ad(t) {
      _d.call(this, t);
    }

    function Ld(t) {
      _d.call(this, t);
    }

    function Rd() {
      this.type = "Curve", this.arcLengthDivisions = 200;
    }

    exports.CubeTextureLoader = Ed, Ad.prototype = Object.assign(Object.create(_d.prototype), {
      constructor: Ad,
      load: function load(t, e, n, r) {
        var i = this,
            s = new Es(),
            o = new wd(this.manager);
        return o.setResponseType("arraybuffer"), o.setRequestHeader(this.requestHeader), o.setPath(this.path), o.setWithCredentials(i.withCredentials), o.load(t, function (t) {
          var n = i.parse(t);
          n && (void 0 !== n.image ? s.image = n.image : void 0 !== n.data && (s.image.width = n.width, s.image.height = n.height, s.image.data = n.data), s.wrapS = void 0 !== n.wrapS ? n.wrapS : ct, s.wrapT = void 0 !== n.wrapT ? n.wrapT : ct, s.magFilter = void 0 !== n.magFilter ? n.magFilter : gt, s.minFilter = void 0 !== n.minFilter ? n.minFilter : gt, s.anisotropy = void 0 !== n.anisotropy ? n.anisotropy : 1, void 0 !== n.encoding && (s.encoding = n.encoding), void 0 !== n.flipY && (s.flipY = n.flipY), void 0 !== n.format && (s.format = n.format), void 0 !== n.type && (s.type = n.type), void 0 !== n.mipmaps && (s.mipmaps = n.mipmaps, s.minFilter = yt), 1 === n.mipmapCount && (s.minFilter = gt), void 0 !== n.generateMipmaps && (s.generateMipmaps = n.generateMipmaps), s.needsUpdate = !0, e && e(s, n));
        }, n, r), s;
      }
    }), Ld.prototype = Object.assign(Object.create(_d.prototype), {
      constructor: Ld,
      load: function load(t, e, n, r) {
        var i = new kn(),
            s = new Td(this.manager);
        return s.setCrossOrigin(this.crossOrigin), s.setPath(this.path), s.load(t, function (n) {
          i.image = n;
          var r = t.search(/\.jpe?g($|\?)/i) > 0 || 0 === t.search(/^data\:image\/jpeg/);
          i.format = r ? Bt : Nt, i.needsUpdate = !0, void 0 !== e && e(i);
        }, n, r), i;
      }
    }), Object.assign(Rd.prototype, {
      getPoint: function getPoint() {
        return console.warn("THREE.Curve: .getPoint() not implemented."), null;
      },
      getPointAt: function getPointAt(t, e) {
        var n = this.getUtoTmapping(t);
        return this.getPoint(n, e);
      },
      getPoints: function getPoints() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;
        var e = [];

        for (var _n183 = 0; _n183 <= t; _n183++) {
          e.push(this.getPoint(_n183 / t));
        }

        return e;
      },
      getSpacedPoints: function getSpacedPoints() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;
        var e = [];

        for (var _n184 = 0; _n184 <= t; _n184++) {
          e.push(this.getPointAt(_n184 / t));
        }

        return e;
      },
      getLength: function getLength() {
        var t = this.getLengths();
        return t[t.length - 1];
      },
      getLengths: function getLengths(t) {
        if (void 0 === t && (t = this.arcLengthDivisions), this.cacheArcLengths && this.cacheArcLengths.length === t + 1 && !this.needsUpdate) return this.cacheArcLengths;
        this.needsUpdate = !1;
        var e = [];
        var n,
            r = this.getPoint(0),
            i = 0;
        e.push(0);

        for (var _s79 = 1; _s79 <= t; _s79++) {
          i += (n = this.getPoint(_s79 / t)).distanceTo(r), e.push(i), r = n;
        }

        return this.cacheArcLengths = e, e;
      },
      updateArcLengths: function updateArcLengths() {
        this.needsUpdate = !0, this.getLengths();
      },
      getUtoTmapping: function getUtoTmapping(t, e) {
        var n = this.getLengths();
        var r = 0;
        var i = n.length;
        var s;
        s = e || t * n[i - 1];
        var o,
            a = 0,
            l = i - 1;

        for (; a <= l;) {
          if ((o = n[r = Math.floor(a + (l - a) / 2)] - s) < 0) a = r + 1;else {
            if (!(o > 0)) {
              l = r;
              break;
            }

            l = r - 1;
          }
        }

        if (n[r = l] === s) return r / (i - 1);
        var c = n[r];
        return (r + (s - c) / (n[r + 1] - c)) / (i - 1);
      },
      getTangent: function getTangent(t, e) {
        var n = t - 1e-4,
            r = t + 1e-4;
        n < 0 && (n = 0), r > 1 && (r = 1);
        var i = this.getPoint(n),
            s = this.getPoint(r),
            o = e || (i.isVector2 ? new On() : new Yn());
        return o.copy(s).sub(i).normalize(), o;
      },
      getTangentAt: function getTangentAt(t, e) {
        var n = this.getUtoTmapping(t);
        return this.getTangent(n, e);
      },
      computeFrenetFrames: function computeFrenetFrames(t, e) {
        var n = new Yn(),
            r = [],
            i = [],
            s = [],
            o = new Yn(),
            a = new Tr();

        for (var _p19 = 0; _p19 <= t; _p19++) {
          var _e181 = _p19 / t;

          r[_p19] = this.getTangentAt(_e181, new Yn()), r[_p19].normalize();
        }

        i[0] = new Yn(), s[0] = new Yn();
        var l = Number.MAX_VALUE;
        var c = Math.abs(r[0].x),
            h = Math.abs(r[0].y),
            u = Math.abs(r[0].z);
        c <= l && (l = c, n.set(1, 0, 0)), h <= l && (l = h, n.set(0, 1, 0)), u <= l && n.set(0, 0, 1), o.crossVectors(r[0], n).normalize(), i[0].crossVectors(r[0], o), s[0].crossVectors(r[0], i[0]);

        for (var _p20 = 1; _p20 <= t; _p20++) {
          if (i[_p20] = i[_p20 - 1].clone(), s[_p20] = s[_p20 - 1].clone(), o.crossVectors(r[_p20 - 1], r[_p20]), o.length() > Number.EPSILON) {
            o.normalize();

            var _t209 = Math.acos(Fn.clamp(r[_p20 - 1].dot(r[_p20]), -1, 1));

            i[_p20].applyMatrix4(a.makeRotationAxis(o, _t209));
          }

          s[_p20].crossVectors(r[_p20], i[_p20]);
        }

        if (!0 === e) {
          var _e182 = Math.acos(Fn.clamp(i[0].dot(i[t]), -1, 1));

          _e182 /= t, r[0].dot(o.crossVectors(i[0], i[t])) > 0 && (_e182 = -_e182);

          for (var _n185 = 1; _n185 <= t; _n185++) {
            i[_n185].applyMatrix4(a.makeRotationAxis(r[_n185], _e182 * _n185)), s[_n185].crossVectors(r[_n185], i[_n185]);
          }
        }

        return {
          tangents: r,
          normals: i,
          binormals: s
        };
      },
      clone: function clone() {
        return new this.constructor().copy(this);
      },
      copy: function copy(t) {
        return this.arcLengthDivisions = t.arcLengthDivisions, this;
      },
      toJSON: function toJSON() {
        var t = {
          metadata: {
            version: 4.5,
            type: "Curve",
            generator: "Curve.toJSON"
          }
        };
        return t.arcLengthDivisions = this.arcLengthDivisions, t.type = this.type, t;
      },
      fromJSON: function fromJSON(t) {
        return this.arcLengthDivisions = t.arcLengthDivisions, this;
      }
    });

    var Cd = /*#__PURE__*/function (_Rd) {
      _inherits(Cd, _Rd);

      var _super65 = _createSuper(Cd);

      function Cd() {
        var _this55;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
        var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 2 * Math.PI;
        var o = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : !1;
        var a = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;

        _classCallCheck(this, Cd);

        _this55 = _super65.call(this), _this55.type = "EllipseCurve", _this55.aX = t, _this55.aY = e, _this55.xRadius = n, _this55.yRadius = r, _this55.aStartAngle = i, _this55.aEndAngle = s, _this55.aClockwise = o, _this55.aRotation = a;
        return _this55;
      }

      _createClass(Cd, [{
        key: "getPoint",
        value: function getPoint(t, e) {
          var n = e || new On(),
              r = 2 * Math.PI;
          var i = this.aEndAngle - this.aStartAngle;
          var s = Math.abs(i) < Number.EPSILON;

          for (; i < 0;) {
            i += r;
          }

          for (; i > r;) {
            i -= r;
          }

          i < Number.EPSILON && (i = s ? 0 : r), !0 !== this.aClockwise || s || (i === r ? i = -r : i -= r);
          var o = this.aStartAngle + t * i;
          var a = this.aX + this.xRadius * Math.cos(o),
              l = this.aY + this.yRadius * Math.sin(o);

          if (0 !== this.aRotation) {
            var _t210 = Math.cos(this.aRotation),
                _e183 = Math.sin(this.aRotation),
                _n186 = a - this.aX,
                _r163 = l - this.aY;

            a = _n186 * _t210 - _r163 * _e183 + this.aX, l = _n186 * _e183 + _r163 * _t210 + this.aY;
          }

          return n.set(a, l);
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(Cd.prototype), "copy", this).call(this, t), this.aX = t.aX, this.aY = t.aY, this.xRadius = t.xRadius, this.yRadius = t.yRadius, this.aStartAngle = t.aStartAngle, this.aEndAngle = t.aEndAngle, this.aClockwise = t.aClockwise, this.aRotation = t.aRotation, this;
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          var t = _get(_getPrototypeOf(Cd.prototype), "toJSON", this).call(this);

          return t.aX = this.aX, t.aY = this.aY, t.xRadius = this.xRadius, t.yRadius = this.yRadius, t.aStartAngle = this.aStartAngle, t.aEndAngle = this.aEndAngle, t.aClockwise = this.aClockwise, t.aRotation = this.aRotation, t;
        }
      }, {
        key: "fromJSON",
        value: function fromJSON(t) {
          return _get(_getPrototypeOf(Cd.prototype), "fromJSON", this).call(this, t), this.aX = t.aX, this.aY = t.aY, this.xRadius = t.xRadius, this.yRadius = t.yRadius, this.aStartAngle = t.aStartAngle, this.aEndAngle = t.aEndAngle, this.aClockwise = t.aClockwise, this.aRotation = t.aRotation, this;
        }
      }]);

      return Cd;
    }(Rd);

    exports.EllipseCurve = Cd, Cd.prototype.isEllipseCurve = !0;

    var Pd = /*#__PURE__*/function (_Cd) {
      _inherits(Pd, _Cd);

      var _super66 = _createSuper(Pd);

      function Pd(t, e, n, r, i, s) {
        var _this56;

        _classCallCheck(this, Pd);

        _this56 = _super66.call(this, t, e, n, n, r, i, s), _this56.type = "ArcCurve";
        return _this56;
      }

      return Pd;
    }(Cd);

    function Dd() {
      var t = 0,
          e = 0,
          n = 0,
          r = 0;

      function i(i, s, o, a) {
        t = i, e = o, n = -3 * i + 3 * s - 2 * o - a, r = 2 * i - 2 * s + o + a;
      }

      return {
        initCatmullRom: function initCatmullRom(t, e, n, r, s) {
          i(e, n, s * (n - t), s * (r - e));
        },
        initNonuniformCatmullRom: function initNonuniformCatmullRom(t, e, n, r, s, o, a) {
          var l = (e - t) / s - (n - t) / (s + o) + (n - e) / o,
              c = (n - e) / o - (r - e) / (o + a) + (r - n) / a;
          i(e, n, l *= o, c *= o);
        },
        calc: function calc(i) {
          var s = i * i;
          return t + e * i + n * s + r * (s * i);
        }
      };
    }

    exports.ArcCurve = Pd, Pd.prototype.isArcCurve = !0;
    var Id = new Yn(),
        Bd = new Dd(),
        Nd = new Dd(),
        Fd = new Dd();

    var Od = /*#__PURE__*/function (_Rd2) {
      _inherits(Od, _Rd2);

      var _super67 = _createSuper(Od);

      function Od() {
        var _this57;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "centripetal";
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : .5;

        _classCallCheck(this, Od);

        _this57 = _super67.call(this), _this57.type = "CatmullRomCurve3", _this57.points = t, _this57.closed = e, _this57.curveType = n, _this57.tension = r;
        return _this57;
      }

      _createClass(Od, [{
        key: "getPoint",
        value: function getPoint(t) {
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Yn();
          var n = e,
              r = this.points,
              i = r.length,
              s = (i - (this.closed ? 0 : 1)) * t;
          var o,
              a,
              l = Math.floor(s),
              c = s - l;
          this.closed ? l += l > 0 ? 0 : (Math.floor(Math.abs(l) / i) + 1) * i : 0 === c && l === i - 1 && (l = i - 2, c = 1), this.closed || l > 0 ? o = r[(l - 1) % i] : (Id.subVectors(r[0], r[1]).add(r[0]), o = Id);
          var h = r[l % i],
              u = r[(l + 1) % i];

          if (this.closed || l + 2 < i ? a = r[(l + 2) % i] : (Id.subVectors(r[i - 1], r[i - 2]).add(r[i - 1]), a = Id), "centripetal" === this.curveType || "chordal" === this.curveType) {
            var _t211 = "chordal" === this.curveType ? .5 : .25;

            var _e184 = Math.pow(o.distanceToSquared(h), _t211),
                _n187 = Math.pow(h.distanceToSquared(u), _t211),
                _r164 = Math.pow(u.distanceToSquared(a), _t211);

            _n187 < 1e-4 && (_n187 = 1), _e184 < 1e-4 && (_e184 = _n187), _r164 < 1e-4 && (_r164 = _n187), Bd.initNonuniformCatmullRom(o.x, h.x, u.x, a.x, _e184, _n187, _r164), Nd.initNonuniformCatmullRom(o.y, h.y, u.y, a.y, _e184, _n187, _r164), Fd.initNonuniformCatmullRom(o.z, h.z, u.z, a.z, _e184, _n187, _r164);
          } else "catmullrom" === this.curveType && (Bd.initCatmullRom(o.x, h.x, u.x, a.x, this.tension), Nd.initCatmullRom(o.y, h.y, u.y, a.y, this.tension), Fd.initCatmullRom(o.z, h.z, u.z, a.z, this.tension));

          return n.set(Bd.calc(c), Nd.calc(c), Fd.calc(c)), n;
        }
      }, {
        key: "copy",
        value: function copy(t) {
          _get(_getPrototypeOf(Od.prototype), "copy", this).call(this, t), this.points = [];

          for (var _e185 = 0, _n188 = t.points.length; _e185 < _n188; _e185++) {
            var _n189 = t.points[_e185];
            this.points.push(_n189.clone());
          }

          return this.closed = t.closed, this.curveType = t.curveType, this.tension = t.tension, this;
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          var t = _get(_getPrototypeOf(Od.prototype), "toJSON", this).call(this);

          t.points = [];

          for (var _e186 = 0, _n190 = this.points.length; _e186 < _n190; _e186++) {
            var _n191 = this.points[_e186];
            t.points.push(_n191.toArray());
          }

          return t.closed = this.closed, t.curveType = this.curveType, t.tension = this.tension, t;
        }
      }, {
        key: "fromJSON",
        value: function fromJSON(t) {
          _get(_getPrototypeOf(Od.prototype), "fromJSON", this).call(this, t), this.points = [];

          for (var _e187 = 0, _n192 = t.points.length; _e187 < _n192; _e187++) {
            var _n193 = t.points[_e187];
            this.points.push(new Yn().fromArray(_n193));
          }

          return this.closed = t.closed, this.curveType = t.curveType, this.tension = t.tension, this;
        }
      }]);

      return Od;
    }(Rd);

    function zd(t, e, n, r, i) {
      var s = .5 * (r - e),
          o = .5 * (i - n),
          a = t * t;
      return (2 * n - 2 * r + s + o) * (t * a) + (-3 * n + 3 * r - 2 * s - o) * a + s * t + n;
    }

    function Gd(t, e) {
      var n = 1 - t;
      return n * n * e;
    }

    function Hd(t, e) {
      return 2 * (1 - t) * t * e;
    }

    function Ud(t, e) {
      return t * t * e;
    }

    function kd(t, e, n, r) {
      return Gd(t, e) + Hd(t, n) + Ud(t, r);
    }

    function Vd(t, e) {
      var n = 1 - t;
      return n * n * n * e;
    }

    function Wd(t, e) {
      var n = 1 - t;
      return 3 * n * n * t * e;
    }

    function jd(t, e) {
      return 3 * (1 - t) * t * t * e;
    }

    function qd(t, e) {
      return t * t * t * e;
    }

    function Xd(t, e, n, r, i) {
      return Vd(t, e) + Wd(t, n) + jd(t, r) + qd(t, i);
    }

    exports.CatmullRomCurve3 = Od, Od.prototype.isCatmullRomCurve3 = !0;

    var Yd = /*#__PURE__*/function (_Rd3) {
      _inherits(Yd, _Rd3);

      var _super68 = _createSuper(Yd);

      function Yd() {
        var _this58;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new On();
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new On();
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new On();
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new On();

        _classCallCheck(this, Yd);

        _this58 = _super68.call(this), _this58.type = "CubicBezierCurve", _this58.v0 = t, _this58.v1 = e, _this58.v2 = n, _this58.v3 = r;
        return _this58;
      }

      _createClass(Yd, [{
        key: "getPoint",
        value: function getPoint(t) {
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new On();
          var n = e,
              r = this.v0,
              i = this.v1,
              s = this.v2,
              o = this.v3;
          return n.set(Xd(t, r.x, i.x, s.x, o.x), Xd(t, r.y, i.y, s.y, o.y)), n;
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(Yd.prototype), "copy", this).call(this, t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this.v3.copy(t.v3), this;
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          var t = _get(_getPrototypeOf(Yd.prototype), "toJSON", this).call(this);

          return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t.v3 = this.v3.toArray(), t;
        }
      }, {
        key: "fromJSON",
        value: function fromJSON(t) {
          return _get(_getPrototypeOf(Yd.prototype), "fromJSON", this).call(this, t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this.v3.fromArray(t.v3), this;
        }
      }]);

      return Yd;
    }(Rd);

    exports.CubicBezierCurve = Yd, Yd.prototype.isCubicBezierCurve = !0;

    var Zd = /*#__PURE__*/function (_Rd4) {
      _inherits(Zd, _Rd4);

      var _super69 = _createSuper(Zd);

      function Zd() {
        var _this59;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Yn();
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Yn();
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Yn();
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Yn();

        _classCallCheck(this, Zd);

        _this59 = _super69.call(this), _this59.type = "CubicBezierCurve3", _this59.v0 = t, _this59.v1 = e, _this59.v2 = n, _this59.v3 = r;
        return _this59;
      }

      _createClass(Zd, [{
        key: "getPoint",
        value: function getPoint(t) {
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Yn();
          var n = e,
              r = this.v0,
              i = this.v1,
              s = this.v2,
              o = this.v3;
          return n.set(Xd(t, r.x, i.x, s.x, o.x), Xd(t, r.y, i.y, s.y, o.y), Xd(t, r.z, i.z, s.z, o.z)), n;
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(Zd.prototype), "copy", this).call(this, t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this.v3.copy(t.v3), this;
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          var t = _get(_getPrototypeOf(Zd.prototype), "toJSON", this).call(this);

          return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t.v3 = this.v3.toArray(), t;
        }
      }, {
        key: "fromJSON",
        value: function fromJSON(t) {
          return _get(_getPrototypeOf(Zd.prototype), "fromJSON", this).call(this, t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this.v3.fromArray(t.v3), this;
        }
      }]);

      return Zd;
    }(Rd);

    exports.CubicBezierCurve3 = Zd, Zd.prototype.isCubicBezierCurve3 = !0;

    var Jd = /*#__PURE__*/function (_Rd5) {
      _inherits(Jd, _Rd5);

      var _super70 = _createSuper(Jd);

      function Jd() {
        var _this60;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new On();
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new On();

        _classCallCheck(this, Jd);

        _this60 = _super70.call(this), _this60.type = "LineCurve", _this60.v1 = t, _this60.v2 = e;
        return _this60;
      }

      _createClass(Jd, [{
        key: "getPoint",
        value: function getPoint(t) {
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new On();
          var n = e;
          return 1 === t ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(t).add(this.v1)), n;
        }
      }, {
        key: "getPointAt",
        value: function getPointAt(t, e) {
          return this.getPoint(t, e);
        }
      }, {
        key: "getTangent",
        value: function getTangent(t, e) {
          var n = e || new On();
          return n.copy(this.v2).sub(this.v1).normalize(), n;
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(Jd.prototype), "copy", this).call(this, t), this.v1.copy(t.v1), this.v2.copy(t.v2), this;
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          var t = _get(_getPrototypeOf(Jd.prototype), "toJSON", this).call(this);

          return t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t;
        }
      }, {
        key: "fromJSON",
        value: function fromJSON(t) {
          return _get(_getPrototypeOf(Jd.prototype), "fromJSON", this).call(this, t), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this;
        }
      }]);

      return Jd;
    }(Rd);

    exports.LineCurve = Jd, Jd.prototype.isLineCurve = !0;

    var Qd = /*#__PURE__*/function (_Rd6) {
      _inherits(Qd, _Rd6);

      var _super71 = _createSuper(Qd);

      function Qd() {
        var _this61;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Yn();
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Yn();

        _classCallCheck(this, Qd);

        _this61 = _super71.call(this), _this61.type = "LineCurve3", _this61.isLineCurve3 = !0, _this61.v1 = t, _this61.v2 = e;
        return _this61;
      }

      _createClass(Qd, [{
        key: "getPoint",
        value: function getPoint(t) {
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Yn();
          var n = e;
          return 1 === t ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(t).add(this.v1)), n;
        }
      }, {
        key: "getPointAt",
        value: function getPointAt(t, e) {
          return this.getPoint(t, e);
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(Qd.prototype), "copy", this).call(this, t), this.v1.copy(t.v1), this.v2.copy(t.v2), this;
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          var t = _get(_getPrototypeOf(Qd.prototype), "toJSON", this).call(this);

          return t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t;
        }
      }, {
        key: "fromJSON",
        value: function fromJSON(t) {
          return _get(_getPrototypeOf(Qd.prototype), "fromJSON", this).call(this, t), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this;
        }
      }]);

      return Qd;
    }(Rd);

    exports.LineCurve3 = Qd;

    var Kd = /*#__PURE__*/function (_Rd7) {
      _inherits(Kd, _Rd7);

      var _super72 = _createSuper(Kd);

      function Kd() {
        var _this62;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new On();
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new On();
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new On();

        _classCallCheck(this, Kd);

        _this62 = _super72.call(this), _this62.type = "QuadraticBezierCurve", _this62.v0 = t, _this62.v1 = e, _this62.v2 = n;
        return _this62;
      }

      _createClass(Kd, [{
        key: "getPoint",
        value: function getPoint(t) {
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new On();
          var n = e,
              r = this.v0,
              i = this.v1,
              s = this.v2;
          return n.set(kd(t, r.x, i.x, s.x), kd(t, r.y, i.y, s.y)), n;
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(Kd.prototype), "copy", this).call(this, t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this;
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          var t = _get(_getPrototypeOf(Kd.prototype), "toJSON", this).call(this);

          return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t;
        }
      }, {
        key: "fromJSON",
        value: function fromJSON(t) {
          return _get(_getPrototypeOf(Kd.prototype), "fromJSON", this).call(this, t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this;
        }
      }]);

      return Kd;
    }(Rd);

    exports.QuadraticBezierCurve = Kd, Kd.prototype.isQuadraticBezierCurve = !0;

    var $d = /*#__PURE__*/function (_Rd8) {
      _inherits($d, _Rd8);

      var _super73 = _createSuper($d);

      function $d() {
        var _this63;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Yn();
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Yn();
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Yn();

        _classCallCheck(this, $d);

        _this63 = _super73.call(this), _this63.type = "QuadraticBezierCurve3", _this63.v0 = t, _this63.v1 = e, _this63.v2 = n;
        return _this63;
      }

      _createClass($d, [{
        key: "getPoint",
        value: function getPoint(t) {
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Yn();
          var n = e,
              r = this.v0,
              i = this.v1,
              s = this.v2;
          return n.set(kd(t, r.x, i.x, s.x), kd(t, r.y, i.y, s.y), kd(t, r.z, i.z, s.z)), n;
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf($d.prototype), "copy", this).call(this, t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this;
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          var t = _get(_getPrototypeOf($d.prototype), "toJSON", this).call(this);

          return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t;
        }
      }, {
        key: "fromJSON",
        value: function fromJSON(t) {
          return _get(_getPrototypeOf($d.prototype), "fromJSON", this).call(this, t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this;
        }
      }]);

      return $d;
    }(Rd);

    exports.QuadraticBezierCurve3 = $d, $d.prototype.isQuadraticBezierCurve3 = !0;

    var tm = /*#__PURE__*/function (_Rd9) {
      _inherits(tm, _Rd9);

      var _super74 = _createSuper(tm);

      function tm() {
        var _this64;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        _classCallCheck(this, tm);

        _this64 = _super74.call(this), _this64.type = "SplineCurve", _this64.points = t;
        return _this64;
      }

      _createClass(tm, [{
        key: "getPoint",
        value: function getPoint(t) {
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new On();
          var n = e,
              r = this.points,
              i = (r.length - 1) * t,
              s = Math.floor(i),
              o = i - s,
              a = r[0 === s ? s : s - 1],
              l = r[s],
              c = r[s > r.length - 2 ? r.length - 1 : s + 1],
              h = r[s > r.length - 3 ? r.length - 1 : s + 2];
          return n.set(zd(o, a.x, l.x, c.x, h.x), zd(o, a.y, l.y, c.y, h.y)), n;
        }
      }, {
        key: "copy",
        value: function copy(t) {
          _get(_getPrototypeOf(tm.prototype), "copy", this).call(this, t), this.points = [];

          for (var _e188 = 0, _n194 = t.points.length; _e188 < _n194; _e188++) {
            var _n195 = t.points[_e188];
            this.points.push(_n195.clone());
          }

          return this;
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          var t = _get(_getPrototypeOf(tm.prototype), "toJSON", this).call(this);

          t.points = [];

          for (var _e189 = 0, _n196 = this.points.length; _e189 < _n196; _e189++) {
            var _n197 = this.points[_e189];
            t.points.push(_n197.toArray());
          }

          return t;
        }
      }, {
        key: "fromJSON",
        value: function fromJSON(t) {
          _get(_getPrototypeOf(tm.prototype), "fromJSON", this).call(this, t), this.points = [];

          for (var _e190 = 0, _n198 = t.points.length; _e190 < _n198; _e190++) {
            var _n199 = t.points[_e190];
            this.points.push(new On().fromArray(_n199));
          }

          return this;
        }
      }]);

      return tm;
    }(Rd);

    exports.SplineCurve = tm, tm.prototype.isSplineCurve = !0;
    var em = Object.freeze({
      __proto__: null,
      ArcCurve: Pd,
      CatmullRomCurve3: Od,
      CubicBezierCurve: Yd,
      CubicBezierCurve3: Zd,
      EllipseCurve: Cd,
      LineCurve: Jd,
      LineCurve3: Qd,
      QuadraticBezierCurve: Kd,
      QuadraticBezierCurve3: $d,
      SplineCurve: tm
    });

    var nm = /*#__PURE__*/function (_Rd10) {
      _inherits(nm, _Rd10);

      var _super75 = _createSuper(nm);

      function nm() {
        var _this65;

        _classCallCheck(this, nm);

        _this65 = _super75.call(this), _this65.type = "CurvePath", _this65.curves = [], _this65.autoClose = !1;
        return _this65;
      }

      _createClass(nm, [{
        key: "add",
        value: function add(t) {
          this.curves.push(t);
        }
      }, {
        key: "closePath",
        value: function closePath() {
          var t = this.curves[0].getPoint(0),
              e = this.curves[this.curves.length - 1].getPoint(1);
          t.equals(e) || this.curves.push(new Jd(e, t));
        }
      }, {
        key: "getPoint",
        value: function getPoint(t) {
          var e = t * this.getLength(),
              n = this.getCurveLengths();
          var r = 0;

          for (; r < n.length;) {
            if (n[r] >= e) {
              var _t212 = n[r] - e,
                  _i135 = this.curves[r],
                  _s80 = _i135.getLength(),
                  _o71 = 0 === _s80 ? 0 : 1 - _t212 / _s80;

              return _i135.getPointAt(_o71);
            }

            r++;
          }

          return null;
        }
      }, {
        key: "getLength",
        value: function getLength() {
          var t = this.getCurveLengths();
          return t[t.length - 1];
        }
      }, {
        key: "updateArcLengths",
        value: function updateArcLengths() {
          this.needsUpdate = !0, this.cacheLengths = null, this.getCurveLengths();
        }
      }, {
        key: "getCurveLengths",
        value: function getCurveLengths() {
          if (this.cacheLengths && this.cacheLengths.length === this.curves.length) return this.cacheLengths;
          var t = [];
          var e = 0;

          for (var _n200 = 0, _r165 = this.curves.length; _n200 < _r165; _n200++) {
            e += this.curves[_n200].getLength(), t.push(e);
          }

          return this.cacheLengths = t, t;
        }
      }, {
        key: "getSpacedPoints",
        value: function getSpacedPoints() {
          var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 40;
          var e = [];

          for (var _n201 = 0; _n201 <= t; _n201++) {
            e.push(this.getPoint(_n201 / t));
          }

          return this.autoClose && e.push(e[0]), e;
        }
      }, {
        key: "getPoints",
        value: function getPoints() {
          var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 12;
          var e = [];
          var n;

          for (var _r166 = 0, _i136 = this.curves; _r166 < _i136.length; _r166++) {
            var _s81 = _i136[_r166],
                _o72 = _s81 && _s81.isEllipseCurve ? 2 * t : _s81 && (_s81.isLineCurve || _s81.isLineCurve3) ? 1 : _s81 && _s81.isSplineCurve ? t * _s81.points.length : t,
                _a41 = _s81.getPoints(_o72);

            for (var _t213 = 0; _t213 < _a41.length; _t213++) {
              var _r167 = _a41[_t213];
              n && n.equals(_r167) || (e.push(_r167), n = _r167);
            }
          }

          return this.autoClose && e.length > 1 && !e[e.length - 1].equals(e[0]) && e.push(e[0]), e;
        }
      }, {
        key: "copy",
        value: function copy(t) {
          _get(_getPrototypeOf(nm.prototype), "copy", this).call(this, t), this.curves = [];

          for (var _e191 = 0, _n202 = t.curves.length; _e191 < _n202; _e191++) {
            var _n203 = t.curves[_e191];
            this.curves.push(_n203.clone());
          }

          return this.autoClose = t.autoClose, this;
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          var t = _get(_getPrototypeOf(nm.prototype), "toJSON", this).call(this);

          t.autoClose = this.autoClose, t.curves = [];

          for (var _e192 = 0, _n204 = this.curves.length; _e192 < _n204; _e192++) {
            var _n205 = this.curves[_e192];
            t.curves.push(_n205.toJSON());
          }

          return t;
        }
      }, {
        key: "fromJSON",
        value: function fromJSON(t) {
          _get(_getPrototypeOf(nm.prototype), "fromJSON", this).call(this, t), this.autoClose = t.autoClose, this.curves = [];

          for (var _e193 = 0, _n206 = t.curves.length; _e193 < _n206; _e193++) {
            var _n207 = t.curves[_e193];
            this.curves.push(new em[_n207.type]().fromJSON(_n207));
          }

          return this;
        }
      }]);

      return nm;
    }(Rd);

    exports.CurvePath = nm;

    var rm = /*#__PURE__*/function (_nm) {
      _inherits(rm, _nm);

      var _super76 = _createSuper(rm);

      function rm(t) {
        var _this66;

        _classCallCheck(this, rm);

        _this66 = _super76.call(this), _this66.type = "Path", _this66.currentPoint = new On(), t && _this66.setFromPoints(t);
        return _this66;
      }

      _createClass(rm, [{
        key: "setFromPoints",
        value: function setFromPoints(t) {
          this.moveTo(t[0].x, t[0].y);

          for (var _e194 = 1, _n208 = t.length; _e194 < _n208; _e194++) {
            this.lineTo(t[_e194].x, t[_e194].y);
          }

          return this;
        }
      }, {
        key: "moveTo",
        value: function moveTo(t, e) {
          return this.currentPoint.set(t, e), this;
        }
      }, {
        key: "lineTo",
        value: function lineTo(t, e) {
          var n = new Jd(this.currentPoint.clone(), new On(t, e));
          return this.curves.push(n), this.currentPoint.set(t, e), this;
        }
      }, {
        key: "quadraticCurveTo",
        value: function quadraticCurveTo(t, e, n, r) {
          var i = new Kd(this.currentPoint.clone(), new On(t, e), new On(n, r));
          return this.curves.push(i), this.currentPoint.set(n, r), this;
        }
      }, {
        key: "bezierCurveTo",
        value: function bezierCurveTo(t, e, n, r, i, s) {
          var o = new Yd(this.currentPoint.clone(), new On(t, e), new On(n, r), new On(i, s));
          return this.curves.push(o), this.currentPoint.set(i, s), this;
        }
      }, {
        key: "splineThru",
        value: function splineThru(t) {
          var e = [this.currentPoint.clone()].concat(t),
              n = new tm(e);
          return this.curves.push(n), this.currentPoint.copy(t[t.length - 1]), this;
        }
      }, {
        key: "arc",
        value: function arc(t, e, n, r, i, s) {
          var o = this.currentPoint.x,
              a = this.currentPoint.y;
          return this.absarc(t + o, e + a, n, r, i, s), this;
        }
      }, {
        key: "absarc",
        value: function absarc(t, e, n, r, i, s) {
          return this.absellipse(t, e, n, n, r, i, s), this;
        }
      }, {
        key: "ellipse",
        value: function ellipse(t, e, n, r, i, s, o, a) {
          var l = this.currentPoint.x,
              c = this.currentPoint.y;
          return this.absellipse(t + l, e + c, n, r, i, s, o, a), this;
        }
      }, {
        key: "absellipse",
        value: function absellipse(t, e, n, r, i, s, o, a) {
          var l = new Cd(t, e, n, r, i, s, o, a);

          if (this.curves.length > 0) {
            var _t214 = l.getPoint(0);

            _t214.equals(this.currentPoint) || this.lineTo(_t214.x, _t214.y);
          }

          this.curves.push(l);
          var c = l.getPoint(1);
          return this.currentPoint.copy(c), this;
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(rm.prototype), "copy", this).call(this, t), this.currentPoint.copy(t.currentPoint), this;
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          var t = _get(_getPrototypeOf(rm.prototype), "toJSON", this).call(this);

          return t.currentPoint = this.currentPoint.toArray(), t;
        }
      }, {
        key: "fromJSON",
        value: function fromJSON(t) {
          return _get(_getPrototypeOf(rm.prototype), "fromJSON", this).call(this, t), this.currentPoint.fromArray(t.currentPoint), this;
        }
      }]);

      return rm;
    }(nm);

    exports.Path = rm;

    var im = /*#__PURE__*/function (_rm) {
      _inherits(im, _rm);

      var _super77 = _createSuper(im);

      function im(t) {
        var _this67;

        _classCallCheck(this, im);

        _this67 = _super77.call(this, t), _this67.uuid = Fn.generateUUID(), _this67.type = "Shape", _this67.holes = [];
        return _this67;
      }

      _createClass(im, [{
        key: "getPointsHoles",
        value: function getPointsHoles(t) {
          var e = [];

          for (var _n209 = 0, _r168 = this.holes.length; _n209 < _r168; _n209++) {
            e[_n209] = this.holes[_n209].getPoints(t);
          }

          return e;
        }
      }, {
        key: "extractPoints",
        value: function extractPoints(t) {
          return {
            shape: this.getPoints(t),
            holes: this.getPointsHoles(t)
          };
        }
      }, {
        key: "copy",
        value: function copy(t) {
          _get(_getPrototypeOf(im.prototype), "copy", this).call(this, t), this.holes = [];

          for (var _e195 = 0, _n210 = t.holes.length; _e195 < _n210; _e195++) {
            var _n211 = t.holes[_e195];
            this.holes.push(_n211.clone());
          }

          return this;
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          var t = _get(_getPrototypeOf(im.prototype), "toJSON", this).call(this);

          t.uuid = this.uuid, t.holes = [];

          for (var _e196 = 0, _n212 = this.holes.length; _e196 < _n212; _e196++) {
            var _n213 = this.holes[_e196];
            t.holes.push(_n213.toJSON());
          }

          return t;
        }
      }, {
        key: "fromJSON",
        value: function fromJSON(t) {
          _get(_getPrototypeOf(im.prototype), "fromJSON", this).call(this, t), this.uuid = t.uuid, this.holes = [];

          for (var _e197 = 0, _n214 = t.holes.length; _e197 < _n214; _e197++) {
            var _n215 = t.holes[_e197];
            this.holes.push(new rm().fromJSON(_n215));
          }

          return this;
        }
      }]);

      return im;
    }(rm);

    exports.Shape = im;

    var sm = /*#__PURE__*/function (_Jr6) {
      _inherits(sm, _Jr6);

      var _super78 = _createSuper(sm);

      function sm(t) {
        var _this68;

        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

        _classCallCheck(this, sm);

        _this68 = _super78.call(this), _this68.type = "Light", _this68.color = new _i(t), _this68.intensity = e;
        return _this68;
      }

      _createClass(sm, [{
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(sm.prototype), "copy", this).call(this, t), this.color.copy(t.color), this.intensity = t.intensity, this;
        }
      }, {
        key: "toJSON",
        value: function toJSON(t) {
          var e = _get(_getPrototypeOf(sm.prototype), "toJSON", this).call(this, t);

          return e.object.color = this.color.getHex(), e.object.intensity = this.intensity, void 0 !== this.groundColor && (e.object.groundColor = this.groundColor.getHex()), void 0 !== this.distance && (e.object.distance = this.distance), void 0 !== this.angle && (e.object.angle = this.angle), void 0 !== this.decay && (e.object.decay = this.decay), void 0 !== this.penumbra && (e.object.penumbra = this.penumbra), void 0 !== this.shadow && (e.object.shadow = this.shadow.toJSON()), e;
        }
      }]);

      return sm;
    }(Jr);

    exports.Light = sm, sm.prototype.isLight = !0;

    var om = /*#__PURE__*/function (_sm) {
      _inherits(om, _sm);

      var _super79 = _createSuper(om);

      function om(t, e, n) {
        var _this69;

        _classCallCheck(this, om);

        _this69 = _super79.call(this, t, n), _this69.type = "HemisphereLight", _this69.position.copy(Jr.DefaultUp), _this69.updateMatrix(), _this69.groundColor = new _i(e);
        return _this69;
      }

      _createClass(om, [{
        key: "copy",
        value: function copy(t) {
          return sm.prototype.copy.call(this, t), this.groundColor.copy(t.groundColor), this;
        }
      }]);

      return om;
    }(sm);

    exports.HemisphereLight = om, om.prototype.isHemisphereLight = !0;
    var am = new Tr(),
        lm = new Yn(),
        cm = new Yn();

    var hm = /*#__PURE__*/function () {
      function hm(t) {
        _classCallCheck(this, hm);

        this.camera = t, this.bias = 0, this.normalBias = 0, this.radius = 1, this.mapSize = new On(512, 512), this.map = null, this.mapPass = null, this.matrix = new Tr(), this.autoUpdate = !0, this.needsUpdate = !1, this._frustum = new Rs(), this._frameExtents = new On(1, 1), this._viewportCount = 1, this._viewports = [new Wn(0, 0, 1, 1)];
      }

      _createClass(hm, [{
        key: "getViewportCount",
        value: function getViewportCount() {
          return this._viewportCount;
        }
      }, {
        key: "getFrustum",
        value: function getFrustum() {
          return this._frustum;
        }
      }, {
        key: "updateMatrices",
        value: function updateMatrices(t) {
          var e = this.camera,
              n = this.matrix;
          lm.setFromMatrixPosition(t.matrixWorld), e.position.copy(lm), cm.setFromMatrixPosition(t.target.matrixWorld), e.lookAt(cm), e.updateMatrixWorld(), am.multiplyMatrices(e.projectionMatrix, e.matrixWorldInverse), this._frustum.setFromProjectionMatrix(am), n.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1), n.multiply(e.projectionMatrix), n.multiply(e.matrixWorldInverse);
        }
      }, {
        key: "getViewport",
        value: function getViewport(t) {
          return this._viewports[t];
        }
      }, {
        key: "getFrameExtents",
        value: function getFrameExtents() {
          return this._frameExtents;
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return this.camera = t.camera.clone(), this.bias = t.bias, this.radius = t.radius, this.mapSize.copy(t.mapSize), this;
        }
      }, {
        key: "clone",
        value: function clone() {
          return new this.constructor().copy(this);
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          var t = {};
          return 0 !== this.bias && (t.bias = this.bias), 0 !== this.normalBias && (t.normalBias = this.normalBias), 1 !== this.radius && (t.radius = this.radius), 512 === this.mapSize.x && 512 === this.mapSize.y || (t.mapSize = this.mapSize.toArray()), t.camera = this.camera.toJSON(!1).object, delete t.camera.matrix, t;
        }
      }]);

      return hm;
    }();

    var um = /*#__PURE__*/function (_hm) {
      _inherits(um, _hm);

      var _super80 = _createSuper(um);

      function um() {
        var _this70;

        _classCallCheck(this, um);

        _this70 = _super80.call(this, new _s(50, 1, .5, 500)), _this70.focus = 1;
        return _this70;
      }

      _createClass(um, [{
        key: "updateMatrices",
        value: function updateMatrices(t) {
          var e = this.camera,
              n = 2 * Fn.RAD2DEG * t.angle * this.focus,
              r = this.mapSize.width / this.mapSize.height,
              i = t.distance || e.far;
          n === e.fov && r === e.aspect && i === e.far || (e.fov = n, e.aspect = r, e.far = i, e.updateProjectionMatrix()), _get(_getPrototypeOf(um.prototype), "updateMatrices", this).call(this, t);
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(um.prototype), "copy", this).call(this, t), this.focus = t.focus, this;
        }
      }]);

      return um;
    }(hm);

    um.prototype.isSpotLightShadow = !0;

    var pm = /*#__PURE__*/function (_sm2) {
      _inherits(pm, _sm2);

      var _super81 = _createSuper(pm);

      function pm(t, e) {
        var _this71;

        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Math.PI / 3;
        var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;

        _classCallCheck(this, pm);

        _this71 = _super81.call(this, t, e), _this71.type = "SpotLight", _this71.position.copy(Jr.DefaultUp), _this71.updateMatrix(), _this71.target = new Jr(), _this71.distance = n, _this71.angle = r, _this71.penumbra = i, _this71.decay = s, _this71.shadow = new um();
        return _this71;
      }

      _createClass(pm, [{
        key: "power",
        get: function get() {
          return this.intensity * Math.PI;
        },
        set: function set(t) {
          this.intensity = t / Math.PI;
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(pm.prototype), "copy", this).call(this, t), this.distance = t.distance, this.angle = t.angle, this.penumbra = t.penumbra, this.decay = t.decay, this.target = t.target.clone(), this.shadow = t.shadow.clone(), this;
        }
      }]);

      return pm;
    }(sm);

    exports.SpotLight = pm, pm.prototype.isSpotLight = !0;
    var dm = new Tr(),
        mm = new Yn(),
        fm = new Yn();

    var gm = /*#__PURE__*/function (_hm2) {
      _inherits(gm, _hm2);

      var _super82 = _createSuper(gm);

      function gm() {
        var _this72;

        _classCallCheck(this, gm);

        _this72 = _super82.call(this, new _s(90, 1, .5, 500)), _this72._frameExtents = new On(4, 2), _this72._viewportCount = 6, _this72._viewports = [new Wn(2, 1, 1, 1), new Wn(0, 1, 1, 1), new Wn(3, 1, 1, 1), new Wn(1, 1, 1, 1), new Wn(3, 0, 1, 1), new Wn(1, 0, 1, 1)], _this72._cubeDirections = [new Yn(1, 0, 0), new Yn(-1, 0, 0), new Yn(0, 0, 1), new Yn(0, 0, -1), new Yn(0, 1, 0), new Yn(0, -1, 0)], _this72._cubeUps = [new Yn(0, 1, 0), new Yn(0, 1, 0), new Yn(0, 1, 0), new Yn(0, 1, 0), new Yn(0, 0, 1), new Yn(0, 0, -1)];
        return _this72;
      }

      _createClass(gm, [{
        key: "updateMatrices",
        value: function updateMatrices(t) {
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          var n = this.camera,
              r = this.matrix,
              i = t.distance || n.far;
          i !== n.far && (n.far = i, n.updateProjectionMatrix()), mm.setFromMatrixPosition(t.matrixWorld), n.position.copy(mm), fm.copy(n.position), fm.add(this._cubeDirections[e]), n.up.copy(this._cubeUps[e]), n.lookAt(fm), n.updateMatrixWorld(), r.makeTranslation(-mm.x, -mm.y, -mm.z), dm.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse), this._frustum.setFromProjectionMatrix(dm);
        }
      }]);

      return gm;
    }(hm);

    gm.prototype.isPointLightShadow = !0;

    var xm = /*#__PURE__*/function (_sm3) {
      _inherits(xm, _sm3);

      var _super83 = _createSuper(xm);

      function xm(t, e) {
        var _this73;

        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

        _classCallCheck(this, xm);

        _this73 = _super83.call(this, t, e), _this73.type = "PointLight", _this73.distance = n, _this73.decay = r, _this73.shadow = new gm();
        return _this73;
      }

      _createClass(xm, [{
        key: "power",
        get: function get() {
          return 4 * this.intensity * Math.PI;
        },
        set: function set(t) {
          this.intensity = t / (4 * Math.PI);
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(xm.prototype), "copy", this).call(this, t), this.distance = t.distance, this.decay = t.decay, this.shadow = t.shadow.clone(), this;
        }
      }]);

      return xm;
    }(sm);

    exports.PointLight = xm, xm.prototype.isPointLight = !0;

    var vm = /*#__PURE__*/function (_ys) {
      _inherits(vm, _ys);

      var _super84 = _createSuper(vm);

      function vm() {
        var _this74;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;
        var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : .1;
        var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 2e3;

        _classCallCheck(this, vm);

        _this74 = _super84.call(this), _this74.type = "OrthographicCamera", _this74.zoom = 1, _this74.view = null, _this74.left = t, _this74.right = e, _this74.top = n, _this74.bottom = r, _this74.near = i, _this74.far = s, _this74.updateProjectionMatrix();
        return _this74;
      }

      _createClass(vm, [{
        key: "copy",
        value: function copy(t, e) {
          return _get(_getPrototypeOf(vm.prototype), "copy", this).call(this, t, e), this.left = t.left, this.right = t.right, this.top = t.top, this.bottom = t.bottom, this.near = t.near, this.far = t.far, this.zoom = t.zoom, this.view = null === t.view ? null : Object.assign({}, t.view), this;
        }
      }, {
        key: "setViewOffset",
        value: function setViewOffset(t, e, n, r, i, s) {
          null === this.view && (this.view = {
            enabled: !0,
            fullWidth: 1,
            fullHeight: 1,
            offsetX: 0,
            offsetY: 0,
            width: 1,
            height: 1
          }), this.view.enabled = !0, this.view.fullWidth = t, this.view.fullHeight = e, this.view.offsetX = n, this.view.offsetY = r, this.view.width = i, this.view.height = s, this.updateProjectionMatrix();
        }
      }, {
        key: "clearViewOffset",
        value: function clearViewOffset() {
          null !== this.view && (this.view.enabled = !1), this.updateProjectionMatrix();
        }
      }, {
        key: "updateProjectionMatrix",
        value: function updateProjectionMatrix() {
          var t = (this.right - this.left) / (2 * this.zoom),
              e = (this.top - this.bottom) / (2 * this.zoom),
              n = (this.right + this.left) / 2,
              r = (this.top + this.bottom) / 2;
          var i = n - t,
              s = n + t,
              o = r + e,
              a = r - e;

          if (null !== this.view && this.view.enabled) {
            var _t215 = (this.right - this.left) / this.view.fullWidth / this.zoom,
                _e198 = (this.top - this.bottom) / this.view.fullHeight / this.zoom;

            s = (i += _t215 * this.view.offsetX) + _t215 * this.view.width, a = (o -= _e198 * this.view.offsetY) - _e198 * this.view.height;
          }

          this.projectionMatrix.makeOrthographic(i, s, o, a, this.near, this.far), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
        }
      }, {
        key: "toJSON",
        value: function toJSON(t) {
          var e = Jr.prototype.toJSON.call(this, t);
          return e.object.zoom = this.zoom, e.object.left = this.left, e.object.right = this.right, e.object.top = this.top, e.object.bottom = this.bottom, e.object.near = this.near, e.object.far = this.far, null !== this.view && (e.object.view = Object.assign({}, this.view)), e;
        }
      }]);

      return vm;
    }(ys);

    exports.OrthographicCamera = vm, vm.prototype.isOrthographicCamera = !0;

    var ym = /*#__PURE__*/function (_hm3) {
      _inherits(ym, _hm3);

      var _super85 = _createSuper(ym);

      function ym() {
        _classCallCheck(this, ym);

        return _super85.call(this, new vm(-5, 5, 5, -5, .5, 500));
      }

      return ym;
    }(hm);

    ym.prototype.isDirectionalLightShadow = !0;

    var _m = /*#__PURE__*/function (_sm4) {
      _inherits(_m, _sm4);

      var _super86 = _createSuper(_m);

      function _m(t, e) {
        var _this75;

        _classCallCheck(this, _m);

        _this75 = _super86.call(this, t, e), _this75.type = "DirectionalLight", _this75.position.copy(Jr.DefaultUp), _this75.updateMatrix(), _this75.target = new Jr(), _this75.shadow = new ym();
        return _this75;
      }

      _createClass(_m, [{
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(_m.prototype), "copy", this).call(this, t), this.target = t.target.clone(), this.shadow = t.shadow.clone(), this;
        }
      }]);

      return _m;
    }(sm);

    exports.DirectionalLight = _m, _m.prototype.isDirectionalLight = !0;

    var bm = /*#__PURE__*/function (_sm5) {
      _inherits(bm, _sm5);

      var _super87 = _createSuper(bm);

      function bm(t, e) {
        var _this76;

        _classCallCheck(this, bm);

        _this76 = _super87.call(this, t, e), _this76.type = "AmbientLight";
        return _this76;
      }

      return bm;
    }(sm);

    exports.AmbientLight = bm, bm.prototype.isAmbientLight = !0;

    var wm = /*#__PURE__*/function (_sm6) {
      _inherits(wm, _sm6);

      var _super88 = _createSuper(wm);

      function wm(t, e) {
        var _this77;

        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;

        _classCallCheck(this, wm);

        _this77 = _super88.call(this, t, e), _this77.type = "RectAreaLight", _this77.width = n, _this77.height = r;
        return _this77;
      }

      _createClass(wm, [{
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(wm.prototype), "copy", this).call(this, t), this.width = t.width, this.height = t.height, this;
        }
      }, {
        key: "toJSON",
        value: function toJSON(t) {
          var e = _get(_getPrototypeOf(wm.prototype), "toJSON", this).call(this, t);

          return e.object.width = this.width, e.object.height = this.height, e;
        }
      }]);

      return wm;
    }(sm);

    exports.RectAreaLight = wm, wm.prototype.isRectAreaLight = !0;

    var Mm = /*#__PURE__*/function () {
      function Mm() {
        _classCallCheck(this, Mm);

        this.coefficients = [];

        for (var _t216 = 0; _t216 < 9; _t216++) {
          this.coefficients.push(new Yn());
        }
      }

      _createClass(Mm, [{
        key: "set",
        value: function set(t) {
          for (var _e199 = 0; _e199 < 9; _e199++) {
            this.coefficients[_e199].copy(t[_e199]);
          }

          return this;
        }
      }, {
        key: "zero",
        value: function zero() {
          for (var _t217 = 0; _t217 < 9; _t217++) {
            this.coefficients[_t217].set(0, 0, 0);
          }

          return this;
        }
      }, {
        key: "getAt",
        value: function getAt(t, e) {
          var n = t.x,
              r = t.y,
              i = t.z,
              s = this.coefficients;
          return e.copy(s[0]).multiplyScalar(.282095), e.addScaledVector(s[1], .488603 * r), e.addScaledVector(s[2], .488603 * i), e.addScaledVector(s[3], .488603 * n), e.addScaledVector(s[4], n * r * 1.092548), e.addScaledVector(s[5], r * i * 1.092548), e.addScaledVector(s[6], .315392 * (3 * i * i - 1)), e.addScaledVector(s[7], n * i * 1.092548), e.addScaledVector(s[8], .546274 * (n * n - r * r)), e;
        }
      }, {
        key: "getIrradianceAt",
        value: function getIrradianceAt(t, e) {
          var n = t.x,
              r = t.y,
              i = t.z,
              s = this.coefficients;
          return e.copy(s[0]).multiplyScalar(.886227), e.addScaledVector(s[1], 1.023328 * r), e.addScaledVector(s[2], 1.023328 * i), e.addScaledVector(s[3], 1.023328 * n), e.addScaledVector(s[4], .858086 * n * r), e.addScaledVector(s[5], .858086 * r * i), e.addScaledVector(s[6], .743125 * i * i - .247708), e.addScaledVector(s[7], .858086 * n * i), e.addScaledVector(s[8], .429043 * (n * n - r * r)), e;
        }
      }, {
        key: "add",
        value: function add(t) {
          for (var _e200 = 0; _e200 < 9; _e200++) {
            this.coefficients[_e200].add(t.coefficients[_e200]);
          }

          return this;
        }
      }, {
        key: "addScaledSH",
        value: function addScaledSH(t, e) {
          for (var _n216 = 0; _n216 < 9; _n216++) {
            this.coefficients[_n216].addScaledVector(t.coefficients[_n216], e);
          }

          return this;
        }
      }, {
        key: "scale",
        value: function scale(t) {
          for (var _e201 = 0; _e201 < 9; _e201++) {
            this.coefficients[_e201].multiplyScalar(t);
          }

          return this;
        }
      }, {
        key: "lerp",
        value: function lerp(t, e) {
          for (var _n217 = 0; _n217 < 9; _n217++) {
            this.coefficients[_n217].lerp(t.coefficients[_n217], e);
          }

          return this;
        }
      }, {
        key: "equals",
        value: function equals(t) {
          for (var _e202 = 0; _e202 < 9; _e202++) {
            if (!this.coefficients[_e202].equals(t.coefficients[_e202])) return !1;
          }

          return !0;
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return this.set(t.coefficients);
        }
      }, {
        key: "clone",
        value: function clone() {
          return new this.constructor().copy(this);
        }
      }, {
        key: "fromArray",
        value: function fromArray(t) {
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          var n = this.coefficients;

          for (var _r169 = 0; _r169 < 9; _r169++) {
            n[_r169].fromArray(t, e + 3 * _r169);
          }

          return this;
        }
      }, {
        key: "toArray",
        value: function toArray() {
          var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          var n = this.coefficients;

          for (var _r170 = 0; _r170 < 9; _r170++) {
            n[_r170].toArray(t, e + 3 * _r170);
          }

          return t;
        }
      }], [{
        key: "getBasisAt",
        value: function getBasisAt(t, e) {
          var n = t.x,
              r = t.y,
              i = t.z;
          e[0] = .282095, e[1] = .488603 * r, e[2] = .488603 * i, e[3] = .488603 * n, e[4] = 1.092548 * n * r, e[5] = 1.092548 * r * i, e[6] = .315392 * (3 * i * i - 1), e[7] = 1.092548 * n * i, e[8] = .546274 * (n * n - r * r);
        }
      }]);

      return Mm;
    }();

    exports.SphericalHarmonics3 = Mm, Mm.prototype.isSphericalHarmonics3 = !0;

    var Sm = /*#__PURE__*/function (_sm7) {
      _inherits(Sm, _sm7);

      var _super89 = _createSuper(Sm);

      function Sm() {
        var _this78;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Mm();
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

        _classCallCheck(this, Sm);

        _this78 = _super89.call(this, void 0, e), _this78.sh = t;
        return _this78;
      }

      _createClass(Sm, [{
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(Sm.prototype), "copy", this).call(this, t), this.sh.copy(t.sh), this;
        }
      }, {
        key: "fromJSON",
        value: function fromJSON(t) {
          return this.intensity = t.intensity, this.sh.fromArray(t.sh), this;
        }
      }, {
        key: "toJSON",
        value: function toJSON(t) {
          var e = _get(_getPrototypeOf(Sm.prototype), "toJSON", this).call(this, t);

          return e.object.sh = this.sh.toArray(), e;
        }
      }]);

      return Sm;
    }(sm);

    exports.LightProbe = Sm, Sm.prototype.isLightProbe = !0;

    var Tm = /*#__PURE__*/function (_d19) {
      _inherits(Tm, _d19);

      var _super90 = _createSuper(Tm);

      function Tm(t) {
        var _this79;

        _classCallCheck(this, Tm);

        _this79 = _super90.call(this, t), _this79.textures = {};
        return _this79;
      }

      _createClass(Tm, [{
        key: "load",
        value: function load(t, e, n, r) {
          var i = this,
              s = new wd(i.manager);
          s.setPath(i.path), s.setRequestHeader(i.requestHeader), s.setWithCredentials(i.withCredentials), s.load(t, function (n) {
            try {
              e(i.parse(JSON.parse(n)));
            } catch (s) {
              r ? r(s) : console.error(s), i.manager.itemError(t);
            }
          }, n, r);
        }
      }, {
        key: "parse",
        value: function parse(t) {
          var e = this.textures;

          function n(t) {
            return void 0 === e[t] && console.warn("THREE.MaterialLoader: Undefined texture", t), e[t];
          }

          var r = new td[t.type]();
          if (void 0 !== t.uuid && (r.uuid = t.uuid), void 0 !== t.name && (r.name = t.name), void 0 !== t.color && void 0 !== r.color && r.color.setHex(t.color), void 0 !== t.roughness && (r.roughness = t.roughness), void 0 !== t.metalness && (r.metalness = t.metalness), void 0 !== t.sheen && (r.sheen = new _i().setHex(t.sheen)), void 0 !== t.emissive && void 0 !== r.emissive && r.emissive.setHex(t.emissive), void 0 !== t.specular && void 0 !== r.specular && r.specular.setHex(t.specular), void 0 !== t.shininess && (r.shininess = t.shininess), void 0 !== t.clearcoat && (r.clearcoat = t.clearcoat), void 0 !== t.clearcoatRoughness && (r.clearcoatRoughness = t.clearcoatRoughness), void 0 !== t.fog && (r.fog = t.fog), void 0 !== t.flatShading && (r.flatShading = t.flatShading), void 0 !== t.blending && (r.blending = t.blending), void 0 !== t.combine && (r.combine = t.combine), void 0 !== t.side && (r.side = t.side), void 0 !== t.shadowSide && (r.shadowSide = t.shadowSide), void 0 !== t.opacity && (r.opacity = t.opacity), void 0 !== t.transparent && (r.transparent = t.transparent), void 0 !== t.alphaTest && (r.alphaTest = t.alphaTest), void 0 !== t.depthTest && (r.depthTest = t.depthTest), void 0 !== t.depthWrite && (r.depthWrite = t.depthWrite), void 0 !== t.colorWrite && (r.colorWrite = t.colorWrite), void 0 !== t.stencilWrite && (r.stencilWrite = t.stencilWrite), void 0 !== t.stencilWriteMask && (r.stencilWriteMask = t.stencilWriteMask), void 0 !== t.stencilFunc && (r.stencilFunc = t.stencilFunc), void 0 !== t.stencilRef && (r.stencilRef = t.stencilRef), void 0 !== t.stencilFuncMask && (r.stencilFuncMask = t.stencilFuncMask), void 0 !== t.stencilFail && (r.stencilFail = t.stencilFail), void 0 !== t.stencilZFail && (r.stencilZFail = t.stencilZFail), void 0 !== t.stencilZPass && (r.stencilZPass = t.stencilZPass), void 0 !== t.wireframe && (r.wireframe = t.wireframe), void 0 !== t.wireframeLinewidth && (r.wireframeLinewidth = t.wireframeLinewidth), void 0 !== t.wireframeLinecap && (r.wireframeLinecap = t.wireframeLinecap), void 0 !== t.wireframeLinejoin && (r.wireframeLinejoin = t.wireframeLinejoin), void 0 !== t.rotation && (r.rotation = t.rotation), 1 !== t.linewidth && (r.linewidth = t.linewidth), void 0 !== t.dashSize && (r.dashSize = t.dashSize), void 0 !== t.gapSize && (r.gapSize = t.gapSize), void 0 !== t.scale && (r.scale = t.scale), void 0 !== t.polygonOffset && (r.polygonOffset = t.polygonOffset), void 0 !== t.polygonOffsetFactor && (r.polygonOffsetFactor = t.polygonOffsetFactor), void 0 !== t.polygonOffsetUnits && (r.polygonOffsetUnits = t.polygonOffsetUnits), void 0 !== t.skinning && (r.skinning = t.skinning), void 0 !== t.morphTargets && (r.morphTargets = t.morphTargets), void 0 !== t.morphNormals && (r.morphNormals = t.morphNormals), void 0 !== t.dithering && (r.dithering = t.dithering), void 0 !== t.alphaToCoverage && (r.alphaToCoverage = t.alphaToCoverage), void 0 !== t.premultipliedAlpha && (r.premultipliedAlpha = t.premultipliedAlpha), void 0 !== t.vertexTangents && (r.vertexTangents = t.vertexTangents), void 0 !== t.visible && (r.visible = t.visible), void 0 !== t.toneMapped && (r.toneMapped = t.toneMapped), void 0 !== t.userData && (r.userData = t.userData), void 0 !== t.vertexColors && ("number" == typeof t.vertexColors ? r.vertexColors = t.vertexColors > 0 : r.vertexColors = t.vertexColors), void 0 !== t.uniforms) for (var _i137 in t.uniforms) {
            var _e203 = t.uniforms[_i137];

            switch (r.uniforms[_i137] = {}, _e203.type) {
              case "t":
                r.uniforms[_i137].value = n(_e203.value);
                break;

              case "c":
                r.uniforms[_i137].value = new _i().setHex(_e203.value);
                break;

              case "v2":
                r.uniforms[_i137].value = new On().fromArray(_e203.value);
                break;

              case "v3":
                r.uniforms[_i137].value = new Yn().fromArray(_e203.value);
                break;

              case "v4":
                r.uniforms[_i137].value = new Wn().fromArray(_e203.value);
                break;

              case "m3":
                r.uniforms[_i137].value = new zn().fromArray(_e203.value);
                break;

              case "m4":
                r.uniforms[_i137].value = new Tr().fromArray(_e203.value);
                break;

              default:
                r.uniforms[_i137].value = _e203.value;
            }
          }
          if (void 0 !== t.defines && (r.defines = t.defines), void 0 !== t.vertexShader && (r.vertexShader = t.vertexShader), void 0 !== t.fragmentShader && (r.fragmentShader = t.fragmentShader), void 0 !== t.extensions) for (var _i138 in t.extensions) {
            r.extensions[_i138] = t.extensions[_i138];
          }

          if (void 0 !== t.shading && (r.flatShading = 1 === t.shading), void 0 !== t.size && (r.size = t.size), void 0 !== t.sizeAttenuation && (r.sizeAttenuation = t.sizeAttenuation), void 0 !== t.map && (r.map = n(t.map)), void 0 !== t.matcap && (r.matcap = n(t.matcap)), void 0 !== t.alphaMap && (r.alphaMap = n(t.alphaMap)), void 0 !== t.bumpMap && (r.bumpMap = n(t.bumpMap)), void 0 !== t.bumpScale && (r.bumpScale = t.bumpScale), void 0 !== t.normalMap && (r.normalMap = n(t.normalMap)), void 0 !== t.normalMapType && (r.normalMapType = t.normalMapType), void 0 !== t.normalScale) {
            var _e204 = t.normalScale;
            !1 === Array.isArray(_e204) && (_e204 = [_e204, _e204]), r.normalScale = new On().fromArray(_e204);
          }

          return void 0 !== t.displacementMap && (r.displacementMap = n(t.displacementMap)), void 0 !== t.displacementScale && (r.displacementScale = t.displacementScale), void 0 !== t.displacementBias && (r.displacementBias = t.displacementBias), void 0 !== t.roughnessMap && (r.roughnessMap = n(t.roughnessMap)), void 0 !== t.metalnessMap && (r.metalnessMap = n(t.metalnessMap)), void 0 !== t.emissiveMap && (r.emissiveMap = n(t.emissiveMap)), void 0 !== t.emissiveIntensity && (r.emissiveIntensity = t.emissiveIntensity), void 0 !== t.specularMap && (r.specularMap = n(t.specularMap)), void 0 !== t.envMap && (r.envMap = n(t.envMap)), void 0 !== t.envMapIntensity && (r.envMapIntensity = t.envMapIntensity), void 0 !== t.reflectivity && (r.reflectivity = t.reflectivity), void 0 !== t.refractionRatio && (r.refractionRatio = t.refractionRatio), void 0 !== t.lightMap && (r.lightMap = n(t.lightMap)), void 0 !== t.lightMapIntensity && (r.lightMapIntensity = t.lightMapIntensity), void 0 !== t.aoMap && (r.aoMap = n(t.aoMap)), void 0 !== t.aoMapIntensity && (r.aoMapIntensity = t.aoMapIntensity), void 0 !== t.gradientMap && (r.gradientMap = n(t.gradientMap)), void 0 !== t.clearcoatMap && (r.clearcoatMap = n(t.clearcoatMap)), void 0 !== t.clearcoatRoughnessMap && (r.clearcoatRoughnessMap = n(t.clearcoatRoughnessMap)), void 0 !== t.clearcoatNormalMap && (r.clearcoatNormalMap = n(t.clearcoatNormalMap)), void 0 !== t.clearcoatNormalScale && (r.clearcoatNormalScale = new On().fromArray(t.clearcoatNormalScale)), void 0 !== t.transmission && (r.transmission = t.transmission), void 0 !== t.transmissionMap && (r.transmissionMap = n(t.transmissionMap)), r;
        }
      }, {
        key: "setTextures",
        value: function setTextures(t) {
          return this.textures = t, this;
        }
      }]);

      return Tm;
    }(_d);

    exports.MaterialLoader = Tm;
    var Em = {
      decodeText: function decodeText(t) {
        if ("undefined" != typeof TextDecoder) return new TextDecoder().decode(t);
        var e = "";

        for (var _r171 = 0, _i139 = t.length; _r171 < _i139; _r171++) {
          e += String.fromCharCode(t[_r171]);
        }

        try {
          return decodeURIComponent(escape(e));
        } catch (n) {
          return e;
        }
      },
      extractUrlBase: function extractUrlBase(t) {
        var e = t.lastIndexOf("/");
        return -1 === e ? "./" : t.substr(0, e + 1);
      }
    };

    function Am() {
      ji.call(this), this.type = "InstancedBufferGeometry", this.instanceCount = 1 / 0;
    }

    function Lm(t, e, n, r) {
      "number" == typeof n && (r = n, n = !1, console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")), Si.call(this, t, e, n), this.meshPerAttribute = r || 1;
    }

    exports.LoaderUtils = Em, Am.prototype = Object.assign(Object.create(ji.prototype), {
      constructor: Am,
      isInstancedBufferGeometry: !0,
      copy: function copy(t) {
        return ji.prototype.copy.call(this, t), this.instanceCount = t.instanceCount, this;
      },
      clone: function clone() {
        return new this.constructor().copy(this);
      },
      toJSON: function toJSON() {
        var t = ji.prototype.toJSON.call(this);
        return t.instanceCount = this.instanceCount, t.isInstancedBufferGeometry = !0, t;
      }
    }), Lm.prototype = Object.assign(Object.create(Si.prototype), {
      constructor: Lm,
      isInstancedBufferAttribute: !0,
      copy: function copy(t) {
        return Si.prototype.copy.call(this, t), this.meshPerAttribute = t.meshPerAttribute, this;
      },
      toJSON: function toJSON() {
        var t = Si.prototype.toJSON.call(this);
        return t.meshPerAttribute = this.meshPerAttribute, t.isInstancedBufferAttribute = !0, t;
      }
    });

    var Rm = /*#__PURE__*/function (_d20) {
      _inherits(Rm, _d20);

      var _super91 = _createSuper(Rm);

      function Rm(t) {
        _classCallCheck(this, Rm);

        return _super91.call(this, t);
      }

      _createClass(Rm, [{
        key: "load",
        value: function load(t, e, n, r) {
          var i = this,
              s = new wd(i.manager);
          s.setPath(i.path), s.setRequestHeader(i.requestHeader), s.setWithCredentials(i.withCredentials), s.load(t, function (n) {
            try {
              e(i.parse(JSON.parse(n)));
            } catch (s) {
              r ? r(s) : console.error(s), i.manager.itemError(t);
            }
          }, n, r);
        }
      }, {
        key: "parse",
        value: function parse(t) {
          var e = {},
              n = {};

          function r(t, r) {
            if (void 0 !== e[r]) return e[r];

            var i = t.interleavedBuffers[r],
                s = function (t, e) {
              if (void 0 !== n[e]) return n[e];
              var r = t.arrayBuffers[e],
                  i = new Uint32Array(r).buffer;
              return n[e] = i, i;
            }(t, i.buffer),
                o = new Ch(Oi(i.type, s), i.stride);

            return o.uuid = i.uuid, e[r] = o, o;
          }

          var i = t.isInstancedBufferGeometry ? new Am() : new ji(),
              s = t.data.index;

          if (void 0 !== s) {
            var _t218 = Oi(s.type, s.array);

            i.setIndex(new Si(_t218, 1));
          }

          var o = t.data.attributes;

          for (var _h13 in o) {
            var _e205 = o[_h13];

            var _n218 = void 0;

            if (_e205.isInterleavedBufferAttribute) {
              _n218 = new Dh(r(t.data, _e205.data), _e205.itemSize, _e205.offset, _e205.normalized);
            } else {
              var _t219 = Oi(_e205.type, _e205.array);

              _n218 = new (_e205.isInstancedBufferAttribute ? Lm : Si)(_t219, _e205.itemSize, _e205.normalized);
            }

            void 0 !== _e205.name && (_n218.name = _e205.name), void 0 !== _e205.usage && _n218.setUsage(_e205.usage), void 0 !== _e205.updateRange && (_n218.updateRange.offset = _e205.updateRange.offset, _n218.updateRange.count = _e205.updateRange.count), i.setAttribute(_h13, _n218);
          }

          var a = t.data.morphAttributes;
          if (a) for (var _h14 in a) {
            var _e206 = a[_h14],
                _n219 = [];

            for (var _i140 = 0, _s82 = _e206.length; _i140 < _s82; _i140++) {
              var _s83 = _e206[_i140];

              var _o73 = void 0;

              if (_s83.isInterleavedBufferAttribute) {
                _o73 = new Dh(r(t.data, _s83.data), _s83.itemSize, _s83.offset, _s83.normalized);
              } else {
                _o73 = new Si(Oi(_s83.type, _s83.array), _s83.itemSize, _s83.normalized);
              }

              void 0 !== _s83.name && (_o73.name = _s83.name), _n219.push(_o73);
            }

            i.morphAttributes[_h14] = _n219;
          }
          t.data.morphTargetsRelative && (i.morphTargetsRelative = !0);
          var l = t.data.groups || t.data.drawcalls || t.data.offsets;
          if (void 0 !== l) for (var _h15 = 0, _u17 = l.length; _h15 !== _u17; ++_h15) {
            var _t220 = l[_h15];
            i.addGroup(_t220.start, _t220.count, _t220.materialIndex);
          }
          var c = t.data.boundingSphere;

          if (void 0 !== c) {
            var _t221 = new Yn();

            void 0 !== c.center && _t221.fromArray(c.center), i.boundingSphere = new gr(_t221, c.radius);
          }

          return t.name && (i.name = t.name), t.userData && (i.userData = t.userData), i;
        }
      }]);

      return Rm;
    }(_d);

    exports.BufferGeometryLoader = Rm;

    var Cm = /*#__PURE__*/function (_d21) {
      _inherits(Cm, _d21);

      var _super92 = _createSuper(Cm);

      function Cm(t) {
        _classCallCheck(this, Cm);

        return _super92.call(this, t);
      }

      _createClass(Cm, [{
        key: "load",
        value: function load(t, e, n, r) {
          var i = this,
              s = "" === this.path ? Em.extractUrlBase(t) : this.path;
          this.resourcePath = this.resourcePath || s;
          var o = new wd(this.manager);
          o.setPath(this.path), o.setRequestHeader(this.requestHeader), o.setWithCredentials(this.withCredentials), o.load(t, function (n) {
            var s = null;

            try {
              s = JSON.parse(n);
            } catch (a) {
              return void 0 !== r && r(a), void console.error("THREE:ObjectLoader: Can't parse " + t + ".", a.message);
            }

            var o = s.metadata;
            void 0 !== o && void 0 !== o.type && "geometry" !== o.type.toLowerCase() ? i.parse(s, e) : console.error("THREE.ObjectLoader: Can't load " + t);
          }, n, r);
        }
      }, {
        key: "parse",
        value: function parse(t, e) {
          var n = this.parseAnimations(t.animations),
              r = this.parseShapes(t.shapes),
              i = this.parseGeometries(t.geometries, r),
              s = this.parseImages(t.images, function () {
            void 0 !== e && e(l);
          }),
              o = this.parseTextures(t.textures, s),
              a = this.parseMaterials(t.materials, o),
              l = this.parseObject(t.object, i, a, n),
              c = this.parseSkeletons(t.skeletons, l);

          if (this.bindSkeletons(l, c), void 0 !== e) {
            var _t222 = !1;

            for (var _e207 in s) {
              if (s[_e207] instanceof HTMLImageElement) {
                _t222 = !0;
                break;
              }
            }

            !1 === _t222 && e(l);
          }

          return l;
        }
      }, {
        key: "parseShapes",
        value: function parseShapes(t) {
          var e = {};
          if (void 0 !== t) for (var _n220 = 0, _r172 = t.length; _n220 < _r172; _n220++) {
            var _r173 = new im().fromJSON(t[_n220]);

            e[_r173.uuid] = _r173;
          }
          return e;
        }
      }, {
        key: "parseSkeletons",
        value: function parseSkeletons(t, e) {
          var n = {},
              r = {};
          if (e.traverse(function (t) {
            t.isBone && (r[t.uuid] = t);
          }), void 0 !== t) for (var _i141 = 0, _s84 = t.length; _i141 < _s84; _i141++) {
            var _e208 = new au().fromJSON(t[_i141], r);

            n[_e208.uuid] = _e208;
          }
          return n;
        }
      }, {
        key: "parseGeometries",
        value: function parseGeometries(t, e) {
          var n = {};
          var r;

          if (void 0 !== t) {
            var _i142 = new Rm();

            for (var _s85 = 0, _o74 = t.length; _s85 < _o74; _s85++) {
              var _o75 = void 0;

              var _a42 = t[_s85];

              switch (_a42.type) {
                case "PlaneGeometry":
                case "PlaneBufferGeometry":
                  _o75 = new Vp[_a42.type](_a42.width, _a42.height, _a42.widthSegments, _a42.heightSegments);
                  break;

                case "BoxGeometry":
                case "BoxBufferGeometry":
                  _o75 = new Vp[_a42.type](_a42.width, _a42.height, _a42.depth, _a42.widthSegments, _a42.heightSegments, _a42.depthSegments);
                  break;

                case "CircleGeometry":
                case "CircleBufferGeometry":
                  _o75 = new Vp[_a42.type](_a42.radius, _a42.segments, _a42.thetaStart, _a42.thetaLength);
                  break;

                case "CylinderGeometry":
                case "CylinderBufferGeometry":
                  _o75 = new Vp[_a42.type](_a42.radiusTop, _a42.radiusBottom, _a42.height, _a42.radialSegments, _a42.heightSegments, _a42.openEnded, _a42.thetaStart, _a42.thetaLength);
                  break;

                case "ConeGeometry":
                case "ConeBufferGeometry":
                  _o75 = new Vp[_a42.type](_a42.radius, _a42.height, _a42.radialSegments, _a42.heightSegments, _a42.openEnded, _a42.thetaStart, _a42.thetaLength);
                  break;

                case "SphereGeometry":
                case "SphereBufferGeometry":
                  _o75 = new Vp[_a42.type](_a42.radius, _a42.widthSegments, _a42.heightSegments, _a42.phiStart, _a42.phiLength, _a42.thetaStart, _a42.thetaLength);
                  break;

                case "DodecahedronGeometry":
                case "DodecahedronBufferGeometry":
                case "IcosahedronGeometry":
                case "IcosahedronBufferGeometry":
                case "OctahedronGeometry":
                case "OctahedronBufferGeometry":
                case "TetrahedronGeometry":
                case "TetrahedronBufferGeometry":
                  _o75 = new Vp[_a42.type](_a42.radius, _a42.detail);
                  break;

                case "RingGeometry":
                case "RingBufferGeometry":
                  _o75 = new Vp[_a42.type](_a42.innerRadius, _a42.outerRadius, _a42.thetaSegments, _a42.phiSegments, _a42.thetaStart, _a42.thetaLength);
                  break;

                case "TorusGeometry":
                case "TorusBufferGeometry":
                  _o75 = new Vp[_a42.type](_a42.radius, _a42.tube, _a42.radialSegments, _a42.tubularSegments, _a42.arc);
                  break;

                case "TorusKnotGeometry":
                case "TorusKnotBufferGeometry":
                  _o75 = new Vp[_a42.type](_a42.radius, _a42.tube, _a42.tubularSegments, _a42.radialSegments, _a42.p, _a42.q);
                  break;

                case "TubeGeometry":
                case "TubeBufferGeometry":
                  _o75 = new Vp[_a42.type](new em[_a42.path.type]().fromJSON(_a42.path), _a42.tubularSegments, _a42.radius, _a42.radialSegments, _a42.closed);
                  break;

                case "LatheGeometry":
                case "LatheBufferGeometry":
                  _o75 = new Vp[_a42.type](_a42.points, _a42.segments, _a42.phiStart, _a42.phiLength);
                  break;

                case "PolyhedronGeometry":
                case "PolyhedronBufferGeometry":
                  _o75 = new Vp[_a42.type](_a42.vertices, _a42.indices, _a42.radius, _a42.details);
                  break;

                case "ShapeGeometry":
                case "ShapeBufferGeometry":
                  r = [];

                  for (var _n221 = 0, _i143 = _a42.shapes.length; _n221 < _i143; _n221++) {
                    var _t224 = e[_a42.shapes[_n221]];
                    r.push(_t224);
                  }

                  _o75 = new Vp[_a42.type](r, _a42.curveSegments);
                  break;

                case "ExtrudeGeometry":
                case "ExtrudeBufferGeometry":
                  r = [];

                  for (var _n222 = 0, _i144 = _a42.shapes.length; _n222 < _i144; _n222++) {
                    var _t225 = e[_a42.shapes[_n222]];
                    r.push(_t225);
                  }

                  var _t223 = _a42.options.extrudePath;
                  void 0 !== _t223 && (_a42.options.extrudePath = new em[_t223.type]().fromJSON(_t223)), _o75 = new Vp[_a42.type](r, _a42.options);
                  break;

                case "BufferGeometry":
                case "InstancedBufferGeometry":
                  _o75 = _i142.parse(_a42);
                  break;

                case "Geometry":
                  console.error('THREE.ObjectLoader: Loading "Geometry" is not supported anymore.');
                  break;

                default:
                  console.warn('THREE.ObjectLoader: Unsupported geometry type "' + _a42.type + '"');
                  continue;
              }

              _o75.uuid = _a42.uuid, void 0 !== _a42.name && (_o75.name = _a42.name), !0 === _o75.isBufferGeometry && void 0 !== _a42.userData && (_o75.userData = _a42.userData), n[_a42.uuid] = _o75;
            }
          }

          return n;
        }
      }, {
        key: "parseMaterials",
        value: function parseMaterials(t, e) {
          var n = {},
              r = {};

          if (void 0 !== t) {
            var _i145 = new Tm();

            _i145.setTextures(e);

            for (var _e209 = 0, _s86 = t.length; _e209 < _s86; _e209++) {
              var _s87 = t[_e209];

              if ("MultiMaterial" === _s87.type) {
                var _t226 = [];

                for (var _e210 = 0; _e210 < _s87.materials.length; _e210++) {
                  var _r174 = _s87.materials[_e210];
                  void 0 === n[_r174.uuid] && (n[_r174.uuid] = _i145.parse(_r174)), _t226.push(n[_r174.uuid]);
                }

                r[_s87.uuid] = _t226;
              } else void 0 === n[_s87.uuid] && (n[_s87.uuid] = _i145.parse(_s87)), r[_s87.uuid] = n[_s87.uuid];
            }
          }

          return r;
        }
      }, {
        key: "parseAnimations",
        value: function parseAnimations(t) {
          var e = {};
          if (void 0 !== t) for (var _n223 = 0; _n223 < t.length; _n223++) {
            var _r175 = t[_n223],
                _i146 = md.parse(_r175);

            e[_i146.uuid] = _i146;
          }
          return e;
        }
      }, {
        key: "parseImages",
        value: function parseImages(t, e) {
          var n = this,
              r = {};
          var i;

          function s(t) {
            if ("string" == typeof t) {
              var _e211 = t;
              return function (t) {
                return n.manager.itemStart(t), i.load(t, function () {
                  n.manager.itemEnd(t);
                }, void 0, function () {
                  n.manager.itemError(t), n.manager.itemEnd(t);
                });
              }(/^(\/\/)|([a-z]+:(\/\/)?)/i.test(_e211) ? _e211 : n.resourcePath + _e211);
            }

            return t.data ? {
              data: Oi(t.type, t.data),
              width: t.width,
              height: t.height
            } : null;
          }

          if (void 0 !== t && t.length > 0) {
            var _n224 = new vd(e);

            (i = new Td(_n224)).setCrossOrigin(this.crossOrigin);

            for (var _e212 = 0, _i147 = t.length; _e212 < _i147; _e212++) {
              var _n225 = t[_e212],
                  _i148 = _n225.url;

              if (Array.isArray(_i148)) {
                r[_n225.uuid] = [];

                for (var _t227 = 0, _e213 = _i148.length; _t227 < _e213; _t227++) {
                  var _e214 = s(_i148[_t227]);

                  null !== _e214 && (_e214 instanceof HTMLImageElement ? r[_n225.uuid].push(_e214) : r[_n225.uuid].push(new Es(_e214.data, _e214.width, _e214.height)));
                }
              } else {
                var _t228 = s(_n225.url);

                null !== _t228 && (r[_n225.uuid] = _t228);
              }
            }
          }

          return r;
        }
      }, {
        key: "parseTextures",
        value: function parseTextures(t, e) {
          function n(t, e) {
            return "number" == typeof t ? t : (console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", t), e[t]);
          }

          var r = {};
          if (void 0 !== t) for (var _i149 = 0, _s88 = t.length; _i149 < _s88; _i149++) {
            var _s89 = t[_i149];

            var _o76 = void 0;

            void 0 === _s89.image && console.warn('THREE.ObjectLoader: No "image" specified for', _s89.uuid), void 0 === e[_s89.image] && console.warn("THREE.ObjectLoader: Undefined image", _s89.image);
            var _a43 = e[_s89.image];
            Array.isArray(_a43) ? (_o76 = new Ss(_a43), 6 === _a43.length && (_o76.needsUpdate = !0)) : (_o76 = _a43 && _a43.data ? new Es(_a43.data, _a43.width, _a43.height) : new kn(_a43), _a43 && (_o76.needsUpdate = !0)), _o76.uuid = _s89.uuid, void 0 !== _s89.name && (_o76.name = _s89.name), void 0 !== _s89.mapping && (_o76.mapping = n(_s89.mapping, Pm)), void 0 !== _s89.offset && _o76.offset.fromArray(_s89.offset), void 0 !== _s89.repeat && _o76.repeat.fromArray(_s89.repeat), void 0 !== _s89.center && _o76.center.fromArray(_s89.center), void 0 !== _s89.rotation && (_o76.rotation = _s89.rotation), void 0 !== _s89.wrap && (_o76.wrapS = n(_s89.wrap[0], Dm), _o76.wrapT = n(_s89.wrap[1], Dm)), void 0 !== _s89.format && (_o76.format = _s89.format), void 0 !== _s89.type && (_o76.type = _s89.type), void 0 !== _s89.encoding && (_o76.encoding = _s89.encoding), void 0 !== _s89.minFilter && (_o76.minFilter = n(_s89.minFilter, Im)), void 0 !== _s89.magFilter && (_o76.magFilter = n(_s89.magFilter, Im)), void 0 !== _s89.anisotropy && (_o76.anisotropy = _s89.anisotropy), void 0 !== _s89.flipY && (_o76.flipY = _s89.flipY), void 0 !== _s89.premultiplyAlpha && (_o76.premultiplyAlpha = _s89.premultiplyAlpha), void 0 !== _s89.unpackAlignment && (_o76.unpackAlignment = _s89.unpackAlignment), r[_s89.uuid] = _o76;
          }
          return r;
        }
      }, {
        key: "parseObject",
        value: function parseObject(t, e, n, r) {
          var i, s, o;

          function a(t) {
            return void 0 === e[t] && console.warn("THREE.ObjectLoader: Undefined geometry", t), e[t];
          }

          function l(t) {
            if (void 0 !== t) {
              if (Array.isArray(t)) {
                var _e215 = [];

                for (var _r176 = 0, _i150 = t.length; _r176 < _i150; _r176++) {
                  var _i151 = t[_r176];
                  void 0 === n[_i151] && console.warn("THREE.ObjectLoader: Undefined material", _i151), _e215.push(n[_i151]);
                }

                return _e215;
              }

              return void 0 === n[t] && console.warn("THREE.ObjectLoader: Undefined material", t), n[t];
            }
          }

          switch (t.type) {
            case "Scene":
              i = new Rh(), void 0 !== t.background && Number.isInteger(t.background) && (i.background = new _i(t.background)), void 0 !== t.fog && ("Fog" === t.fog.type ? i.fog = new Lh(t.fog.color, t.fog.near, t.fog.far) : "FogExp2" === t.fog.type && (i.fog = new Ah(t.fog.color, t.fog.density)));
              break;

            case "PerspectiveCamera":
              i = new _s(t.fov, t.aspect, t.near, t.far), void 0 !== t.focus && (i.focus = t.focus), void 0 !== t.zoom && (i.zoom = t.zoom), void 0 !== t.filmGauge && (i.filmGauge = t.filmGauge), void 0 !== t.filmOffset && (i.filmOffset = t.filmOffset), void 0 !== t.view && (i.view = Object.assign({}, t.view));
              break;

            case "OrthographicCamera":
              i = new vm(t.left, t.right, t.top, t.bottom, t.near, t.far), void 0 !== t.zoom && (i.zoom = t.zoom), void 0 !== t.view && (i.view = Object.assign({}, t.view));
              break;

            case "AmbientLight":
              i = new bm(t.color, t.intensity);
              break;

            case "DirectionalLight":
              i = new _m(t.color, t.intensity);
              break;

            case "PointLight":
              i = new xm(t.color, t.intensity, t.distance, t.decay);
              break;

            case "RectAreaLight":
              i = new wm(t.color, t.intensity, t.width, t.height);
              break;

            case "SpotLight":
              i = new pm(t.color, t.intensity, t.distance, t.angle, t.penumbra, t.decay);
              break;

            case "HemisphereLight":
              i = new om(t.color, t.groundColor, t.intensity);
              break;

            case "LightProbe":
              i = new Sm().fromJSON(t);
              break;

            case "SkinnedMesh":
              i = new ru(s = a(t.geometry), o = l(t.material)), void 0 !== t.bindMode && (i.bindMode = t.bindMode), void 0 !== t.bindMatrix && i.bindMatrix.fromArray(t.bindMatrix), void 0 !== t.skeleton && (i.skeleton = t.skeleton);
              break;

            case "Mesh":
              i = new cs(s = a(t.geometry), o = l(t.material));
              break;

            case "InstancedMesh":
              s = a(t.geometry), o = l(t.material);
              var _e216 = t.count,
                  _n226 = t.instanceMatrix,
                  _r177 = t.instanceColor;
              (i = new pu(s, o, _e216)).instanceMatrix = new Si(new Float32Array(_n226.array), 16), void 0 !== _r177 && (i.instanceColor = new Si(new Float32Array(_r177.array), _r177.itemSize));
              break;

            case "LOD":
              i = new Qh();
              break;

            case "Line":
              i = new yu(a(t.geometry), l(t.material));
              break;

            case "LineLoop":
              i = new Mu(a(t.geometry), l(t.material));
              break;

            case "LineSegments":
              i = new wu(a(t.geometry), l(t.material));
              break;

            case "PointCloud":
            case "Points":
              i = new Ru(a(t.geometry), l(t.material));
              break;

            case "Sprite":
              i = new Xh(l(t.material));
              break;

            case "Group":
              i = new _h();
              break;

            case "Bone":
              i = new iu();
              break;

            default:
              i = new Jr();
          }

          if (i.uuid = t.uuid, void 0 !== t.name && (i.name = t.name), void 0 !== t.matrix ? (i.matrix.fromArray(t.matrix), void 0 !== t.matrixAutoUpdate && (i.matrixAutoUpdate = t.matrixAutoUpdate), i.matrixAutoUpdate && i.matrix.decompose(i.position, i.quaternion, i.scale)) : (void 0 !== t.position && i.position.fromArray(t.position), void 0 !== t.rotation && i.rotation.fromArray(t.rotation), void 0 !== t.quaternion && i.quaternion.fromArray(t.quaternion), void 0 !== t.scale && i.scale.fromArray(t.scale)), void 0 !== t.castShadow && (i.castShadow = t.castShadow), void 0 !== t.receiveShadow && (i.receiveShadow = t.receiveShadow), t.shadow && (void 0 !== t.shadow.bias && (i.shadow.bias = t.shadow.bias), void 0 !== t.shadow.normalBias && (i.shadow.normalBias = t.shadow.normalBias), void 0 !== t.shadow.radius && (i.shadow.radius = t.shadow.radius), void 0 !== t.shadow.mapSize && i.shadow.mapSize.fromArray(t.shadow.mapSize), void 0 !== t.shadow.camera && (i.shadow.camera = this.parseObject(t.shadow.camera))), void 0 !== t.visible && (i.visible = t.visible), void 0 !== t.frustumCulled && (i.frustumCulled = t.frustumCulled), void 0 !== t.renderOrder && (i.renderOrder = t.renderOrder), void 0 !== t.userData && (i.userData = t.userData), void 0 !== t.layers && (i.layers.mask = t.layers), void 0 !== t.children) {
            var _s90 = t.children;

            for (var _t229 = 0; _t229 < _s90.length; _t229++) {
              i.add(this.parseObject(_s90[_t229], e, n, r));
            }
          }

          if (void 0 !== t.animations) {
            var _e217 = t.animations;

            for (var _t230 = 0; _t230 < _e217.length; _t230++) {
              var _n227 = _e217[_t230];
              i.animations.push(r[_n227]);
            }
          }

          if ("LOD" === t.type) {
            void 0 !== t.autoUpdate && (i.autoUpdate = t.autoUpdate);
            var _e218 = t.levels;

            for (var _t231 = 0; _t231 < _e218.length; _t231++) {
              var _n228 = _e218[_t231],
                  _r178 = i.getObjectByProperty("uuid", _n228.object);

              void 0 !== _r178 && i.addLevel(_r178, _n228.distance);
            }
          }

          return i;
        }
      }, {
        key: "bindSkeletons",
        value: function bindSkeletons(t, e) {
          0 !== Object.keys(e).length && t.traverse(function (t) {
            if (!0 === t.isSkinnedMesh && void 0 !== t.skeleton) {
              var _n229 = e[t.skeleton];
              void 0 === _n229 ? console.warn("THREE.ObjectLoader: No skeleton found with UUID:", t.skeleton) : t.bind(_n229, t.bindMatrix);
            }
          });
        }
      }, {
        key: "setTexturePath",
        value: function setTexturePath(t) {
          return console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath()."), this.setResourcePath(t);
        }
      }]);

      return Cm;
    }(_d);

    exports.ObjectLoader = Cm;
    var Pm = {
      UVMapping: et,
      CubeReflectionMapping: nt,
      CubeRefractionMapping: rt,
      EquirectangularReflectionMapping: it,
      EquirectangularRefractionMapping: st,
      CubeUVReflectionMapping: ot,
      CubeUVRefractionMapping: at
    },
        Dm = {
      RepeatWrapping: lt,
      ClampToEdgeWrapping: ct,
      MirroredRepeatWrapping: ht
    },
        Im = {
      NearestFilter: ut,
      NearestMipmapNearestFilter: pt,
      NearestMipmapLinearFilter: mt,
      LinearFilter: gt,
      LinearMipmapNearestFilter: xt,
      LinearMipmapLinearFilter: yt
    };

    function Bm(t) {
      "undefined" == typeof createImageBitmap && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."), "undefined" == typeof fetch && console.warn("THREE.ImageBitmapLoader: fetch() not supported."), _d.call(this, t), this.options = {
        premultiplyAlpha: "none"
      };
    }

    Bm.prototype = Object.assign(Object.create(_d.prototype), {
      constructor: Bm,
      isImageBitmapLoader: !0,
      setOptions: function setOptions(t) {
        return this.options = t, this;
      },
      load: function load(t, e, n, r) {
        void 0 === t && (t = ""), void 0 !== this.path && (t = this.path + t), t = this.manager.resolveURL(t);
        var i = this,
            s = xd.get(t);
        if (void 0 !== s) return i.manager.itemStart(t), setTimeout(function () {
          e && e(s), i.manager.itemEnd(t);
        }, 0), s;
        var o = {};
        o.credentials = "anonymous" === this.crossOrigin ? "same-origin" : "include", o.headers = this.requestHeader, fetch(t, o).then(function (t) {
          return t.blob();
        }).then(function (t) {
          return createImageBitmap(t, Object.assign(i.options, {
            colorSpaceConversion: "none"
          }));
        }).then(function (n) {
          xd.add(t, n), e && e(n), i.manager.itemEnd(t);
        }).catch(function (e) {
          r && r(e), i.manager.itemError(t), i.manager.itemEnd(t);
        }), i.manager.itemStart(t);
      }
    });

    var Nm = /*#__PURE__*/function () {
      function Nm() {
        _classCallCheck(this, Nm);

        this.type = "ShapePath", this.color = new _i(), this.subPaths = [], this.currentPath = null;
      }

      _createClass(Nm, [{
        key: "moveTo",
        value: function moveTo(t, e) {
          return this.currentPath = new rm(), this.subPaths.push(this.currentPath), this.currentPath.moveTo(t, e), this;
        }
      }, {
        key: "lineTo",
        value: function lineTo(t, e) {
          return this.currentPath.lineTo(t, e), this;
        }
      }, {
        key: "quadraticCurveTo",
        value: function quadraticCurveTo(t, e, n, r) {
          return this.currentPath.quadraticCurveTo(t, e, n, r), this;
        }
      }, {
        key: "bezierCurveTo",
        value: function bezierCurveTo(t, e, n, r, i, s) {
          return this.currentPath.bezierCurveTo(t, e, n, r, i, s), this;
        }
      }, {
        key: "splineThru",
        value: function splineThru(t) {
          return this.currentPath.splineThru(t), this;
        }
      }, {
        key: "toShapes",
        value: function toShapes(t, e) {
          function n(t) {
            var e = [];

            for (var _n230 = 0, _r179 = t.length; _n230 < _r179; _n230++) {
              var _r180 = t[_n230],
                  _i152 = new im();

              _i152.curves = _r180.curves, e.push(_i152);
            }

            return e;
          }

          function r(t, e) {
            var n = e.length;
            var r = !1;

            for (var _i153 = n - 1, _s91 = 0; _s91 < n; _i153 = _s91++) {
              var _n231 = e[_i153],
                  _o77 = e[_s91],
                  _a44 = _o77.x - _n231.x,
                  _l36 = _o77.y - _n231.y;

              if (Math.abs(_l36) > Number.EPSILON) {
                if (_l36 < 0 && (_n231 = e[_s91], _a44 = -_a44, _o77 = e[_i153], _l36 = -_l36), t.y < _n231.y || t.y > _o77.y) continue;

                if (t.y === _n231.y) {
                  if (t.x === _n231.x) return !0;
                } else {
                  var _e219 = _l36 * (t.x - _n231.x) - _a44 * (t.y - _n231.y);

                  if (0 === _e219) return !0;
                  if (_e219 < 0) continue;
                  r = !r;
                }
              } else {
                if (t.y !== _n231.y) continue;
                if (_o77.x <= t.x && t.x <= _n231.x || _n231.x <= t.x && t.x <= _o77.x) return !0;
              }
            }

            return r;
          }

          var i = Mp.isClockWise,
              s = this.subPaths;
          if (0 === s.length) return [];
          if (!0 === e) return n(s);
          var o, a, l;
          var c = [];
          if (1 === s.length) return a = s[0], (l = new im()).curves = a.curves, c.push(l), c;
          var h = !i(s[0].getPoints());
          h = t ? !h : h;
          var u = [],
              p = [];
          var d,
              m,
              f = [],
              g = 0;
          p[g] = void 0, f[g] = [];

          for (var _x6 = 0, _v7 = s.length; _x6 < _v7; _x6++) {
            o = i(d = (a = s[_x6]).getPoints()), (o = t ? !o : o) ? (!h && p[g] && g++, p[g] = {
              s: new im(),
              p: d
            }, p[g].s.curves = a.curves, h && g++, f[g] = []) : f[g].push({
              h: a,
              p: d[0]
            });
          }

          if (!p[0]) return n(s);

          if (p.length > 1) {
            var _t232 = !1;

            var _e220 = [];

            for (var _n232 = 0, _r181 = p.length; _n232 < _r181; _n232++) {
              u[_n232] = [];
            }

            for (var _n233 = 0, _i154 = p.length; _n233 < _i154; _n233++) {
              var _i155 = f[_n233];

              for (var _s92 = 0; _s92 < _i155.length; _s92++) {
                var _o78 = _i155[_s92];

                var _a45 = !0;

                for (var _i156 = 0; _i156 < p.length; _i156++) {
                  r(_o78.p, p[_i156].p) && (_n233 !== _i156 && _e220.push({
                    froms: _n233,
                    tos: _i156,
                    hole: _s92
                  }), _a45 ? (_a45 = !1, u[_i156].push(_o78)) : _t232 = !0);
                }

                _a45 && u[_n233].push(_o78);
              }
            }

            _e220.length > 0 && (_t232 || (f = u));
          }

          for (var _x7 = 0, _v8 = p.length; _x7 < _v8; _x7++) {
            l = p[_x7].s, c.push(l);

            for (var _t233 = 0, _e221 = (m = f[_x7]).length; _t233 < _e221; _t233++) {
              l.holes.push(m[_t233].h);
            }
          }

          return c;
        }
      }]);

      return Nm;
    }();

    exports.ShapePath = Nm;

    var Fm = /*#__PURE__*/function () {
      function Fm(t) {
        _classCallCheck(this, Fm);

        this.type = "Font", this.data = t;
      }

      _createClass(Fm, [{
        key: "generateShapes",
        value: function generateShapes(t) {
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
          var n = [],
              r = Om(t, e, this.data);

          for (var _i157 = 0, _s93 = r.length; _i157 < _s93; _i157++) {
            Array.prototype.push.apply(n, r[_i157].toShapes());
          }

          return n;
        }
      }]);

      return Fm;
    }();

    function Om(t, e, n) {
      var r = Array.from(t),
          i = e / n.resolution,
          s = (n.boundingBox.yMax - n.boundingBox.yMin + n.underlineThickness) * i,
          o = [];
      var a = 0,
          l = 0;

      for (var _c24 = 0; _c24 < r.length; _c24++) {
        var _t234 = r[_c24];
        if ("\n" === _t234) a = 0, l -= s;else {
          var _e222 = zm(_t234, i, a, l, n);

          a += _e222.offsetX, o.push(_e222.path);
        }
      }

      return o;
    }

    function zm(t, e, n, r, i) {
      var s = i.glyphs[t] || i.glyphs["?"];
      if (!s) return void console.error('THREE.Font: character "' + t + '" does not exists in font family ' + i.familyName + ".");
      var o = new Nm();
      var a, l, c, h, u, p, d, m;

      if (s.o) {
        var _t235 = s._cachedOutline || (s._cachedOutline = s.o.split(" "));

        for (var _i158 = 0, _s94 = _t235.length; _i158 < _s94;) {
          switch (_t235[_i158++]) {
            case "m":
              a = _t235[_i158++] * e + n, l = _t235[_i158++] * e + r, o.moveTo(a, l);
              break;

            case "l":
              a = _t235[_i158++] * e + n, l = _t235[_i158++] * e + r, o.lineTo(a, l);
              break;

            case "q":
              c = _t235[_i158++] * e + n, h = _t235[_i158++] * e + r, u = _t235[_i158++] * e + n, p = _t235[_i158++] * e + r, o.quadraticCurveTo(u, p, c, h);
              break;

            case "b":
              c = _t235[_i158++] * e + n, h = _t235[_i158++] * e + r, u = _t235[_i158++] * e + n, p = _t235[_i158++] * e + r, d = _t235[_i158++] * e + n, m = _t235[_i158++] * e + r, o.bezierCurveTo(u, p, d, m, c, h);
          }
        }
      }

      return {
        offsetX: s.ha * e,
        path: o
      };
    }

    exports.Font = Fm, Fm.prototype.isFont = !0;

    var Gm = /*#__PURE__*/function (_d22) {
      _inherits(Gm, _d22);

      var _super93 = _createSuper(Gm);

      function Gm(t) {
        _classCallCheck(this, Gm);

        return _super93.call(this, t);
      }

      _createClass(Gm, [{
        key: "load",
        value: function load(t, e, n, r) {
          var i = this,
              s = new wd(this.manager);
          s.setPath(this.path), s.setRequestHeader(this.requestHeader), s.setWithCredentials(i.withCredentials), s.load(t, function (t) {
            var n;

            try {
              n = JSON.parse(t);
            } catch (s) {
              console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."), n = JSON.parse(t.substring(65, t.length - 2));
            }

            var r = i.parse(n);
            e && e(r);
          }, n, r);
        }
      }, {
        key: "parse",
        value: function parse(t) {
          return new Fm(t);
        }
      }]);

      return Gm;
    }(_d);

    var Hm;
    exports.FontLoader = Gm;
    var Um = {
      getContext: function getContext() {
        return void 0 === Hm && (Hm = new (window.AudioContext || window.webkitAudioContext)()), Hm;
      },
      setContext: function setContext(t) {
        Hm = t;
      }
    };
    exports.AudioContext = Um;

    var km = /*#__PURE__*/function (_d23) {
      _inherits(km, _d23);

      var _super94 = _createSuper(km);

      function km(t) {
        _classCallCheck(this, km);

        return _super94.call(this, t);
      }

      _createClass(km, [{
        key: "load",
        value: function load(t, e, n, r) {
          var i = this,
              s = new wd(this.manager);
          s.setResponseType("arraybuffer"), s.setPath(this.path), s.setRequestHeader(this.requestHeader), s.setWithCredentials(this.withCredentials), s.load(t, function (n) {
            try {
              var _o79 = n.slice(0);

              Um.getContext().decodeAudioData(_o79, function (t) {
                e(t);
              });
            } catch (s) {
              r ? r(s) : console.error(s), i.manager.itemError(t);
            }
          }, n, r);
        }
      }]);

      return km;
    }(_d);

    exports.AudioLoader = km;

    var Vm = /*#__PURE__*/function (_Sm) {
      _inherits(Vm, _Sm);

      var _super95 = _createSuper(Vm);

      function Vm(t, e) {
        var _this80;

        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

        _classCallCheck(this, Vm);

        _this80 = _super95.call(this, void 0, n);
        var r = new _i().set(t),
            i = new _i().set(e),
            s = new Yn(r.r, r.g, r.b),
            o = new Yn(i.r, i.g, i.b),
            a = Math.sqrt(Math.PI),
            l = a * Math.sqrt(.75);
        _this80.sh.coefficients[0].copy(s).add(o).multiplyScalar(a), _this80.sh.coefficients[1].copy(s).sub(o).multiplyScalar(l);
        return _this80;
      }

      return Vm;
    }(Sm);

    exports.HemisphereLightProbe = Vm, Vm.prototype.isHemisphereLightProbe = !0;

    var Wm = /*#__PURE__*/function (_Sm2) {
      _inherits(Wm, _Sm2);

      var _super96 = _createSuper(Wm);

      function Wm(t) {
        var _this81;

        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

        _classCallCheck(this, Wm);

        _this81 = _super96.call(this, void 0, e);
        var n = new _i().set(t);

        _this81.sh.coefficients[0].set(n.r, n.g, n.b).multiplyScalar(2 * Math.sqrt(Math.PI));

        return _this81;
      }

      return Wm;
    }(Sm);

    exports.AmbientLightProbe = Wm, Wm.prototype.isAmbientLightProbe = !0;
    var jm = new Tr(),
        qm = new Tr();

    var Xm = /*#__PURE__*/function () {
      function Xm() {
        _classCallCheck(this, Xm);

        this.type = "StereoCamera", this.aspect = 1, this.eyeSep = .064, this.cameraL = new _s(), this.cameraL.layers.enable(1), this.cameraL.matrixAutoUpdate = !1, this.cameraR = new _s(), this.cameraR.layers.enable(2), this.cameraR.matrixAutoUpdate = !1, this._cache = {
          focus: null,
          fov: null,
          aspect: null,
          near: null,
          far: null,
          zoom: null,
          eyeSep: null
        };
      }

      _createClass(Xm, [{
        key: "update",
        value: function update(t) {
          var e = this._cache;

          if (e.focus !== t.focus || e.fov !== t.fov || e.aspect !== t.aspect * this.aspect || e.near !== t.near || e.far !== t.far || e.zoom !== t.zoom || e.eyeSep !== this.eyeSep) {
            e.focus = t.focus, e.fov = t.fov, e.aspect = t.aspect * this.aspect, e.near = t.near, e.far = t.far, e.zoom = t.zoom, e.eyeSep = this.eyeSep;

            var _n234 = t.projectionMatrix.clone(),
                _r182 = e.eyeSep / 2,
                _i159 = _r182 * e.near / e.focus,
                _s95 = e.near * Math.tan(Fn.DEG2RAD * e.fov * .5) / e.zoom;

            var _o80, _a46;

            qm.elements[12] = -_r182, jm.elements[12] = _r182, _o80 = -_s95 * e.aspect + _i159, _a46 = _s95 * e.aspect + _i159, _n234.elements[0] = 2 * e.near / (_a46 - _o80), _n234.elements[8] = (_a46 + _o80) / (_a46 - _o80), this.cameraL.projectionMatrix.copy(_n234), _o80 = -_s95 * e.aspect - _i159, _a46 = _s95 * e.aspect - _i159, _n234.elements[0] = 2 * e.near / (_a46 - _o80), _n234.elements[8] = (_a46 + _o80) / (_a46 - _o80), this.cameraR.projectionMatrix.copy(_n234);
          }

          this.cameraL.matrixWorld.copy(t.matrixWorld).multiply(qm), this.cameraR.matrixWorld.copy(t.matrixWorld).multiply(jm);
        }
      }]);

      return Xm;
    }();

    exports.StereoCamera = Xm;

    var Ym = /*#__PURE__*/function () {
      function Ym(t) {
        _classCallCheck(this, Ym);

        this.autoStart = void 0 === t || t, this.startTime = 0, this.oldTime = 0, this.elapsedTime = 0, this.running = !1;
      }

      _createClass(Ym, [{
        key: "start",
        value: function start() {
          this.startTime = Zm(), this.oldTime = this.startTime, this.elapsedTime = 0, this.running = !0;
        }
      }, {
        key: "stop",
        value: function stop() {
          this.getElapsedTime(), this.running = !1, this.autoStart = !1;
        }
      }, {
        key: "getElapsedTime",
        value: function getElapsedTime() {
          return this.getDelta(), this.elapsedTime;
        }
      }, {
        key: "getDelta",
        value: function getDelta() {
          var t = 0;
          if (this.autoStart && !this.running) return this.start(), 0;

          if (this.running) {
            var _e223 = Zm();

            t = (_e223 - this.oldTime) / 1e3, this.oldTime = _e223, this.elapsedTime += t;
          }

          return t;
        }
      }]);

      return Ym;
    }();

    function Zm() {
      return ("undefined" == typeof performance ? Date : performance).now();
    }

    exports.Clock = Ym;
    var Jm = new Yn(),
        Qm = new Xn(),
        Km = new Yn(),
        $m = new Yn();

    var tf = /*#__PURE__*/function (_Jr7) {
      _inherits(tf, _Jr7);

      var _super97 = _createSuper(tf);

      function tf() {
        var _this82;

        _classCallCheck(this, tf);

        _this82 = _super97.call(this), _this82.type = "AudioListener", _this82.context = Um.getContext(), _this82.gain = _this82.context.createGain(), _this82.gain.connect(_this82.context.destination), _this82.filter = null, _this82.timeDelta = 0, _this82._clock = new Ym();
        return _this82;
      }

      _createClass(tf, [{
        key: "getInput",
        value: function getInput() {
          return this.gain;
        }
      }, {
        key: "removeFilter",
        value: function removeFilter() {
          return null !== this.filter && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null), this;
        }
      }, {
        key: "getFilter",
        value: function getFilter() {
          return this.filter;
        }
      }, {
        key: "setFilter",
        value: function setFilter(t) {
          return null !== this.filter ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination), this.filter = t, this.gain.connect(this.filter), this.filter.connect(this.context.destination), this;
        }
      }, {
        key: "getMasterVolume",
        value: function getMasterVolume() {
          return this.gain.gain.value;
        }
      }, {
        key: "setMasterVolume",
        value: function setMasterVolume(t) {
          return this.gain.gain.setTargetAtTime(t, this.context.currentTime, .01), this;
        }
      }, {
        key: "updateMatrixWorld",
        value: function updateMatrixWorld(t) {
          _get(_getPrototypeOf(tf.prototype), "updateMatrixWorld", this).call(this, t);

          var e = this.context.listener,
              n = this.up;

          if (this.timeDelta = this._clock.getDelta(), this.matrixWorld.decompose(Jm, Qm, Km), $m.set(0, 0, -1).applyQuaternion(Qm), e.positionX) {
            var _t236 = this.context.currentTime + this.timeDelta;

            e.positionX.linearRampToValueAtTime(Jm.x, _t236), e.positionY.linearRampToValueAtTime(Jm.y, _t236), e.positionZ.linearRampToValueAtTime(Jm.z, _t236), e.forwardX.linearRampToValueAtTime($m.x, _t236), e.forwardY.linearRampToValueAtTime($m.y, _t236), e.forwardZ.linearRampToValueAtTime($m.z, _t236), e.upX.linearRampToValueAtTime(n.x, _t236), e.upY.linearRampToValueAtTime(n.y, _t236), e.upZ.linearRampToValueAtTime(n.z, _t236);
          } else e.setPosition(Jm.x, Jm.y, Jm.z), e.setOrientation($m.x, $m.y, $m.z, n.x, n.y, n.z);
        }
      }]);

      return tf;
    }(Jr);

    exports.AudioListener = tf;

    var ef = /*#__PURE__*/function (_Jr8) {
      _inherits(ef, _Jr8);

      var _super98 = _createSuper(ef);

      function ef(t) {
        var _this83;

        _classCallCheck(this, ef);

        _this83 = _super98.call(this), _this83.type = "Audio", _this83.listener = t, _this83.context = t.context, _this83.gain = _this83.context.createGain(), _this83.gain.connect(t.getInput()), _this83.autoplay = !1, _this83.buffer = null, _this83.detune = 0, _this83.loop = !1, _this83.loopStart = 0, _this83.loopEnd = 0, _this83.offset = 0, _this83.duration = void 0, _this83.playbackRate = 1, _this83.isPlaying = !1, _this83.hasPlaybackControl = !0, _this83.source = null, _this83.sourceType = "empty", _this83._startedAt = 0, _this83._progress = 0, _this83._connected = !1, _this83.filters = [];
        return _this83;
      }

      _createClass(ef, [{
        key: "getOutput",
        value: function getOutput() {
          return this.gain;
        }
      }, {
        key: "setNodeSource",
        value: function setNodeSource(t) {
          return this.hasPlaybackControl = !1, this.sourceType = "audioNode", this.source = t, this.connect(), this;
        }
      }, {
        key: "setMediaElementSource",
        value: function setMediaElementSource(t) {
          return this.hasPlaybackControl = !1, this.sourceType = "mediaNode", this.source = this.context.createMediaElementSource(t), this.connect(), this;
        }
      }, {
        key: "setMediaStreamSource",
        value: function setMediaStreamSource(t) {
          return this.hasPlaybackControl = !1, this.sourceType = "mediaStreamNode", this.source = this.context.createMediaStreamSource(t), this.connect(), this;
        }
      }, {
        key: "setBuffer",
        value: function setBuffer(t) {
          return this.buffer = t, this.sourceType = "buffer", this.autoplay && this.play(), this;
        }
      }, {
        key: "play",
        value: function play() {
          var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
          if (!0 === this.isPlaying) return void console.warn("THREE.Audio: Audio is already playing.");
          if (!1 === this.hasPlaybackControl) return void console.warn("THREE.Audio: this Audio has no playback control.");
          this._startedAt = this.context.currentTime + t;
          var e = this.context.createBufferSource();
          return e.buffer = this.buffer, e.loop = this.loop, e.loopStart = this.loopStart, e.loopEnd = this.loopEnd, e.onended = this.onEnded.bind(this), e.start(this._startedAt, this._progress + this.offset, this.duration), this.isPlaying = !0, this.source = e, this.setDetune(this.detune), this.setPlaybackRate(this.playbackRate), this.connect();
        }
      }, {
        key: "pause",
        value: function pause() {
          if (!1 !== this.hasPlaybackControl) return !0 === this.isPlaying && (this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate, !0 === this.loop && (this._progress = this._progress % (this.duration || this.buffer.duration)), this.source.stop(), this.source.onended = null, this.isPlaying = !1), this;
          console.warn("THREE.Audio: this Audio has no playback control.");
        }
      }, {
        key: "stop",
        value: function stop() {
          if (!1 !== this.hasPlaybackControl) return this._progress = 0, this.source.stop(), this.source.onended = null, this.isPlaying = !1, this;
          console.warn("THREE.Audio: this Audio has no playback control.");
        }
      }, {
        key: "connect",
        value: function connect() {
          if (this.filters.length > 0) {
            this.source.connect(this.filters[0]);

            for (var _t237 = 1, _e224 = this.filters.length; _t237 < _e224; _t237++) {
              this.filters[_t237 - 1].connect(this.filters[_t237]);
            }

            this.filters[this.filters.length - 1].connect(this.getOutput());
          } else this.source.connect(this.getOutput());

          return this._connected = !0, this;
        }
      }, {
        key: "disconnect",
        value: function disconnect() {
          if (this.filters.length > 0) {
            this.source.disconnect(this.filters[0]);

            for (var _t238 = 1, _e225 = this.filters.length; _t238 < _e225; _t238++) {
              this.filters[_t238 - 1].disconnect(this.filters[_t238]);
            }

            this.filters[this.filters.length - 1].disconnect(this.getOutput());
          } else this.source.disconnect(this.getOutput());

          return this._connected = !1, this;
        }
      }, {
        key: "getFilters",
        value: function getFilters() {
          return this.filters;
        }
      }, {
        key: "setFilters",
        value: function setFilters(t) {
          return t || (t = []), !0 === this._connected ? (this.disconnect(), this.filters = t.slice(), this.connect()) : this.filters = t.slice(), this;
        }
      }, {
        key: "setDetune",
        value: function setDetune(t) {
          if (this.detune = t, void 0 !== this.source.detune) return !0 === this.isPlaying && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, .01), this;
        }
      }, {
        key: "getDetune",
        value: function getDetune() {
          return this.detune;
        }
      }, {
        key: "getFilter",
        value: function getFilter() {
          return this.getFilters()[0];
        }
      }, {
        key: "setFilter",
        value: function setFilter(t) {
          return this.setFilters(t ? [t] : []);
        }
      }, {
        key: "setPlaybackRate",
        value: function setPlaybackRate(t) {
          if (!1 !== this.hasPlaybackControl) return this.playbackRate = t, !0 === this.isPlaying && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, .01), this;
          console.warn("THREE.Audio: this Audio has no playback control.");
        }
      }, {
        key: "getPlaybackRate",
        value: function getPlaybackRate() {
          return this.playbackRate;
        }
      }, {
        key: "onEnded",
        value: function onEnded() {
          this.isPlaying = !1;
        }
      }, {
        key: "getLoop",
        value: function getLoop() {
          return !1 === this.hasPlaybackControl ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop;
        }
      }, {
        key: "setLoop",
        value: function setLoop(t) {
          if (!1 !== this.hasPlaybackControl) return this.loop = t, !0 === this.isPlaying && (this.source.loop = this.loop), this;
          console.warn("THREE.Audio: this Audio has no playback control.");
        }
      }, {
        key: "setLoopStart",
        value: function setLoopStart(t) {
          return this.loopStart = t, this;
        }
      }, {
        key: "setLoopEnd",
        value: function setLoopEnd(t) {
          return this.loopEnd = t, this;
        }
      }, {
        key: "getVolume",
        value: function getVolume() {
          return this.gain.gain.value;
        }
      }, {
        key: "setVolume",
        value: function setVolume(t) {
          return this.gain.gain.setTargetAtTime(t, this.context.currentTime, .01), this;
        }
      }]);

      return ef;
    }(Jr);

    exports.Audio = ef;
    var nf = new Yn(),
        rf = new Xn(),
        sf = new Yn(),
        of = new Yn();

    var af = /*#__PURE__*/function (_ef) {
      _inherits(af, _ef);

      var _super99 = _createSuper(af);

      function af(t) {
        var _this84;

        _classCallCheck(this, af);

        _this84 = _super99.call(this, t), _this84.panner = _this84.context.createPanner(), _this84.panner.panningModel = "HRTF", _this84.panner.connect(_this84.gain);
        return _this84;
      }

      _createClass(af, [{
        key: "getOutput",
        value: function getOutput() {
          return this.panner;
        }
      }, {
        key: "getRefDistance",
        value: function getRefDistance() {
          return this.panner.refDistance;
        }
      }, {
        key: "setRefDistance",
        value: function setRefDistance(t) {
          return this.panner.refDistance = t, this;
        }
      }, {
        key: "getRolloffFactor",
        value: function getRolloffFactor() {
          return this.panner.rolloffFactor;
        }
      }, {
        key: "setRolloffFactor",
        value: function setRolloffFactor(t) {
          return this.panner.rolloffFactor = t, this;
        }
      }, {
        key: "getDistanceModel",
        value: function getDistanceModel() {
          return this.panner.distanceModel;
        }
      }, {
        key: "setDistanceModel",
        value: function setDistanceModel(t) {
          return this.panner.distanceModel = t, this;
        }
      }, {
        key: "getMaxDistance",
        value: function getMaxDistance() {
          return this.panner.maxDistance;
        }
      }, {
        key: "setMaxDistance",
        value: function setMaxDistance(t) {
          return this.panner.maxDistance = t, this;
        }
      }, {
        key: "setDirectionalCone",
        value: function setDirectionalCone(t, e, n) {
          return this.panner.coneInnerAngle = t, this.panner.coneOuterAngle = e, this.panner.coneOuterGain = n, this;
        }
      }, {
        key: "updateMatrixWorld",
        value: function updateMatrixWorld(t) {
          if (_get(_getPrototypeOf(af.prototype), "updateMatrixWorld", this).call(this, t), !0 === this.hasPlaybackControl && !1 === this.isPlaying) return;
          this.matrixWorld.decompose(nf, rf, sf), of.set(0, 0, 1).applyQuaternion(rf);
          var e = this.panner;

          if (e.positionX) {
            var _t239 = this.context.currentTime + this.listener.timeDelta;

            e.positionX.linearRampToValueAtTime(nf.x, _t239), e.positionY.linearRampToValueAtTime(nf.y, _t239), e.positionZ.linearRampToValueAtTime(nf.z, _t239), e.orientationX.linearRampToValueAtTime(of.x, _t239), e.orientationY.linearRampToValueAtTime(of.y, _t239), e.orientationZ.linearRampToValueAtTime(of.z, _t239);
          } else e.setPosition(nf.x, nf.y, nf.z), e.setOrientation(of.x, of.y, of.z);
        }
      }]);

      return af;
    }(ef);

    exports.PositionalAudio = af;

    var lf = /*#__PURE__*/function () {
      function lf(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2048;

        _classCallCheck(this, lf);

        this.analyser = t.context.createAnalyser(), this.analyser.fftSize = e, this.data = new Uint8Array(this.analyser.frequencyBinCount), t.getOutput().connect(this.analyser);
      }

      _createClass(lf, [{
        key: "getFrequencyData",
        value: function getFrequencyData() {
          return this.analyser.getByteFrequencyData(this.data), this.data;
        }
      }, {
        key: "getAverageFrequency",
        value: function getAverageFrequency() {
          var t = 0;
          var e = this.getFrequencyData();

          for (var _n235 = 0; _n235 < e.length; _n235++) {
            t += e[_n235];
          }

          return t / e.length;
        }
      }]);

      return lf;
    }();

    exports.AudioAnalyser = lf;

    var cf = /*#__PURE__*/function () {
      function cf(t, e, n) {
        _classCallCheck(this, cf);

        var r, i, s;

        switch (this.binding = t, this.valueSize = n, e) {
          case "quaternion":
            r = this._slerp, i = this._slerpAdditive, s = this._setAdditiveIdentityQuaternion, this.buffer = new Float64Array(6 * n), this._workIndex = 5;
            break;

          case "string":
          case "bool":
            r = this._select, i = this._select, s = this._setAdditiveIdentityOther, this.buffer = new Array(5 * n);
            break;

          default:
            r = this._lerp, i = this._lerpAdditive, s = this._setAdditiveIdentityNumeric, this.buffer = new Float64Array(5 * n);
        }

        this._mixBufferRegion = r, this._mixBufferRegionAdditive = i, this._setIdentity = s, this._origIndex = 3, this._addIndex = 4, this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, this.useCount = 0, this.referenceCount = 0;
      }

      _createClass(cf, [{
        key: "accumulate",
        value: function accumulate(t, e) {
          var n = this.buffer,
              r = this.valueSize,
              i = t * r + r;
          var s = this.cumulativeWeight;

          if (0 === s) {
            for (var _t240 = 0; _t240 !== r; ++_t240) {
              n[i + _t240] = n[_t240];
            }

            s = e;
          } else {
            var _t241 = e / (s += e);

            this._mixBufferRegion(n, i, 0, _t241, r);
          }

          this.cumulativeWeight = s;
        }
      }, {
        key: "accumulateAdditive",
        value: function accumulateAdditive(t) {
          var e = this.buffer,
              n = this.valueSize,
              r = n * this._addIndex;
          0 === this.cumulativeWeightAdditive && this._setIdentity(), this._mixBufferRegionAdditive(e, r, 0, t, n), this.cumulativeWeightAdditive += t;
        }
      }, {
        key: "apply",
        value: function apply(t) {
          var e = this.valueSize,
              n = this.buffer,
              r = t * e + e,
              i = this.cumulativeWeight,
              s = this.cumulativeWeightAdditive,
              o = this.binding;

          if (this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, i < 1) {
            var _t242 = e * this._origIndex;

            this._mixBufferRegion(n, r, _t242, 1 - i, e);
          }

          s > 0 && this._mixBufferRegionAdditive(n, r, this._addIndex * e, 1, e);

          for (var _a47 = e, _l37 = e + e; _a47 !== _l37; ++_a47) {
            if (n[_a47] !== n[_a47 + e]) {
              o.setValue(n, r);
              break;
            }
          }
        }
      }, {
        key: "saveOriginalState",
        value: function saveOriginalState() {
          var t = this.binding,
              e = this.buffer,
              n = this.valueSize,
              r = n * this._origIndex;
          t.getValue(e, r);

          for (var _i160 = n, _s96 = r; _i160 !== _s96; ++_i160) {
            e[_i160] = e[r + _i160 % n];
          }

          this._setIdentity(), this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0;
        }
      }, {
        key: "restoreOriginalState",
        value: function restoreOriginalState() {
          var t = 3 * this.valueSize;
          this.binding.setValue(this.buffer, t);
        }
      }, {
        key: "_setAdditiveIdentityNumeric",
        value: function _setAdditiveIdentityNumeric() {
          var t = this._addIndex * this.valueSize,
              e = t + this.valueSize;

          for (var _n236 = t; _n236 < e; _n236++) {
            this.buffer[_n236] = 0;
          }
        }
      }, {
        key: "_setAdditiveIdentityQuaternion",
        value: function _setAdditiveIdentityQuaternion() {
          this._setAdditiveIdentityNumeric(), this.buffer[this._addIndex * this.valueSize + 3] = 1;
        }
      }, {
        key: "_setAdditiveIdentityOther",
        value: function _setAdditiveIdentityOther() {
          var t = this._origIndex * this.valueSize,
              e = this._addIndex * this.valueSize;

          for (var _n237 = 0; _n237 < this.valueSize; _n237++) {
            this.buffer[e + _n237] = this.buffer[t + _n237];
          }
        }
      }, {
        key: "_select",
        value: function _select(t, e, n, r, i) {
          if (r >= .5) for (var _s97 = 0; _s97 !== i; ++_s97) {
            t[e + _s97] = t[n + _s97];
          }
        }
      }, {
        key: "_slerp",
        value: function _slerp(t, e, n, r) {
          Xn.slerpFlat(t, e, t, e, t, n, r);
        }
      }, {
        key: "_slerpAdditive",
        value: function _slerpAdditive(t, e, n, r, i) {
          var s = this._workIndex * i;
          Xn.multiplyQuaternionsFlat(t, s, t, e, t, n), Xn.slerpFlat(t, e, t, e, t, s, r);
        }
      }, {
        key: "_lerp",
        value: function _lerp(t, e, n, r, i) {
          var s = 1 - r;

          for (var _o81 = 0; _o81 !== i; ++_o81) {
            var _i161 = e + _o81;

            t[_i161] = t[_i161] * s + t[n + _o81] * r;
          }
        }
      }, {
        key: "_lerpAdditive",
        value: function _lerpAdditive(t, e, n, r, i) {
          for (var _s98 = 0; _s98 !== i; ++_s98) {
            var _i162 = e + _s98;

            t[_i162] = t[_i162] + t[n + _s98] * r;
          }
        }
      }]);

      return cf;
    }();

    exports.PropertyMixer = cf;
    var hf = "\\[\\]\\.:\\/",
        uf = new RegExp("[\\[\\]\\.:\\/]", "g"),
        pf = "[^\\[\\]\\.:\\/]",
        df = "[^" + "\\[\\]\\.:\\/".replace("\\.", "") + "]",
        mf = /((?:WC+[\/:])*)/.source.replace("WC", pf),
        ff = /(WCOD+)?/.source.replace("WCOD", df),
        gf = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", pf),
        xf = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", pf),
        vf = new RegExp("^" + mf + ff + gf + xf + "$"),
        yf = ["material", "materials", "bones"];

    function _f(t, e, n) {
      var r = n || bf.parseTrackName(e);
      this._targetGroup = t, this._bindings = t.subscribe_(e, r);
    }

    function bf(t, e, n) {
      this.path = e, this.parsedPath = n || bf.parseTrackName(e), this.node = bf.findNode(t, this.parsedPath.nodeName) || t, this.rootNode = t;
    }

    Object.assign(_f.prototype, {
      getValue: function getValue(t, e) {
        this.bind();
        var n = this._targetGroup.nCachedObjects_,
            r = this._bindings[n];
        void 0 !== r && r.getValue(t, e);
      },
      setValue: function setValue(t, e) {
        var n = this._bindings;

        for (var _r183 = this._targetGroup.nCachedObjects_, _i163 = n.length; _r183 !== _i163; ++_r183) {
          n[_r183].setValue(t, e);
        }
      },
      bind: function bind() {
        var t = this._bindings;

        for (var _e226 = this._targetGroup.nCachedObjects_, _n238 = t.length; _e226 !== _n238; ++_e226) {
          t[_e226].bind();
        }
      },
      unbind: function unbind() {
        var t = this._bindings;

        for (var _e227 = this._targetGroup.nCachedObjects_, _n239 = t.length; _e227 !== _n239; ++_e227) {
          t[_e227].unbind();
        }
      }
    }), Object.assign(bf, {
      Composite: _f,
      create: function create(t, e, n) {
        return t && t.isAnimationObjectGroup ? new bf.Composite(t, e, n) : new bf(t, e, n);
      },
      sanitizeNodeName: function sanitizeNodeName(t) {
        return t.replace(/\s/g, "_").replace(uf, "");
      },
      parseTrackName: function parseTrackName(t) {
        var e = vf.exec(t);
        if (!e) throw new Error("PropertyBinding: Cannot parse trackName: " + t);
        var n = {
          nodeName: e[2],
          objectName: e[3],
          objectIndex: e[4],
          propertyName: e[5],
          propertyIndex: e[6]
        },
            r = n.nodeName && n.nodeName.lastIndexOf(".");

        if (void 0 !== r && -1 !== r) {
          var _t243 = n.nodeName.substring(r + 1);

          -1 !== yf.indexOf(_t243) && (n.nodeName = n.nodeName.substring(0, r), n.objectName = _t243);
        }

        if (null === n.propertyName || 0 === n.propertyName.length) throw new Error("PropertyBinding: can not parse propertyName from trackName: " + t);
        return n;
      },
      findNode: function findNode(t, e) {
        if (!e || "" === e || "." === e || -1 === e || e === t.name || e === t.uuid) return t;

        if (t.skeleton) {
          var _n240 = t.skeleton.getBoneByName(e);

          if (void 0 !== _n240) return _n240;
        }

        if (t.children) {
          var _n241 = function _n241(t) {
            for (var _r185 = 0; _r185 < t.length; _r185++) {
              var _i164 = t[_r185];
              if (_i164.name === e || _i164.uuid === e) return _i164;

              var _s99 = _n241(_i164.children);

              if (_s99) return _s99;
            }

            return null;
          },
              _r184 = _n241(t.children);

          if (_r184) return _r184;
        }

        return null;
      }
    }), Object.assign(bf.prototype, {
      _getValue_unavailable: function _getValue_unavailable() {},
      _setValue_unavailable: function _setValue_unavailable() {},
      BindingType: {
        Direct: 0,
        EntireArray: 1,
        ArrayElement: 2,
        HasFromToArray: 3
      },
      Versioning: {
        None: 0,
        NeedsUpdate: 1,
        MatrixWorldNeedsUpdate: 2
      },
      GetterByBindingType: [function (t, e) {
        t[e] = this.node[this.propertyName];
      }, function (t, e) {
        var n = this.resolvedProperty;

        for (var _r186 = 0, _i165 = n.length; _r186 !== _i165; ++_r186) {
          t[e++] = n[_r186];
        }
      }, function (t, e) {
        t[e] = this.resolvedProperty[this.propertyIndex];
      }, function (t, e) {
        this.resolvedProperty.toArray(t, e);
      }],
      SetterByBindingTypeAndVersioning: [[function (t, e) {
        this.targetObject[this.propertyName] = t[e];
      }, function (t, e) {
        this.targetObject[this.propertyName] = t[e], this.targetObject.needsUpdate = !0;
      }, function (t, e) {
        this.targetObject[this.propertyName] = t[e], this.targetObject.matrixWorldNeedsUpdate = !0;
      }], [function (t, e) {
        var n = this.resolvedProperty;

        for (var _r187 = 0, _i166 = n.length; _r187 !== _i166; ++_r187) {
          n[_r187] = t[e++];
        }
      }, function (t, e) {
        var n = this.resolvedProperty;

        for (var _r188 = 0, _i167 = n.length; _r188 !== _i167; ++_r188) {
          n[_r188] = t[e++];
        }

        this.targetObject.needsUpdate = !0;
      }, function (t, e) {
        var n = this.resolvedProperty;

        for (var _r189 = 0, _i168 = n.length; _r189 !== _i168; ++_r189) {
          n[_r189] = t[e++];
        }

        this.targetObject.matrixWorldNeedsUpdate = !0;
      }], [function (t, e) {
        this.resolvedProperty[this.propertyIndex] = t[e];
      }, function (t, e) {
        this.resolvedProperty[this.propertyIndex] = t[e], this.targetObject.needsUpdate = !0;
      }, function (t, e) {
        this.resolvedProperty[this.propertyIndex] = t[e], this.targetObject.matrixWorldNeedsUpdate = !0;
      }], [function (t, e) {
        this.resolvedProperty.fromArray(t, e);
      }, function (t, e) {
        this.resolvedProperty.fromArray(t, e), this.targetObject.needsUpdate = !0;
      }, function (t, e) {
        this.resolvedProperty.fromArray(t, e), this.targetObject.matrixWorldNeedsUpdate = !0;
      }]],
      getValue: function getValue(t, e) {
        this.bind(), this.getValue(t, e);
      },
      setValue: function setValue(t, e) {
        this.bind(), this.setValue(t, e);
      },
      bind: function bind() {
        var t = this.node;
        var e = this.parsedPath,
            n = e.objectName,
            r = e.propertyName;
        var i = e.propertyIndex;
        if (t || (t = bf.findNode(this.rootNode, e.nodeName) || this.rootNode, this.node = t), this.getValue = this._getValue_unavailable, this.setValue = this._setValue_unavailable, !t) return void console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");

        if (n) {
          var _r190 = e.objectIndex;

          switch (n) {
            case "materials":
              if (!t.material) return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
              if (!t.material.materials) return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
              t = t.material.materials;
              break;

            case "bones":
              if (!t.skeleton) return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
              t = t.skeleton.bones;

              for (var _e228 = 0; _e228 < t.length; _e228++) {
                if (t[_e228].name === _r190) {
                  _r190 = _e228;
                  break;
                }
              }

              break;

            default:
              if (void 0 === t[n]) return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
              t = t[n];
          }

          if (void 0 !== _r190) {
            if (void 0 === t[_r190]) return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, t);
            t = t[_r190];
          }
        }

        var s = t[r];

        if (void 0 === s) {
          var _n242 = e.nodeName;
          return void console.error("THREE.PropertyBinding: Trying to update property for track: " + _n242 + "." + r + " but it wasn't found.", t);
        }

        var o = this.Versioning.None;
        this.targetObject = t, void 0 !== t.needsUpdate ? o = this.Versioning.NeedsUpdate : void 0 !== t.matrixWorldNeedsUpdate && (o = this.Versioning.MatrixWorldNeedsUpdate);
        var a = this.BindingType.Direct;

        if (void 0 !== i) {
          if ("morphTargetInfluences" === r) {
            if (!t.geometry) return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
            if (!t.geometry.isBufferGeometry) return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.", this);
            if (!t.geometry.morphAttributes) return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
            void 0 !== t.morphTargetDictionary[i] && (i = t.morphTargetDictionary[i]);
          }

          a = this.BindingType.ArrayElement, this.resolvedProperty = s, this.propertyIndex = i;
        } else void 0 !== s.fromArray && void 0 !== s.toArray ? (a = this.BindingType.HasFromToArray, this.resolvedProperty = s) : Array.isArray(s) ? (a = this.BindingType.EntireArray, this.resolvedProperty = s) : this.propertyName = r;

        this.getValue = this.GetterByBindingType[a], this.setValue = this.SetterByBindingTypeAndVersioning[a][o];
      },
      unbind: function unbind() {
        this.node = null, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
      }
    }), Object.assign(bf.prototype, {
      _getValue_unbound: bf.prototype.getValue,
      _setValue_unbound: bf.prototype.setValue
    });

    var wf = /*#__PURE__*/function () {
      function wf() {
        _classCallCheck(this, wf);

        this.uuid = Fn.generateUUID(), this._objects = Array.prototype.slice.call(arguments), this.nCachedObjects_ = 0;
        var t = {};
        this._indicesByUUID = t;

        for (var _n243 = 0, _r191 = arguments.length; _n243 !== _r191; ++_n243) {
          t[arguments[_n243].uuid] = _n243;
        }

        this._paths = [], this._parsedPaths = [], this._bindings = [], this._bindingsIndicesByPath = {};
        var e = this;
        this.stats = {
          objects: {
            get total() {
              return e._objects.length;
            },

            get inUse() {
              return this.total - e.nCachedObjects_;
            }

          },

          get bindingsPerObject() {
            return e._bindings.length;
          }

        };
      }

      _createClass(wf, [{
        key: "add",
        value: function add() {
          var t = this._objects,
              e = this._indicesByUUID,
              n = this._paths,
              r = this._parsedPaths,
              i = this._bindings,
              s = i.length;
          var o = void 0,
              a = t.length,
              l = this.nCachedObjects_;

          for (var _c25 = 0, _h16 = arguments.length; _c25 !== _h16; ++_c25) {
            var _h17 = arguments[_c25],
                _u18 = _h17.uuid;
            var _p21 = e[_u18];

            if (void 0 === _p21) {
              _p21 = a++, e[_u18] = _p21, t.push(_h17);

              for (var _t244 = 0, _e229 = s; _t244 !== _e229; ++_t244) {
                i[_t244].push(new bf(_h17, n[_t244], r[_t244]));
              }
            } else if (_p21 < l) {
              o = t[_p21];

              var _a48 = --l,
                  _c26 = t[_a48];

              e[_c26.uuid] = _p21, t[_p21] = _c26, e[_u18] = _a48, t[_a48] = _h17;

              for (var _t245 = 0, _e230 = s; _t245 !== _e230; ++_t245) {
                var _e231 = i[_t245],
                    _s100 = _e231[_a48];
                var _o82 = _e231[_p21];
                _e231[_p21] = _s100, void 0 === _o82 && (_o82 = new bf(_h17, n[_t245], r[_t245])), _e231[_a48] = _o82;
              }
            } else t[_p21] !== o && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
          }

          this.nCachedObjects_ = l;
        }
      }, {
        key: "remove",
        value: function remove() {
          var t = this._objects,
              e = this._indicesByUUID,
              n = this._bindings,
              r = n.length;
          var i = this.nCachedObjects_;

          for (var _s101 = 0, _o83 = arguments.length; _s101 !== _o83; ++_s101) {
            var _o84 = arguments[_s101],
                _a49 = _o84.uuid,
                _l38 = e[_a49];

            if (void 0 !== _l38 && _l38 >= i) {
              var _s102 = i++,
                  _c27 = t[_s102];

              e[_c27.uuid] = _l38, t[_l38] = _c27, e[_a49] = _s102, t[_s102] = _o84;

              for (var _t246 = 0, _e232 = r; _t246 !== _e232; ++_t246) {
                var _e233 = n[_t246],
                    _r192 = _e233[_s102],
                    _i169 = _e233[_l38];
                _e233[_l38] = _r192, _e233[_s102] = _i169;
              }
            }
          }

          this.nCachedObjects_ = i;
        }
      }, {
        key: "uncache",
        value: function uncache() {
          var t = this._objects,
              e = this._indicesByUUID,
              n = this._bindings,
              r = n.length;
          var i = this.nCachedObjects_,
              s = t.length;

          for (var _o85 = 0, _a50 = arguments.length; _o85 !== _a50; ++_o85) {
            var _a51 = arguments[_o85].uuid,
                _l39 = e[_a51];
            if (void 0 !== _l39) if (delete e[_a51], _l39 < i) {
              var _o86 = --i,
                  _a52 = t[_o86],
                  _c28 = --s,
                  _h18 = t[_c28];

              e[_a52.uuid] = _l39, t[_l39] = _a52, e[_h18.uuid] = _o86, t[_o86] = _h18, t.pop();

              for (var _t247 = 0, _e234 = r; _t247 !== _e234; ++_t247) {
                var _e235 = n[_t247],
                    _r193 = _e235[_o86],
                    _i170 = _e235[_c28];
                _e235[_l39] = _r193, _e235[_o86] = _i170, _e235.pop();
              }
            } else {
              var _i171 = --s,
                  _o87 = t[_i171];

              _i171 > 0 && (e[_o87.uuid] = _l39), t[_l39] = _o87, t.pop();

              for (var _t248 = 0, _e236 = r; _t248 !== _e236; ++_t248) {
                var _e237 = n[_t248];
                _e237[_l39] = _e237[_i171], _e237.pop();
              }
            }
          }

          this.nCachedObjects_ = i;
        }
      }, {
        key: "subscribe_",
        value: function subscribe_(t, e) {
          var n = this._bindingsIndicesByPath;
          var r = n[t];
          var i = this._bindings;
          if (void 0 !== r) return i[r];
          var s = this._paths,
              o = this._parsedPaths,
              a = this._objects,
              l = a.length,
              c = this.nCachedObjects_,
              h = new Array(l);
          r = i.length, n[t] = r, s.push(t), o.push(e), i.push(h);

          for (var _u19 = c, _p22 = a.length; _u19 !== _p22; ++_u19) {
            var _n244 = a[_u19];
            h[_u19] = new bf(_n244, t, e);
          }

          return h;
        }
      }, {
        key: "unsubscribe_",
        value: function unsubscribe_(t) {
          var e = this._bindingsIndicesByPath,
              n = e[t];

          if (void 0 !== n) {
            var _r194 = this._paths,
                _i172 = this._parsedPaths,
                _s103 = this._bindings,
                _o88 = _s103.length - 1,
                _a53 = _s103[_o88];

            e[t[_o88]] = n, _s103[n] = _a53, _s103.pop(), _i172[n] = _i172[_o88], _i172.pop(), _r194[n] = _r194[_o88], _r194.pop();
          }
        }
      }]);

      return wf;
    }();

    exports.AnimationObjectGroup = wf, wf.prototype.isAnimationObjectGroup = !0;

    var Mf = /*#__PURE__*/function () {
      function Mf(t, e) {
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : e.blendMode;

        _classCallCheck(this, Mf);

        this._mixer = t, this._clip = e, this._localRoot = n, this.blendMode = r;
        var i = e.tracks,
            s = i.length,
            o = new Array(s),
            a = {
          endingStart: Ge,
          endingEnd: Ge
        };

        for (var _l40 = 0; _l40 !== s; ++_l40) {
          var _t249 = i[_l40].createInterpolant(null);

          o[_l40] = _t249, _t249.settings = a;
        }

        this._interpolantSettings = a, this._interpolants = o, this._propertyBindings = new Array(s), this._cacheIndex = null, this._byClipCacheIndex = null, this._timeScaleInterpolant = null, this._weightInterpolant = null, this.loop = Be, this._loopCount = -1, this._startTime = null, this.time = 0, this.timeScale = 1, this._effectiveTimeScale = 1, this.weight = 1, this._effectiveWeight = 1, this.repetitions = 1 / 0, this.paused = !1, this.enabled = !0, this.clampWhenFinished = !1, this.zeroSlopeAtStart = !0, this.zeroSlopeAtEnd = !0;
      }

      _createClass(Mf, [{
        key: "play",
        value: function play() {
          return this._mixer._activateAction(this), this;
        }
      }, {
        key: "stop",
        value: function stop() {
          return this._mixer._deactivateAction(this), this.reset();
        }
      }, {
        key: "reset",
        value: function reset() {
          return this.paused = !1, this.enabled = !0, this.time = 0, this._loopCount = -1, this._startTime = null, this.stopFading().stopWarping();
        }
      }, {
        key: "isRunning",
        value: function isRunning() {
          return this.enabled && !this.paused && 0 !== this.timeScale && null === this._startTime && this._mixer._isActiveAction(this);
        }
      }, {
        key: "isScheduled",
        value: function isScheduled() {
          return this._mixer._isActiveAction(this);
        }
      }, {
        key: "startAt",
        value: function startAt(t) {
          return this._startTime = t, this;
        }
      }, {
        key: "setLoop",
        value: function setLoop(t, e) {
          return this.loop = t, this.repetitions = e, this;
        }
      }, {
        key: "setEffectiveWeight",
        value: function setEffectiveWeight(t) {
          return this.weight = t, this._effectiveWeight = this.enabled ? t : 0, this.stopFading();
        }
      }, {
        key: "getEffectiveWeight",
        value: function getEffectiveWeight() {
          return this._effectiveWeight;
        }
      }, {
        key: "fadeIn",
        value: function fadeIn(t) {
          return this._scheduleFading(t, 0, 1);
        }
      }, {
        key: "fadeOut",
        value: function fadeOut(t) {
          return this._scheduleFading(t, 1, 0);
        }
      }, {
        key: "crossFadeFrom",
        value: function crossFadeFrom(t, e, n) {
          if (t.fadeOut(e), this.fadeIn(e), n) {
            var _n245 = this._clip.duration,
                _r195 = t._clip.duration,
                _i173 = _r195 / _n245,
                _s104 = _n245 / _r195;

            t.warp(1, _i173, e), this.warp(_s104, 1, e);
          }

          return this;
        }
      }, {
        key: "crossFadeTo",
        value: function crossFadeTo(t, e, n) {
          return t.crossFadeFrom(this, e, n);
        }
      }, {
        key: "stopFading",
        value: function stopFading() {
          var t = this._weightInterpolant;
          return null !== t && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(t)), this;
        }
      }, {
        key: "setEffectiveTimeScale",
        value: function setEffectiveTimeScale(t) {
          return this.timeScale = t, this._effectiveTimeScale = this.paused ? 0 : t, this.stopWarping();
        }
      }, {
        key: "getEffectiveTimeScale",
        value: function getEffectiveTimeScale() {
          return this._effectiveTimeScale;
        }
      }, {
        key: "setDuration",
        value: function setDuration(t) {
          return this.timeScale = this._clip.duration / t, this.stopWarping();
        }
      }, {
        key: "syncWith",
        value: function syncWith(t) {
          return this.time = t.time, this.timeScale = t.timeScale, this.stopWarping();
        }
      }, {
        key: "halt",
        value: function halt(t) {
          return this.warp(this._effectiveTimeScale, 0, t);
        }
      }, {
        key: "warp",
        value: function warp(t, e, n) {
          var r = this._mixer,
              i = r.time,
              s = this.timeScale;
          var o = this._timeScaleInterpolant;
          null === o && (o = r._lendControlInterpolant(), this._timeScaleInterpolant = o);
          var a = o.parameterPositions,
              l = o.sampleValues;
          return a[0] = i, a[1] = i + n, l[0] = t / s, l[1] = e / s, this;
        }
      }, {
        key: "stopWarping",
        value: function stopWarping() {
          var t = this._timeScaleInterpolant;
          return null !== t && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(t)), this;
        }
      }, {
        key: "getMixer",
        value: function getMixer() {
          return this._mixer;
        }
      }, {
        key: "getClip",
        value: function getClip() {
          return this._clip;
        }
      }, {
        key: "getRoot",
        value: function getRoot() {
          return this._localRoot || this._mixer._root;
        }
      }, {
        key: "_update",
        value: function _update(t, e, n, r) {
          if (!this.enabled) return void this._updateWeight(t);
          var i = this._startTime;

          if (null !== i) {
            var _r196 = (t - i) * n;

            if (_r196 < 0 || 0 === n) return;
            this._startTime = null, e = n * _r196;
          }

          e *= this._updateTimeScale(t);

          var s = this._updateTime(e),
              o = this._updateWeight(t);

          if (o > 0) {
            var _t250 = this._interpolants,
                _e238 = this._propertyBindings;

            switch (this.blendMode) {
              case Ve:
                for (var _n246 = 0, _r197 = _t250.length; _n246 !== _r197; ++_n246) {
                  _t250[_n246].evaluate(s), _e238[_n246].accumulateAdditive(o);
                }

                break;

              case ke:
              default:
                for (var _n247 = 0, _i174 = _t250.length; _n247 !== _i174; ++_n247) {
                  _t250[_n247].evaluate(s), _e238[_n247].accumulate(r, o);
                }

            }
          }
        }
      }, {
        key: "_updateWeight",
        value: function _updateWeight(t) {
          var e = 0;

          if (this.enabled) {
            e = this.weight;
            var _n248 = this._weightInterpolant;

            if (null !== _n248) {
              var _r198 = _n248.evaluate(t)[0];

              e *= _r198, t > _n248.parameterPositions[1] && (this.stopFading(), 0 === _r198 && (this.enabled = !1));
            }
          }

          return this._effectiveWeight = e, e;
        }
      }, {
        key: "_updateTimeScale",
        value: function _updateTimeScale(t) {
          var e = 0;

          if (!this.paused) {
            e = this.timeScale;
            var _n249 = this._timeScaleInterpolant;

            if (null !== _n249) {
              e *= _n249.evaluate(t)[0], t > _n249.parameterPositions[1] && (this.stopWarping(), 0 === e ? this.paused = !0 : this.timeScale = e);
            }
          }

          return this._effectiveTimeScale = e, e;
        }
      }, {
        key: "_updateTime",
        value: function _updateTime(t) {
          var e = this._clip.duration,
              n = this.loop;
          var r = this.time + t,
              i = this._loopCount;
          var s = n === Ne;
          if (0 === t) return -1 === i ? r : s && 1 == (1 & i) ? e - r : r;

          if (n === Ie) {
            -1 === i && (this._loopCount = 0, this._setEndings(!0, !0, !1));

            t: {
              if (r >= e) r = e;else {
                if (!(r < 0)) {
                  this.time = r;
                  break t;
                }

                r = 0;
              }
              this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, this.time = r, this._mixer.dispatchEvent({
                type: "finished",
                action: this,
                direction: t < 0 ? -1 : 1
              });
            }
          } else {
            if (-1 === i && (t >= 0 ? (i = 0, this._setEndings(!0, 0 === this.repetitions, s)) : this._setEndings(0 === this.repetitions, !0, s)), r >= e || r < 0) {
              var _n250 = Math.floor(r / e);

              r -= e * _n250, i += Math.abs(_n250);

              var _o89 = this.repetitions - i;

              if (_o89 <= 0) this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, r = t > 0 ? e : 0, this.time = r, this._mixer.dispatchEvent({
                type: "finished",
                action: this,
                direction: t > 0 ? 1 : -1
              });else {
                if (1 === _o89) {
                  var _e239 = t < 0;

                  this._setEndings(_e239, !_e239, s);
                } else this._setEndings(!1, !1, s);

                this._loopCount = i, this.time = r, this._mixer.dispatchEvent({
                  type: "loop",
                  action: this,
                  loopDelta: _n250
                });
              }
            } else this.time = r;

            if (s && 1 == (1 & i)) return e - r;
          }

          return r;
        }
      }, {
        key: "_setEndings",
        value: function _setEndings(t, e, n) {
          var r = this._interpolantSettings;
          n ? (r.endingStart = He, r.endingEnd = He) : (r.endingStart = t ? this.zeroSlopeAtStart ? He : Ge : Ue, r.endingEnd = e ? this.zeroSlopeAtEnd ? He : Ge : Ue);
        }
      }, {
        key: "_scheduleFading",
        value: function _scheduleFading(t, e, n) {
          var r = this._mixer,
              i = r.time;
          var s = this._weightInterpolant;
          null === s && (s = r._lendControlInterpolant(), this._weightInterpolant = s);
          var o = s.parameterPositions,
              a = s.sampleValues;
          return o[0] = i, a[0] = e, o[1] = i + t, a[1] = n, this;
        }
      }]);

      return Mf;
    }();

    var Sf = /*#__PURE__*/function (_In3) {
      _inherits(Sf, _In3);

      var _super100 = _createSuper(Sf);

      function Sf(t) {
        var _this85;

        _classCallCheck(this, Sf);

        _this85 = _super100.call(this), _this85._root = t, _this85._initMemoryManager(), _this85._accuIndex = 0, _this85.time = 0, _this85.timeScale = 1;
        return _this85;
      }

      _createClass(Sf, [{
        key: "_bindAction",
        value: function _bindAction(t, e) {
          var n = t._localRoot || this._root,
              r = t._clip.tracks,
              i = r.length,
              s = t._propertyBindings,
              o = t._interpolants,
              a = n.uuid,
              l = this._bindingsByRootAndName;
          var c = l[a];
          void 0 === c && (c = {}, l[a] = c);

          for (var _h19 = 0; _h19 !== i; ++_h19) {
            var _t251 = r[_h19],
                _i175 = _t251.name;
            var _l41 = c[_i175];
            if (void 0 !== _l41) s[_h19] = _l41;else {
              if (void 0 !== (_l41 = s[_h19])) {
                null === _l41._cacheIndex && (++_l41.referenceCount, this._addInactiveBinding(_l41, a, _i175));
                continue;
              }

              var _r199 = e && e._propertyBindings[_h19].binding.parsedPath;

              ++(_l41 = new cf(bf.create(n, _i175, _r199), _t251.ValueTypeName, _t251.getValueSize())).referenceCount, this._addInactiveBinding(_l41, a, _i175), s[_h19] = _l41;
            }
            o[_h19].resultBuffer = _l41.buffer;
          }
        }
      }, {
        key: "_activateAction",
        value: function _activateAction(t) {
          if (!this._isActiveAction(t)) {
            if (null === t._cacheIndex) {
              var _e241 = (t._localRoot || this._root).uuid,
                  _n251 = t._clip.uuid,
                  _r200 = this._actionsByClip[_n251];
              this._bindAction(t, _r200 && _r200.knownActions[0]), this._addInactiveAction(t, _n251, _e241);
            }

            var _e240 = t._propertyBindings;

            for (var _t252 = 0, _n252 = _e240.length; _t252 !== _n252; ++_t252) {
              var _n253 = _e240[_t252];
              0 == _n253.useCount++ && (this._lendBinding(_n253), _n253.saveOriginalState());
            }

            this._lendAction(t);
          }
        }
      }, {
        key: "_deactivateAction",
        value: function _deactivateAction(t) {
          if (this._isActiveAction(t)) {
            var _e242 = t._propertyBindings;

            for (var _t253 = 0, _n254 = _e242.length; _t253 !== _n254; ++_t253) {
              var _n255 = _e242[_t253];
              0 == --_n255.useCount && (_n255.restoreOriginalState(), this._takeBackBinding(_n255));
            }

            this._takeBackAction(t);
          }
        }
      }, {
        key: "_initMemoryManager",
        value: function _initMemoryManager() {
          this._actions = [], this._nActiveActions = 0, this._actionsByClip = {}, this._bindings = [], this._nActiveBindings = 0, this._bindingsByRootAndName = {}, this._controlInterpolants = [], this._nActiveControlInterpolants = 0;
          var t = this;
          this.stats = {
            actions: {
              get total() {
                return t._actions.length;
              },

              get inUse() {
                return t._nActiveActions;
              }

            },
            bindings: {
              get total() {
                return t._bindings.length;
              },

              get inUse() {
                return t._nActiveBindings;
              }

            },
            controlInterpolants: {
              get total() {
                return t._controlInterpolants.length;
              },

              get inUse() {
                return t._nActiveControlInterpolants;
              }

            }
          };
        }
      }, {
        key: "_isActiveAction",
        value: function _isActiveAction(t) {
          var e = t._cacheIndex;
          return null !== e && e < this._nActiveActions;
        }
      }, {
        key: "_addInactiveAction",
        value: function _addInactiveAction(t, e, n) {
          var r = this._actions,
              i = this._actionsByClip;
          var s = i[e];
          if (void 0 === s) s = {
            knownActions: [t],
            actionByRoot: {}
          }, t._byClipCacheIndex = 0, i[e] = s;else {
            var _e243 = s.knownActions;
            t._byClipCacheIndex = _e243.length, _e243.push(t);
          }
          t._cacheIndex = r.length, r.push(t), s.actionByRoot[n] = t;
        }
      }, {
        key: "_removeInactiveAction",
        value: function _removeInactiveAction(t) {
          var e = this._actions,
              n = e[e.length - 1],
              r = t._cacheIndex;
          n._cacheIndex = r, e[r] = n, e.pop(), t._cacheIndex = null;
          var i = t._clip.uuid,
              s = this._actionsByClip,
              o = s[i],
              a = o.knownActions,
              l = a[a.length - 1],
              c = t._byClipCacheIndex;
          l._byClipCacheIndex = c, a[c] = l, a.pop(), t._byClipCacheIndex = null, delete o.actionByRoot[(t._localRoot || this._root).uuid], 0 === a.length && delete s[i], this._removeInactiveBindingsForAction(t);
        }
      }, {
        key: "_removeInactiveBindingsForAction",
        value: function _removeInactiveBindingsForAction(t) {
          var e = t._propertyBindings;

          for (var _n256 = 0, _r201 = e.length; _n256 !== _r201; ++_n256) {
            var _t254 = e[_n256];
            0 == --_t254.referenceCount && this._removeInactiveBinding(_t254);
          }
        }
      }, {
        key: "_lendAction",
        value: function _lendAction(t) {
          var e = this._actions,
              n = t._cacheIndex,
              r = this._nActiveActions++,
              i = e[r];
          t._cacheIndex = r, e[r] = t, i._cacheIndex = n, e[n] = i;
        }
      }, {
        key: "_takeBackAction",
        value: function _takeBackAction(t) {
          var e = this._actions,
              n = t._cacheIndex,
              r = --this._nActiveActions,
              i = e[r];
          t._cacheIndex = r, e[r] = t, i._cacheIndex = n, e[n] = i;
        }
      }, {
        key: "_addInactiveBinding",
        value: function _addInactiveBinding(t, e, n) {
          var r = this._bindingsByRootAndName,
              i = this._bindings;
          var s = r[e];
          void 0 === s && (s = {}, r[e] = s), s[n] = t, t._cacheIndex = i.length, i.push(t);
        }
      }, {
        key: "_removeInactiveBinding",
        value: function _removeInactiveBinding(t) {
          var e = this._bindings,
              n = t.binding,
              r = n.rootNode.uuid,
              i = n.path,
              s = this._bindingsByRootAndName,
              o = s[r],
              a = e[e.length - 1],
              l = t._cacheIndex;
          a._cacheIndex = l, e[l] = a, e.pop(), delete o[i], 0 === Object.keys(o).length && delete s[r];
        }
      }, {
        key: "_lendBinding",
        value: function _lendBinding(t) {
          var e = this._bindings,
              n = t._cacheIndex,
              r = this._nActiveBindings++,
              i = e[r];
          t._cacheIndex = r, e[r] = t, i._cacheIndex = n, e[n] = i;
        }
      }, {
        key: "_takeBackBinding",
        value: function _takeBackBinding(t) {
          var e = this._bindings,
              n = t._cacheIndex,
              r = --this._nActiveBindings,
              i = e[r];
          t._cacheIndex = r, e[r] = t, i._cacheIndex = n, e[n] = i;
        }
      }, {
        key: "_lendControlInterpolant",
        value: function _lendControlInterpolant() {
          var t = this._controlInterpolants,
              e = this._nActiveControlInterpolants++;
          var n = t[e];
          return void 0 === n && ((n = new id(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer)).__cacheIndex = e, t[e] = n), n;
        }
      }, {
        key: "_takeBackControlInterpolant",
        value: function _takeBackControlInterpolant(t) {
          var e = this._controlInterpolants,
              n = t.__cacheIndex,
              r = --this._nActiveControlInterpolants,
              i = e[r];
          t.__cacheIndex = r, e[r] = t, i.__cacheIndex = n, e[n] = i;
        }
      }, {
        key: "clipAction",
        value: function clipAction(t, e, n) {
          var r = e || this._root,
              i = r.uuid;
          var s = "string" == typeof t ? md.findByName(r, t) : t;
          var o = null !== s ? s.uuid : t,
              a = this._actionsByClip[o];
          var l = null;

          if (void 0 === n && (n = null !== s ? s.blendMode : ke), void 0 !== a) {
            var _t255 = a.actionByRoot[i];
            if (void 0 !== _t255 && _t255.blendMode === n) return _t255;
            l = a.knownActions[0], null === s && (s = l._clip);
          }

          if (null === s) return null;
          var c = new Mf(this, s, e, n);
          return this._bindAction(c, l), this._addInactiveAction(c, o, i), c;
        }
      }, {
        key: "existingAction",
        value: function existingAction(t, e) {
          var n = e || this._root,
              r = n.uuid,
              i = "string" == typeof t ? md.findByName(n, t) : t,
              s = i ? i.uuid : t,
              o = this._actionsByClip[s];
          return void 0 !== o && o.actionByRoot[r] || null;
        }
      }, {
        key: "stopAllAction",
        value: function stopAllAction() {
          var t = this._actions;

          for (var _e244 = this._nActiveActions - 1; _e244 >= 0; --_e244) {
            t[_e244].stop();
          }

          return this;
        }
      }, {
        key: "update",
        value: function update(t) {
          t *= this.timeScale;
          var e = this._actions,
              n = this._nActiveActions,
              r = this.time += t,
              i = Math.sign(t),
              s = this._accuIndex ^= 1;

          for (var _l42 = 0; _l42 !== n; ++_l42) {
            e[_l42]._update(r, t, i, s);
          }

          var o = this._bindings,
              a = this._nActiveBindings;

          for (var _l43 = 0; _l43 !== a; ++_l43) {
            o[_l43].apply(s);
          }

          return this;
        }
      }, {
        key: "setTime",
        value: function setTime(t) {
          this.time = 0;

          for (var _e245 = 0; _e245 < this._actions.length; _e245++) {
            this._actions[_e245].time = 0;
          }

          return this.update(t);
        }
      }, {
        key: "getRoot",
        value: function getRoot() {
          return this._root;
        }
      }, {
        key: "uncacheClip",
        value: function uncacheClip(t) {
          var e = this._actions,
              n = t.uuid,
              r = this._actionsByClip,
              i = r[n];

          if (void 0 !== i) {
            var _t256 = i.knownActions;

            for (var _n257 = 0, _r202 = _t256.length; _n257 !== _r202; ++_n257) {
              var _r203 = _t256[_n257];

              this._deactivateAction(_r203);

              var _i176 = _r203._cacheIndex,
                  _s105 = e[e.length - 1];
              _r203._cacheIndex = null, _r203._byClipCacheIndex = null, _s105._cacheIndex = _i176, e[_i176] = _s105, e.pop(), this._removeInactiveBindingsForAction(_r203);
            }

            delete r[n];
          }
        }
      }, {
        key: "uncacheRoot",
        value: function uncacheRoot(t) {
          var e = t.uuid,
              n = this._actionsByClip;

          for (var _i177 in n) {
            var _t257 = n[_i177].actionByRoot[e];
            void 0 !== _t257 && (this._deactivateAction(_t257), this._removeInactiveAction(_t257));
          }

          var r = this._bindingsByRootAndName[e];
          if (void 0 !== r) for (var _i178 in r) {
            var _t258 = r[_i178];
            _t258.restoreOriginalState(), this._removeInactiveBinding(_t258);
          }
        }
      }, {
        key: "uncacheAction",
        value: function uncacheAction(t, e) {
          var n = this.existingAction(t, e);
          null !== n && (this._deactivateAction(n), this._removeInactiveAction(n));
        }
      }]);

      return Sf;
    }(In);

    exports.AnimationMixer = Sf, Sf.prototype._controlInterpolantsResultBuffer = new Float32Array(1);

    var Tf = /*#__PURE__*/function () {
      function Tf(t) {
        _classCallCheck(this, Tf);

        "string" == typeof t && (console.warn("THREE.Uniform: Type parameter is no longer needed."), t = arguments[1]), this.value = t;
      }

      _createClass(Tf, [{
        key: "clone",
        value: function clone() {
          return new Tf(void 0 === this.value.clone ? this.value : this.value.clone());
        }
      }]);

      return Tf;
    }();

    function Ef(t, e, n) {
      Ch.call(this, t, e), this.meshPerAttribute = n || 1;
    }

    function Af(t, e, n, r, i) {
      this.buffer = t, this.type = e, this.itemSize = n, this.elementSize = r, this.count = i, this.version = 0;
    }

    function Lf(t, e) {
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1 / 0;
      this.ray = new Sr(t, e), this.near = n, this.far = r, this.camera = null, this.layers = new Fr(), this.params = {
        Mesh: {},
        Line: {
          threshold: 1
        },
        LOD: {},
        Points: {
          threshold: 1
        },
        Sprite: {}
      }, Object.defineProperties(this.params, {
        PointCloud: {
          get: function get() {
            return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."), this.Points;
          }
        }
      });
    }

    function Rf(t, e) {
      return t.distance - e.distance;
    }

    function Cf(t, e, n, r) {
      if (t.layers.test(e.layers) && t.raycast(e, n), !0 === r) {
        var _r204 = t.children;

        for (var _t259 = 0, _i179 = _r204.length; _t259 < _i179; _t259++) {
          Cf(_r204[_t259], e, n, !0);
        }
      }
    }

    exports.Uniform = Tf, Ef.prototype = Object.assign(Object.create(Ch.prototype), {
      constructor: Ef,
      isInstancedInterleavedBuffer: !0,
      copy: function copy(t) {
        return Ch.prototype.copy.call(this, t), this.meshPerAttribute = t.meshPerAttribute, this;
      },
      clone: function clone(t) {
        var e = Ch.prototype.clone.call(this, t);
        return e.meshPerAttribute = this.meshPerAttribute, e;
      },
      toJSON: function toJSON(t) {
        var e = Ch.prototype.toJSON.call(this, t);
        return e.isInstancedInterleavedBuffer = !0, e.meshPerAttribute = this.meshPerAttribute, e;
      }
    }), Object.defineProperty(Af.prototype, "needsUpdate", {
      set: function set(t) {
        !0 === t && this.version++;
      }
    }), Object.assign(Af.prototype, {
      isGLBufferAttribute: !0,
      setBuffer: function setBuffer(t) {
        return this.buffer = t, this;
      },
      setType: function setType(t, e) {
        return this.type = t, this.elementSize = e, this;
      },
      setItemSize: function setItemSize(t) {
        return this.itemSize = t, this;
      },
      setCount: function setCount(t) {
        return this.count = t, this;
      }
    }), Object.assign(Lf.prototype, {
      set: function set(t, e) {
        this.ray.set(t, e);
      },
      setFromCamera: function setFromCamera(t, e) {
        e && e.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(e.matrixWorld), this.ray.direction.set(t.x, t.y, .5).unproject(e).sub(this.ray.origin).normalize(), this.camera = e) : e && e.isOrthographicCamera ? (this.ray.origin.set(t.x, t.y, (e.near + e.far) / (e.near - e.far)).unproject(e), this.ray.direction.set(0, 0, -1).transformDirection(e.matrixWorld), this.camera = e) : console.error("THREE.Raycaster: Unsupported camera type: " + e.type);
      },
      intersectObject: function intersectObject(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
        return Cf(t, this, n, e), n.sort(Rf), n;
      },
      intersectObjects: function intersectObjects(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

        for (var _r205 = 0, _i180 = t.length; _r205 < _i180; _r205++) {
          Cf(t[_r205], this, n, e);
        }

        return n.sort(Rf), n;
      }
    });

    var Pf = /*#__PURE__*/function () {
      function Pf() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

        _classCallCheck(this, Pf);

        return this.radius = t, this.phi = e, this.theta = n, this;
      }

      _createClass(Pf, [{
        key: "set",
        value: function set(t, e, n) {
          return this.radius = t, this.phi = e, this.theta = n, this;
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return this.radius = t.radius, this.phi = t.phi, this.theta = t.theta, this;
        }
      }, {
        key: "makeSafe",
        value: function makeSafe() {
          return this.phi = Math.max(1e-6, Math.min(Math.PI - 1e-6, this.phi)), this;
        }
      }, {
        key: "setFromVector3",
        value: function setFromVector3(t) {
          return this.setFromCartesianCoords(t.x, t.y, t.z);
        }
      }, {
        key: "setFromCartesianCoords",
        value: function setFromCartesianCoords(t, e, n) {
          return this.radius = Math.sqrt(t * t + e * e + n * n), 0 === this.radius ? (this.theta = 0, this.phi = 0) : (this.theta = Math.atan2(t, n), this.phi = Math.acos(Fn.clamp(e / this.radius, -1, 1))), this;
        }
      }, {
        key: "clone",
        value: function clone() {
          return new this.constructor().copy(this);
        }
      }]);

      return Pf;
    }();

    exports.Spherical = Pf;

    var Df = /*#__PURE__*/function () {
      function Df() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

        _classCallCheck(this, Df);

        return this.radius = t, this.theta = e, this.y = n, this;
      }

      _createClass(Df, [{
        key: "set",
        value: function set(t, e, n) {
          return this.radius = t, this.theta = e, this.y = n, this;
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return this.radius = t.radius, this.theta = t.theta, this.y = t.y, this;
        }
      }, {
        key: "setFromVector3",
        value: function setFromVector3(t) {
          return this.setFromCartesianCoords(t.x, t.y, t.z);
        }
      }, {
        key: "setFromCartesianCoords",
        value: function setFromCartesianCoords(t, e, n) {
          return this.radius = Math.sqrt(t * t + n * n), this.theta = Math.atan2(t, n), this.y = e, this;
        }
      }, {
        key: "clone",
        value: function clone() {
          return new this.constructor().copy(this);
        }
      }]);

      return Df;
    }();

    exports.Cylindrical = Df;
    var If = new On();

    var Bf = /*#__PURE__*/function () {
      function Bf() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new On(1 / 0, 1 / 0);
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new On(-1 / 0, -1 / 0);

        _classCallCheck(this, Bf);

        this.min = t, this.max = e;
      }

      _createClass(Bf, [{
        key: "set",
        value: function set(t, e) {
          return this.min.copy(t), this.max.copy(e), this;
        }
      }, {
        key: "setFromPoints",
        value: function setFromPoints(t) {
          this.makeEmpty();

          for (var _e246 = 0, _n258 = t.length; _e246 < _n258; _e246++) {
            this.expandByPoint(t[_e246]);
          }

          return this;
        }
      }, {
        key: "setFromCenterAndSize",
        value: function setFromCenterAndSize(t, e) {
          var n = If.copy(e).multiplyScalar(.5);
          return this.min.copy(t).sub(n), this.max.copy(t).add(n), this;
        }
      }, {
        key: "clone",
        value: function clone() {
          return new this.constructor().copy(this);
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return this.min.copy(t.min), this.max.copy(t.max), this;
        }
      }, {
        key: "makeEmpty",
        value: function makeEmpty() {
          return this.min.x = this.min.y = 1 / 0, this.max.x = this.max.y = -1 / 0, this;
        }
      }, {
        key: "isEmpty",
        value: function isEmpty() {
          return this.max.x < this.min.x || this.max.y < this.min.y;
        }
      }, {
        key: "getCenter",
        value: function getCenter(t) {
          return void 0 === t && (console.warn("THREE.Box2: .getCenter() target is now required"), t = new On()), this.isEmpty() ? t.set(0, 0) : t.addVectors(this.min, this.max).multiplyScalar(.5);
        }
      }, {
        key: "getSize",
        value: function getSize(t) {
          return void 0 === t && (console.warn("THREE.Box2: .getSize() target is now required"), t = new On()), this.isEmpty() ? t.set(0, 0) : t.subVectors(this.max, this.min);
        }
      }, {
        key: "expandByPoint",
        value: function expandByPoint(t) {
          return this.min.min(t), this.max.max(t), this;
        }
      }, {
        key: "expandByVector",
        value: function expandByVector(t) {
          return this.min.sub(t), this.max.add(t), this;
        }
      }, {
        key: "expandByScalar",
        value: function expandByScalar(t) {
          return this.min.addScalar(-t), this.max.addScalar(t), this;
        }
      }, {
        key: "containsPoint",
        value: function containsPoint(t) {
          return !(t.x < this.min.x || t.x > this.max.x || t.y < this.min.y || t.y > this.max.y);
        }
      }, {
        key: "containsBox",
        value: function containsBox(t) {
          return this.min.x <= t.min.x && t.max.x <= this.max.x && this.min.y <= t.min.y && t.max.y <= this.max.y;
        }
      }, {
        key: "getParameter",
        value: function getParameter(t, e) {
          return void 0 === e && (console.warn("THREE.Box2: .getParameter() target is now required"), e = new On()), e.set((t.x - this.min.x) / (this.max.x - this.min.x), (t.y - this.min.y) / (this.max.y - this.min.y));
        }
      }, {
        key: "intersectsBox",
        value: function intersectsBox(t) {
          return !(t.max.x < this.min.x || t.min.x > this.max.x || t.max.y < this.min.y || t.min.y > this.max.y);
        }
      }, {
        key: "clampPoint",
        value: function clampPoint(t, e) {
          return void 0 === e && (console.warn("THREE.Box2: .clampPoint() target is now required"), e = new On()), e.copy(t).clamp(this.min, this.max);
        }
      }, {
        key: "distanceToPoint",
        value: function distanceToPoint(t) {
          return If.copy(t).clamp(this.min, this.max).sub(t).length();
        }
      }, {
        key: "intersect",
        value: function intersect(t) {
          return this.min.max(t.min), this.max.min(t.max), this;
        }
      }, {
        key: "union",
        value: function union(t) {
          return this.min.min(t.min), this.max.max(t.max), this;
        }
      }, {
        key: "translate",
        value: function translate(t) {
          return this.min.add(t), this.max.add(t), this;
        }
      }, {
        key: "equals",
        value: function equals(t) {
          return t.min.equals(this.min) && t.max.equals(this.max);
        }
      }]);

      return Bf;
    }();

    exports.Box2 = Bf, Bf.prototype.isBox2 = !0;
    var Nf = new Yn(),
        Ff = new Yn();

    var Of = /*#__PURE__*/function () {
      function Of() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Yn();
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Yn();

        _classCallCheck(this, Of);

        this.start = t, this.end = e;
      }

      _createClass(Of, [{
        key: "set",
        value: function set(t, e) {
          return this.start.copy(t), this.end.copy(e), this;
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return this.start.copy(t.start), this.end.copy(t.end), this;
        }
      }, {
        key: "getCenter",
        value: function getCenter(t) {
          return void 0 === t && (console.warn("THREE.Line3: .getCenter() target is now required"), t = new Yn()), t.addVectors(this.start, this.end).multiplyScalar(.5);
        }
      }, {
        key: "delta",
        value: function delta(t) {
          return void 0 === t && (console.warn("THREE.Line3: .delta() target is now required"), t = new Yn()), t.subVectors(this.end, this.start);
        }
      }, {
        key: "distanceSq",
        value: function distanceSq() {
          return this.start.distanceToSquared(this.end);
        }
      }, {
        key: "distance",
        value: function distance() {
          return this.start.distanceTo(this.end);
        }
      }, {
        key: "at",
        value: function at(t, e) {
          return void 0 === e && (console.warn("THREE.Line3: .at() target is now required"), e = new Yn()), this.delta(e).multiplyScalar(t).add(this.start);
        }
      }, {
        key: "closestPointToPointParameter",
        value: function closestPointToPointParameter(t, e) {
          Nf.subVectors(t, this.start), Ff.subVectors(this.end, this.start);
          var n = Ff.dot(Ff);
          var r = Ff.dot(Nf) / n;
          return e && (r = Fn.clamp(r, 0, 1)), r;
        }
      }, {
        key: "closestPointToPoint",
        value: function closestPointToPoint(t, e, n) {
          var r = this.closestPointToPointParameter(t, e);
          return void 0 === n && (console.warn("THREE.Line3: .closestPointToPoint() target is now required"), n = new Yn()), this.delta(n).multiplyScalar(r).add(this.start);
        }
      }, {
        key: "applyMatrix4",
        value: function applyMatrix4(t) {
          return this.start.applyMatrix4(t), this.end.applyMatrix4(t), this;
        }
      }, {
        key: "equals",
        value: function equals(t) {
          return t.start.equals(this.start) && t.end.equals(this.end);
        }
      }, {
        key: "clone",
        value: function clone() {
          return new this.constructor().copy(this);
        }
      }]);

      return Of;
    }();

    function zf(t) {
      Jr.call(this), this.material = t, this.render = function () {}, this.hasPositions = !1, this.hasNormals = !1, this.hasColors = !1, this.hasUvs = !1, this.positionArray = null, this.normalArray = null, this.colorArray = null, this.uvArray = null, this.count = 0;
    }

    exports.Line3 = Of, zf.prototype = Object.create(Jr.prototype), zf.prototype.constructor = zf, zf.prototype.isImmediateRenderObject = !0;
    var Gf = new Yn();

    var Hf = /*#__PURE__*/function (_Jr9) {
      _inherits(Hf, _Jr9);

      var _super101 = _createSuper(Hf);

      function Hf(t, e) {
        var _this86;

        _classCallCheck(this, Hf);

        _this86 = _super101.call(this), _this86.light = t, _this86.light.updateMatrixWorld(), _this86.matrix = t.matrixWorld, _this86.matrixAutoUpdate = !1, _this86.color = e;
        var n = new ji(),
            r = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];

        for (var _s106 = 0, _o90 = 1, _a54 = 32; _s106 < _a54; _s106++, _o90++) {
          var _t260 = _s106 / _a54 * Math.PI * 2,
              _e247 = _o90 / _a54 * Math.PI * 2;

          r.push(Math.cos(_t260), Math.sin(_t260), 1, Math.cos(_e247), Math.sin(_e247), 1);
        }

        n.setAttribute("position", new Ii(r, 3));
        var i = new du({
          fog: !1,
          toneMapped: !1
        });
        _this86.cone = new wu(n, i), _this86.add(_this86.cone), _this86.update();
        return _this86;
      }

      _createClass(Hf, [{
        key: "dispose",
        value: function dispose() {
          this.cone.geometry.dispose(), this.cone.material.dispose();
        }
      }, {
        key: "update",
        value: function update() {
          this.light.updateMatrixWorld();
          var t = this.light.distance ? this.light.distance : 1e3,
              e = t * Math.tan(this.light.angle);
          this.cone.scale.set(e, e, t), Gf.setFromMatrixPosition(this.light.target.matrixWorld), this.cone.lookAt(Gf), void 0 !== this.color ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color);
        }
      }]);

      return Hf;
    }(Jr);

    exports.SpotLightHelper = Hf;
    var Uf = new Yn(),
        kf = new Tr(),
        Vf = new Tr();

    var Wf = /*#__PURE__*/function (_wu) {
      _inherits(Wf, _wu);

      var _super102 = _createSuper(Wf);

      function Wf(t) {
        var _this87;

        _classCallCheck(this, Wf);

        var e = jf(t),
            n = new ji(),
            r = [],
            i = [],
            s = new _i(0, 0, 1),
            o = new _i(0, 1, 0);

        for (var _a55 = 0; _a55 < e.length; _a55++) {
          var _t261 = e[_a55];
          _t261.parent && _t261.parent.isBone && (r.push(0, 0, 0), r.push(0, 0, 0), i.push(s.r, s.g, s.b), i.push(o.r, o.g, o.b));
        }

        n.setAttribute("position", new Ii(r, 3)), n.setAttribute("color", new Ii(i, 3)), _this87 = _super102.call(this, n, new du({
          vertexColors: !0,
          depthTest: !1,
          depthWrite: !1,
          toneMapped: !1,
          transparent: !0
        })), _this87.type = "SkeletonHelper", _this87.isSkeletonHelper = !0, _this87.root = t, _this87.bones = e, _this87.matrix = t.matrixWorld, _this87.matrixAutoUpdate = !1;
        return _this87;
      }

      _createClass(Wf, [{
        key: "updateMatrixWorld",
        value: function updateMatrixWorld(t) {
          var e = this.bones,
              n = this.geometry,
              r = n.getAttribute("position");
          Vf.copy(this.root.matrixWorld).invert();

          for (var _i181 = 0, _s107 = 0; _i181 < e.length; _i181++) {
            var _t262 = e[_i181];
            _t262.parent && _t262.parent.isBone && (kf.multiplyMatrices(Vf, _t262.matrixWorld), Uf.setFromMatrixPosition(kf), r.setXYZ(_s107, Uf.x, Uf.y, Uf.z), kf.multiplyMatrices(Vf, _t262.parent.matrixWorld), Uf.setFromMatrixPosition(kf), r.setXYZ(_s107 + 1, Uf.x, Uf.y, Uf.z), _s107 += 2);
          }

          n.getAttribute("position").needsUpdate = !0, _get(_getPrototypeOf(Wf.prototype), "updateMatrixWorld", this).call(this, t);
        }
      }]);

      return Wf;
    }(wu);

    function jf(t) {
      var e = [];
      t && t.isBone && e.push(t);

      for (var _n259 = 0; _n259 < t.children.length; _n259++) {
        e.push.apply(e, jf(t.children[_n259]));
      }

      return e;
    }

    exports.SkeletonHelper = Wf;

    var qf = /*#__PURE__*/function (_cs) {
      _inherits(qf, _cs);

      var _super103 = _createSuper(qf);

      function qf(t, e, n) {
        var _this88;

        _classCallCheck(this, qf);

        _this88 = _super103.call(this, new Fp(e, 4, 2), new bi({
          wireframe: !0,
          fog: !1,
          toneMapped: !1
        })), _this88.light = t, _this88.light.updateMatrixWorld(), _this88.color = n, _this88.type = "PointLightHelper", _this88.matrix = _this88.light.matrixWorld, _this88.matrixAutoUpdate = !1, _this88.update();
        return _this88;
      }

      _createClass(qf, [{
        key: "dispose",
        value: function dispose() {
          this.geometry.dispose(), this.material.dispose();
        }
      }, {
        key: "update",
        value: function update() {
          void 0 !== this.color ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
        }
      }]);

      return qf;
    }(cs);

    exports.PointLightHelper = qf;
    var Xf = new Yn(),
        Yf = new _i(),
        Zf = new _i();

    var Jf = /*#__PURE__*/function (_Jr10) {
      _inherits(Jf, _Jr10);

      var _super104 = _createSuper(Jf);

      function Jf(t, e, n) {
        var _this89;

        _classCallCheck(this, Jf);

        _this89 = _super104.call(this), _this89.light = t, _this89.light.updateMatrixWorld(), _this89.matrix = t.matrixWorld, _this89.matrixAutoUpdate = !1, _this89.color = n;
        var r = new Pp(e);
        r.rotateY(.5 * Math.PI), _this89.material = new bi({
          wireframe: !0,
          fog: !1,
          toneMapped: !1
        }), void 0 === _this89.color && (_this89.material.vertexColors = !0);
        var i = r.getAttribute("position"),
            s = new Float32Array(3 * i.count);
        r.setAttribute("color", new Si(s, 3)), _this89.add(new cs(r, _this89.material)), _this89.update();
        return _this89;
      }

      _createClass(Jf, [{
        key: "dispose",
        value: function dispose() {
          this.children[0].geometry.dispose(), this.children[0].material.dispose();
        }
      }, {
        key: "update",
        value: function update() {
          var t = this.children[0];
          if (void 0 !== this.color) this.material.color.set(this.color);else {
            var _e248 = t.geometry.getAttribute("color");

            Yf.copy(this.light.color), Zf.copy(this.light.groundColor);

            for (var _t263 = 0, _n260 = _e248.count; _t263 < _n260; _t263++) {
              var _r206 = _t263 < _n260 / 2 ? Yf : Zf;

              _e248.setXYZ(_t263, _r206.r, _r206.g, _r206.b);
            }

            _e248.needsUpdate = !0;
          }
          t.lookAt(Xf.setFromMatrixPosition(this.light.matrixWorld).negate());
        }
      }]);

      return Jf;
    }(Jr);

    exports.HemisphereLightHelper = Jf;

    var Qf = /*#__PURE__*/function (_wu2) {
      _inherits(Qf, _wu2);

      var _super105 = _createSuper(Qf);

      function Qf() {
        var _this90;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4473924;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8947848;

        _classCallCheck(this, Qf);

        n = new _i(n), r = new _i(r);
        var i = e / 2,
            s = t / e,
            o = t / 2,
            a = [],
            l = [];

        for (var _h20 = 0, _u20 = 0, _p23 = -o; _h20 <= e; _h20++, _p23 += s) {
          a.push(-o, 0, _p23, o, 0, _p23), a.push(_p23, 0, -o, _p23, 0, o);

          var _t264 = _h20 === i ? n : r;

          _t264.toArray(l, _u20), _u20 += 3, _t264.toArray(l, _u20), _u20 += 3, _t264.toArray(l, _u20), _u20 += 3, _t264.toArray(l, _u20), _u20 += 3;
        }

        var c = new ji();
        c.setAttribute("position", new Ii(a, 3)), c.setAttribute("color", new Ii(l, 3)), _this90 = _super105.call(this, c, new du({
          vertexColors: !0,
          toneMapped: !1
        })), _this90.type = "GridHelper";
        return _this90;
      }

      return Qf;
    }(wu);

    exports.GridHelper = Qf;

    var Kf = /*#__PURE__*/function (_wu3) {
      _inherits(Kf, _wu3);

      var _super106 = _createSuper(Kf);

      function Kf() {
        var _this91;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 64;
        var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 4473924;
        var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 8947848;

        _classCallCheck(this, Kf);

        i = new _i(i), s = new _i(s);
        var o = [],
            a = [];

        for (var _c29 = 0; _c29 <= e; _c29++) {
          var _n261 = _c29 / e * (2 * Math.PI),
              _r207 = Math.sin(_n261) * t,
              _l44 = Math.cos(_n261) * t;

          o.push(0, 0, 0), o.push(_r207, 0, _l44);

          var _h21 = 1 & _c29 ? i : s;

          a.push(_h21.r, _h21.g, _h21.b), a.push(_h21.r, _h21.g, _h21.b);
        }

        for (var _c30 = 0; _c30 <= n; _c30++) {
          var _e249 = 1 & _c30 ? i : s,
              _l45 = t - t / n * _c30;

          for (var _t265 = 0; _t265 < r; _t265++) {
            var _n262 = _t265 / r * (2 * Math.PI),
                _i182 = Math.sin(_n262) * _l45,
                _s108 = Math.cos(_n262) * _l45;

            o.push(_i182, 0, _s108), a.push(_e249.r, _e249.g, _e249.b), _n262 = (_t265 + 1) / r * (2 * Math.PI), _i182 = Math.sin(_n262) * _l45, _s108 = Math.cos(_n262) * _l45, o.push(_i182, 0, _s108), a.push(_e249.r, _e249.g, _e249.b);
          }
        }

        var l = new ji();
        l.setAttribute("position", new Ii(o, 3)), l.setAttribute("color", new Ii(a, 3)), _this91 = _super106.call(this, l, new du({
          vertexColors: !0,
          toneMapped: !1
        })), _this91.type = "PolarGridHelper";
        return _this91;
      }

      return Kf;
    }(wu);

    exports.PolarGridHelper = Kf;
    var $f = new Yn(),
        tg = new Yn(),
        eg = new Yn();

    var ng = /*#__PURE__*/function (_Jr11) {
      _inherits(ng, _Jr11);

      var _super107 = _createSuper(ng);

      function ng(t, e, n) {
        var _this92;

        _classCallCheck(this, ng);

        _this92 = _super107.call(this), _this92.light = t, _this92.light.updateMatrixWorld(), _this92.matrix = t.matrixWorld, _this92.matrixAutoUpdate = !1, _this92.color = n, void 0 === e && (e = 1);
        var r = new ji();
        r.setAttribute("position", new Ii([-e, e, 0, e, e, 0, e, -e, 0, -e, -e, 0, -e, e, 0], 3));
        var i = new du({
          fog: !1,
          toneMapped: !1
        });
        _this92.lightPlane = new yu(r, i), _this92.add(_this92.lightPlane), (r = new ji()).setAttribute("position", new Ii([0, 0, 0, 0, 0, 1], 3)), _this92.targetLine = new yu(r, i), _this92.add(_this92.targetLine), _this92.update();
        return _this92;
      }

      _createClass(ng, [{
        key: "dispose",
        value: function dispose() {
          this.lightPlane.geometry.dispose(), this.lightPlane.material.dispose(), this.targetLine.geometry.dispose(), this.targetLine.material.dispose();
        }
      }, {
        key: "update",
        value: function update() {
          $f.setFromMatrixPosition(this.light.matrixWorld), tg.setFromMatrixPosition(this.light.target.matrixWorld), eg.subVectors(tg, $f), this.lightPlane.lookAt(tg), void 0 !== this.color ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color)), this.targetLine.lookAt(tg), this.targetLine.scale.z = eg.length();
        }
      }]);

      return ng;
    }(Jr);

    exports.DirectionalLightHelper = ng;
    var rg = new Yn(),
        ig = new ys();

    var sg = /*#__PURE__*/function (_wu4) {
      _inherits(sg, _wu4);

      var _super108 = _createSuper(sg);

      function sg(t) {
        var _this93;

        _classCallCheck(this, sg);

        var e = new ji(),
            n = new du({
          color: 16777215,
          vertexColors: !0,
          toneMapped: !1
        }),
            r = [],
            i = [],
            s = {},
            o = new _i(16755200),
            a = new _i(16711680),
            l = new _i(43775),
            c = new _i(16777215),
            h = new _i(3355443);

        function u(t, e, n) {
          p(t, n), p(e, n);
        }

        function p(t, e) {
          r.push(0, 0, 0), i.push(e.r, e.g, e.b), void 0 === s[t] && (s[t] = []), s[t].push(r.length / 3 - 1);
        }

        u("n1", "n2", o), u("n2", "n4", o), u("n4", "n3", o), u("n3", "n1", o), u("f1", "f2", o), u("f2", "f4", o), u("f4", "f3", o), u("f3", "f1", o), u("n1", "f1", o), u("n2", "f2", o), u("n3", "f3", o), u("n4", "f4", o), u("p", "n1", a), u("p", "n2", a), u("p", "n3", a), u("p", "n4", a), u("u1", "u2", l), u("u2", "u3", l), u("u3", "u1", l), u("c", "t", c), u("p", "c", h), u("cn1", "cn2", h), u("cn3", "cn4", h), u("cf1", "cf2", h), u("cf3", "cf4", h), e.setAttribute("position", new Ii(r, 3)), e.setAttribute("color", new Ii(i, 3)), _this93 = _super108.call(this, e, n), _this93.type = "CameraHelper", _this93.camera = t, _this93.camera.updateProjectionMatrix && _this93.camera.updateProjectionMatrix(), _this93.matrix = t.matrixWorld, _this93.matrixAutoUpdate = !1, _this93.pointMap = s, _this93.update();
        return _this93;
      }

      _createClass(sg, [{
        key: "update",
        value: function update() {
          var t = this.geometry,
              e = this.pointMap;
          ig.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse), og("c", e, t, ig, 0, 0, -1), og("t", e, t, ig, 0, 0, 1), og("n1", e, t, ig, -1, -1, -1), og("n2", e, t, ig, 1, -1, -1), og("n3", e, t, ig, -1, 1, -1), og("n4", e, t, ig, 1, 1, -1), og("f1", e, t, ig, -1, -1, 1), og("f2", e, t, ig, 1, -1, 1), og("f3", e, t, ig, -1, 1, 1), og("f4", e, t, ig, 1, 1, 1), og("u1", e, t, ig, .7, 1.1, -1), og("u2", e, t, ig, -.7, 1.1, -1), og("u3", e, t, ig, 0, 2, -1), og("cf1", e, t, ig, -1, 0, 1), og("cf2", e, t, ig, 1, 0, 1), og("cf3", e, t, ig, 0, -1, 1), og("cf4", e, t, ig, 0, 1, 1), og("cn1", e, t, ig, -1, 0, -1), og("cn2", e, t, ig, 1, 0, -1), og("cn3", e, t, ig, 0, -1, -1), og("cn4", e, t, ig, 0, 1, -1), t.getAttribute("position").needsUpdate = !0;
        }
      }]);

      return sg;
    }(wu);

    function og(t, e, n, r, i, s, o) {
      rg.set(i, s, o).unproject(r);
      var a = e[t];

      if (void 0 !== a) {
        var _t266 = n.getAttribute("position");

        for (var _e250 = 0, _n263 = a.length; _e250 < _n263; _e250++) {
          _t266.setXYZ(a[_e250], rg.x, rg.y, rg.z);
        }
      }
    }

    exports.CameraHelper = sg;
    var ag = new Qn();

    var lg = /*#__PURE__*/function (_wu5) {
      _inherits(lg, _wu5);

      var _super109 = _createSuper(lg);

      function lg(t) {
        var _this94;

        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16776960;

        _classCallCheck(this, lg);

        var n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]),
            r = new Float32Array(24),
            i = new ji();
        i.setIndex(new Si(n, 1)), i.setAttribute("position", new Si(r, 3)), _this94 = _super109.call(this, i, new du({
          color: e,
          toneMapped: !1
        })), _this94.object = t, _this94.type = "BoxHelper", _this94.matrixAutoUpdate = !1, _this94.update();
        return _this94;
      }

      _createClass(lg, [{
        key: "update",
        value: function update(t) {
          if (void 0 !== t && console.warn("THREE.BoxHelper: .update() has no longer arguments."), void 0 !== this.object && ag.setFromObject(this.object), ag.isEmpty()) return;
          var e = ag.min,
              n = ag.max,
              r = this.geometry.attributes.position,
              i = r.array;
          i[0] = n.x, i[1] = n.y, i[2] = n.z, i[3] = e.x, i[4] = n.y, i[5] = n.z, i[6] = e.x, i[7] = e.y, i[8] = n.z, i[9] = n.x, i[10] = e.y, i[11] = n.z, i[12] = n.x, i[13] = n.y, i[14] = e.z, i[15] = e.x, i[16] = n.y, i[17] = e.z, i[18] = e.x, i[19] = e.y, i[20] = e.z, i[21] = n.x, i[22] = e.y, i[23] = e.z, r.needsUpdate = !0, this.geometry.computeBoundingSphere();
        }
      }, {
        key: "setFromObject",
        value: function setFromObject(t) {
          return this.object = t, this.update(), this;
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return wu.prototype.copy.call(this, t), this.object = t.object, this;
        }
      }]);

      return lg;
    }(wu);

    exports.BoxHelper = lg;

    var cg = /*#__PURE__*/function (_wu6) {
      _inherits(cg, _wu6);

      var _super110 = _createSuper(cg);

      function cg(t) {
        var _this95;

        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16776960;

        _classCallCheck(this, cg);

        var n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]),
            r = new ji();
        r.setIndex(new Si(n, 1)), r.setAttribute("position", new Ii([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1], 3)), _this95 = _super110.call(this, r, new du({
          color: e,
          toneMapped: !1
        })), _this95.box = t, _this95.type = "Box3Helper", _this95.geometry.computeBoundingSphere();
        return _this95;
      }

      _createClass(cg, [{
        key: "updateMatrixWorld",
        value: function updateMatrixWorld(t) {
          var e = this.box;
          e.isEmpty() || (e.getCenter(this.position), e.getSize(this.scale), this.scale.multiplyScalar(.5), _get(_getPrototypeOf(cg.prototype), "updateMatrixWorld", this).call(this, t));
        }
      }]);

      return cg;
    }(wu);

    exports.Box3Helper = cg;

    var hg = /*#__PURE__*/function (_yu2) {
      _inherits(hg, _yu2);

      var _super111 = _createSuper(hg);

      function hg(t) {
        var _this96;

        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 16776960;

        _classCallCheck(this, hg);

        var r = n,
            i = new ji();
        i.setAttribute("position", new Ii([1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0], 3)), i.computeBoundingSphere(), _this96 = _super111.call(this, i, new du({
          color: r,
          toneMapped: !1
        })), _this96.type = "PlaneHelper", _this96.plane = t, _this96.size = e;
        var s = new ji();
        s.setAttribute("position", new Ii([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1], 3)), s.computeBoundingSphere(), _this96.add(new cs(s, new bi({
          color: r,
          opacity: .2,
          transparent: !0,
          depthWrite: !1,
          toneMapped: !1
        })));
        return _this96;
      }

      _createClass(hg, [{
        key: "updateMatrixWorld",
        value: function updateMatrixWorld(t) {
          var e = -this.plane.constant;
          Math.abs(e) < 1e-8 && (e = 1e-8), this.scale.set(.5 * this.size, .5 * this.size, e), this.children[0].material.side = e < 0 ? p : u, this.lookAt(this.plane.normal), _get(_getPrototypeOf(hg.prototype), "updateMatrixWorld", this).call(this, t);
        }
      }]);

      return hg;
    }(yu);

    exports.PlaneHelper = hg;
    var ug = new Yn();
    var pg, dg;

    var mg = /*#__PURE__*/function (_Jr12) {
      _inherits(mg, _Jr12);

      var _super112 = _createSuper(mg);

      function mg() {
        var _this97;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Yn(0, 0, 1);
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Yn(0, 0, 0);
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 16776960;
        var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : .2 * n;
        var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : .2 * i;

        _classCallCheck(this, mg);

        _this97 = _super112.call(this), _this97.type = "ArrowHelper", void 0 === pg && ((pg = new ji()).setAttribute("position", new Ii([0, 0, 0, 0, 1, 0], 3)), (dg = new Fu(0, .5, 1, 5, 1)).translate(0, -.5, 0)), _this97.position.copy(e), _this97.line = new yu(pg, new du({
          color: r,
          toneMapped: !1
        })), _this97.line.matrixAutoUpdate = !1, _this97.add(_this97.line), _this97.cone = new cs(dg, new bi({
          color: r,
          toneMapped: !1
        })), _this97.cone.matrixAutoUpdate = !1, _this97.add(_this97.cone), _this97.setDirection(t), _this97.setLength(n, i, s);
        return _this97;
      }

      _createClass(mg, [{
        key: "setDirection",
        value: function setDirection(t) {
          if (t.y > .99999) this.quaternion.set(0, 0, 0, 1);else if (t.y < -.99999) this.quaternion.set(1, 0, 0, 0);else {
            ug.set(t.z, 0, -t.x).normalize();

            var _e251 = Math.acos(t.y);

            this.quaternion.setFromAxisAngle(ug, _e251);
          }
        }
      }, {
        key: "setLength",
        value: function setLength(t) {
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : .2 * t;
          var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : .2 * e;
          this.line.scale.set(1, Math.max(1e-4, t - e), 1), this.line.updateMatrix(), this.cone.scale.set(n, e, n), this.cone.position.y = t, this.cone.updateMatrix();
        }
      }, {
        key: "setColor",
        value: function setColor(t) {
          this.line.material.color.set(t), this.cone.material.color.set(t);
        }
      }, {
        key: "copy",
        value: function copy(t) {
          return _get(_getPrototypeOf(mg.prototype), "copy", this).call(this, t, !1), this.line.copy(t.line), this.cone.copy(t.cone), this;
        }
      }]);

      return mg;
    }(Jr);

    exports.ArrowHelper = mg;

    var fg = /*#__PURE__*/function (_wu7) {
      _inherits(fg, _wu7);

      var _super113 = _createSuper(fg);

      function fg() {
        var _this98;

        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

        _classCallCheck(this, fg);

        var e = [0, 0, 0, t, 0, 0, 0, 0, 0, 0, t, 0, 0, 0, 0, 0, 0, t],
            n = new ji();
        n.setAttribute("position", new Ii(e, 3)), n.setAttribute("color", new Ii([1, 0, 0, 1, .6, 0, 0, 1, 0, .6, 1, 0, 0, 0, 1, 0, .6, 1], 3)), _this98 = _super113.call(this, n, new du({
          vertexColors: !0,
          toneMapped: !1
        })), _this98.type = "AxesHelper";
        return _this98;
      }

      return fg;
    }(wu);

    exports.AxesHelper = fg;
    var gg = new Float32Array(1),
        xg = new Int32Array(gg.buffer),
        vg = {
      toHalfFloat: function toHalfFloat(t) {
        gg[0] = t;
        var e = xg[0];
        var n = e >> 16 & 32768,
            r = e >> 12 & 2047;
        var i = e >> 23 & 255;
        return i < 103 ? n : i > 142 ? (n |= 31744, n |= (255 == i ? 0 : 1) && 8388607 & e) : i < 113 ? n |= ((r |= 2048) >> 114 - i) + (r >> 113 - i & 1) : (n |= i - 112 << 10 | r >> 1, n += 1 & r);
      }
    };
    exports.DataUtils = vg;

    var yg = 4,
        _g = 8,
        bg = Math.pow(2, _g),
        wg = [.125, .215, .35, .446, .526, .582],
        Mg = _g - yg + 1 + wg.length,
        Sg = 20,
        Tg = (_Tg = {}, _defineProperty(_Tg, Xe, 0), _defineProperty(_Tg, Ye, 1), _defineProperty(_Tg, Je, 2), _defineProperty(_Tg, Ke, 3), _defineProperty(_Tg, $e, 4), _defineProperty(_Tg, tn, 5), _defineProperty(_Tg, Ze, 6), _Tg),
        Eg = new bi({
      side: p,
      depthWrite: !1,
      depthTest: !1
    }),
        Ag = new cs(new ps(), Eg),
        Lg = new vm(),
        _Hg = Hg(),
        Rg = _Hg._lodPlanes,
        Cg = _Hg._sizeLods,
        Pg = _Hg._sigmas,
        Dg = new _i();

    var Ig = null;
    var Bg = (1 + Math.sqrt(5)) / 2,
        Ng = 1 / Bg,
        Fg = [new Yn(1, 1, 1), new Yn(-1, 1, 1), new Yn(1, 1, -1), new Yn(-1, 1, -1), new Yn(0, Bg, Ng), new Yn(0, Bg, -Ng), new Yn(Ng, 0, Bg), new Yn(-Ng, 0, Bg), new Yn(Bg, Ng, 0), new Yn(-Bg, Ng, 0)];

    function Og(t) {
      var e = Math.max(t.r, t.g, t.b),
          n = Math.min(Math.max(Math.ceil(Math.log2(e)), -128), 127);
      return t.multiplyScalar(Math.pow(2, -n)), (n + 128) / 255;
    }

    var zg = /*#__PURE__*/function () {
      function zg(t) {
        _classCallCheck(this, zg);

        this._renderer = t, this._pingPongRenderTarget = null, this._blurMaterial = Vg(Sg), this._equirectShader = null, this._cubemapShader = null, this._compileMaterial(this._blurMaterial);
      }

      _createClass(zg, [{
        key: "fromScene",
        value: function fromScene(t) {
          var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : .1;
          var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 100;
          Ig = this._renderer.getRenderTarget();

          var i = this._allocateTargets();

          return this._sceneToCubeUV(t, n, r, i), e > 0 && this._blur(i, 0, 0, e), this._applyPMREM(i), this._cleanup(i), i;
        }
      }, {
        key: "fromEquirectangular",
        value: function fromEquirectangular(t) {
          return this._fromTexture(t);
        }
      }, {
        key: "fromCubemap",
        value: function fromCubemap(t) {
          return this._fromTexture(t);
        }
      }, {
        key: "compileCubemapShader",
        value: function compileCubemapShader() {
          null === this._cubemapShader && (this._cubemapShader = jg(), this._compileMaterial(this._cubemapShader));
        }
      }, {
        key: "compileEquirectangularShader",
        value: function compileEquirectangularShader() {
          null === this._equirectShader && (this._equirectShader = Wg(), this._compileMaterial(this._equirectShader));
        }
      }, {
        key: "dispose",
        value: function dispose() {
          this._blurMaterial.dispose(), null !== this._cubemapShader && this._cubemapShader.dispose(), null !== this._equirectShader && this._equirectShader.dispose();

          for (var _t267 = 0; _t267 < Rg.length; _t267++) {
            Rg[_t267].dispose();
          }
        }
      }, {
        key: "_cleanup",
        value: function _cleanup(t) {
          this._pingPongRenderTarget.dispose(), this._renderer.setRenderTarget(Ig), t.scissorTest = !1, kg(t, 0, 0, t.width, t.height);
        }
      }, {
        key: "_fromTexture",
        value: function _fromTexture(t) {
          Ig = this._renderer.getRenderTarget();

          var e = this._allocateTargets(t);

          return this._textureToCubeUV(t, e), this._applyPMREM(e), this._cleanup(e), e;
        }
      }, {
        key: "_allocateTargets",
        value: function _allocateTargets(t) {
          var e = {
            magFilter: ut,
            minFilter: ut,
            generateMipmaps: !1,
            type: bt,
            format: zt,
            encoding: Gg(t) ? t.encoding : Je,
            depthBuffer: !1
          },
              n = Ug(e);
          return n.depthBuffer = !t, this._pingPongRenderTarget = Ug(e), n;
        }
      }, {
        key: "_compileMaterial",
        value: function _compileMaterial(t) {
          var e = new cs(Rg[0], t);

          this._renderer.compile(e, Lg);
        }
      }, {
        key: "_sceneToCubeUV",
        value: function _sceneToCubeUV(t, e, n, r) {
          var i = new _s(90, 1, e, n),
              s = [1, -1, 1, 1, 1, 1],
              o = [1, 1, 1, -1, -1, -1],
              a = this._renderer,
              l = a.autoClear,
              c = a.outputEncoding,
              h = a.toneMapping;
          a.getClearColor(Dg), a.toneMapping = Z, a.outputEncoding = Xe, a.autoClear = !1;
          var u = !1;
          var p = t.background;

          if (p) {
            if (p.isColor) {
              Eg.color.copy(p).convertSRGBToLinear(), t.background = null;

              var _e252 = Og(Eg.color);

              Eg.opacity = _e252, u = !0;
            }
          } else {
            Eg.color.copy(Dg).convertSRGBToLinear();

            var _t268 = Og(Eg.color);

            Eg.opacity = _t268, u = !0;
          }

          for (var _d24 = 0; _d24 < 6; _d24++) {
            var _e253 = _d24 % 3;

            0 == _e253 ? (i.up.set(0, s[_d24], 0), i.lookAt(o[_d24], 0, 0)) : 1 == _e253 ? (i.up.set(0, 0, s[_d24]), i.lookAt(0, o[_d24], 0)) : (i.up.set(0, s[_d24], 0), i.lookAt(0, 0, o[_d24])), kg(r, _e253 * bg, _d24 > 2 ? bg : 0, bg, bg), a.setRenderTarget(r), u && a.render(Ag, i), a.render(t, i);
          }

          a.toneMapping = h, a.outputEncoding = c, a.autoClear = l;
        }
      }, {
        key: "_textureToCubeUV",
        value: function _textureToCubeUV(t, e) {
          var n = this._renderer;
          t.isCubeTexture ? null == this._cubemapShader && (this._cubemapShader = jg()) : null == this._equirectShader && (this._equirectShader = Wg());
          var r = t.isCubeTexture ? this._cubemapShader : this._equirectShader,
              i = new cs(Rg[0], r),
              s = r.uniforms;
          s.envMap.value = t, t.isCubeTexture || s.texelSize.value.set(1 / t.image.width, 1 / t.image.height), s.inputEncoding.value = Tg[t.encoding], s.outputEncoding.value = Tg[e.texture.encoding], kg(e, 0, 0, 3 * bg, 2 * bg), n.setRenderTarget(e), n.render(i, Lg);
        }
      }, {
        key: "_applyPMREM",
        value: function _applyPMREM(t) {
          var e = this._renderer,
              n = e.autoClear;
          e.autoClear = !1;

          for (var _r208 = 1; _r208 < Mg; _r208++) {
            var _e254 = Math.sqrt(Pg[_r208] * Pg[_r208] - Pg[_r208 - 1] * Pg[_r208 - 1]),
                _n264 = Fg[(_r208 - 1) % Fg.length];

            this._blur(t, _r208 - 1, _r208, _e254, _n264);
          }

          e.autoClear = n;
        }
      }, {
        key: "_blur",
        value: function _blur(t, e, n, r, i) {
          var s = this._pingPongRenderTarget;
          this._halfBlur(t, s, e, n, r, "latitudinal", i), this._halfBlur(s, t, n, n, r, "longitudinal", i);
        }
      }, {
        key: "_halfBlur",
        value: function _halfBlur(t, e, n, r, i, s, o) {
          var a = this._renderer,
              l = this._blurMaterial;
          "latitudinal" !== s && "longitudinal" !== s && console.error("blur direction must be either latitudinal or longitudinal!");
          var c = new cs(Rg[r], l),
              h = l.uniforms,
              u = Cg[n] - 1,
              p = isFinite(i) ? Math.PI / (2 * u) : 2 * Math.PI / (2 * Sg - 1),
              d = i / p,
              m = isFinite(i) ? 1 + Math.floor(3 * d) : Sg;
          m > Sg && console.warn("sigmaRadians, ".concat(i, ", is too large and will clip, as it requested ").concat(m, " samples when the maximum is set to ").concat(Sg));
          var f = [];
          var g = 0;

          for (var _v9 = 0; _v9 < Sg; ++_v9) {
            var _t269 = _v9 / d,
                _e255 = Math.exp(-_t269 * _t269 / 2);

            f.push(_e255), 0 == _v9 ? g += _e255 : _v9 < m && (g += 2 * _e255);
          }

          for (var _v10 = 0; _v10 < f.length; _v10++) {
            f[_v10] = f[_v10] / g;
          }

          h.envMap.value = t.texture, h.samples.value = m, h.weights.value = f, h.latitudinal.value = "latitudinal" === s, o && (h.poleAxis.value = o), h.dTheta.value = p, h.mipInt.value = _g - n, h.inputEncoding.value = Tg[t.texture.encoding], h.outputEncoding.value = Tg[t.texture.encoding];
          var x = Cg[r];
          kg(e, 3 * Math.max(0, bg - 2 * x), (0 === r ? 0 : 2 * bg) + 2 * x * (r > _g - yg ? r - _g + yg : 0), 3 * x, 2 * x), a.setRenderTarget(e), a.render(c, Lg);
        }
      }]);

      return zg;
    }();

    function Gg(t) {
      return void 0 !== t && t.type === bt && (t.encoding === Xe || t.encoding === Ye || t.encoding === Ze);
    }

    function Hg() {
      var t = [],
          e = [],
          n = [];
      var r = _g;

      for (var _i183 = 0; _i183 < Mg; _i183++) {
        var _s109 = Math.pow(2, r);

        e.push(_s109);

        var _o91 = 1 / _s109;

        _i183 > _g - yg ? _o91 = wg[_i183 - _g + yg - 1] : 0 == _i183 && (_o91 = 0), n.push(_o91);

        var _a56 = 1 / (_s109 - 1),
            _l46 = -_a56 / 2,
            _c31 = 1 + _a56 / 2,
            _h22 = [_l46, _l46, _c31, _l46, _c31, _c31, _l46, _l46, _c31, _c31, _l46, _c31],
            _u21 = 6,
            _p24 = 6,
            _d25 = 3,
            _m11 = 2,
            _f4 = 1,
            _g9 = new Float32Array(_d25 * _p24 * _u21),
            _x8 = new Float32Array(_m11 * _p24 * _u21),
            _v11 = new Float32Array(_f4 * _p24 * _u21);

        for (var _t270 = 0; _t270 < _u21; _t270++) {
          var _e256 = _t270 % 3 * 2 / 3 - 1,
              _n265 = _t270 > 2 ? 0 : -1,
              _r209 = [_e256, _n265, 0, _e256 + 2 / 3, _n265, 0, _e256 + 2 / 3, _n265 + 1, 0, _e256, _n265, 0, _e256 + 2 / 3, _n265 + 1, 0, _e256, _n265 + 1, 0];

          _g9.set(_r209, _d25 * _p24 * _t270), _x8.set(_h22, _m11 * _p24 * _t270);
          var _i184 = [_t270, _t270, _t270, _t270, _t270, _t270];

          _v11.set(_i184, _f4 * _p24 * _t270);
        }

        var _y2 = new ji();

        _y2.setAttribute("position", new Si(_g9, _d25)), _y2.setAttribute("uv", new Si(_x8, _m11)), _y2.setAttribute("faceIndex", new Si(_v11, _f4)), t.push(_y2), r > yg && r--;
      }

      return {
        _lodPlanes: t,
        _sizeLods: e,
        _sigmas: n
      };
    }

    function Ug(t) {
      var e = new jn(3 * bg, 3 * bg, t);
      return e.texture.mapping = ot, e.texture.name = "PMREM.cubeUv", e.scissorTest = !0, e;
    }

    function kg(t, e, n, r, i) {
      t.viewport.set(e, n, r, i), t.scissor.set(e, n, r, i);
    }

    function Vg(t) {
      var e = new Float32Array(t),
          n = new Yn(0, 1, 0);
      return new jp({
        name: "SphericalGaussianBlur",
        defines: {
          n: t
        },
        uniforms: {
          envMap: {
            value: null
          },
          samples: {
            value: 1
          },
          weights: {
            value: e
          },
          latitudinal: {
            value: !1
          },
          dTheta: {
            value: 0
          },
          mipInt: {
            value: 0
          },
          poleAxis: {
            value: n
          },
          inputEncoding: {
            value: Tg[Xe]
          },
          outputEncoding: {
            value: Tg[Xe]
          }
        },
        vertexShader: qg(),
        fragmentShader: "\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t".concat(Xg(), "\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t"),
        blending: g,
        depthTest: !1,
        depthWrite: !1
      });
    }

    function Wg() {
      var t = new On(1, 1);
      return new jp({
        name: "EquirectangularToCubeUV",
        uniforms: {
          envMap: {
            value: null
          },
          texelSize: {
            value: t
          },
          inputEncoding: {
            value: Tg[Xe]
          },
          outputEncoding: {
            value: Tg[Xe]
          }
        },
        vertexShader: qg(),
        fragmentShader: "\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t".concat(Xg(), "\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tvec2 f = fract( uv / texelSize - 0.5 );\n\t\t\t\tuv -= f * texelSize;\n\t\t\t\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x += texelSize.x;\n\t\t\t\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.y += texelSize.y;\n\t\t\t\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x -= texelSize.x;\n\t\t\t\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\n\t\t\t\tvec3 tm = mix( tl, tr, f.x );\n\t\t\t\tvec3 bm = mix( bl, br, f.x );\n\t\t\t\tgl_FragColor.rgb = mix( tm, bm, f.y );\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t"),
        blending: g,
        depthTest: !1,
        depthWrite: !1
      });
    }

    function jg() {
      return new jp({
        name: "CubemapToCubeUV",
        uniforms: {
          envMap: {
            value: null
          },
          inputEncoding: {
            value: Tg[Xe]
          },
          outputEncoding: {
            value: Tg[Xe]
          }
        },
        vertexShader: qg(),
        fragmentShader: "\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\t".concat(Xg(), "\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t"),
        blending: g,
        depthTest: !1,
        depthWrite: !1
      });
    }

    function qg() {
      return "\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t";
    }

    function Xg() {
      return "\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t";
    }

    exports.PMREMGenerator = zg;
    var Yg = 0;
    exports.LineStrip = 0;
    var Zg = 1;
    exports.LinePieces = 1;
    var Jg = 0;
    exports.NoColors = 0;
    var Qg = 1;
    exports.FaceColors = 1;
    var Kg = 2;

    function $g(t) {
      return console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead."), t;
    }

    function tx() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      return console.warn("THREE.MultiMaterial has been removed. Use an Array instead."), t.isMultiMaterial = !0, t.materials = t, t.clone = function () {
        return t.slice();
      }, t;
    }

    function ex(t, e) {
      return console.warn("THREE.PointCloud has been renamed to THREE.Points."), new Ru(t, e);
    }

    function nx(t) {
      return console.warn("THREE.Particle has been renamed to THREE.Sprite."), new Xh(t);
    }

    function rx(t, e) {
      return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."), new Ru(t, e);
    }

    function ix(t) {
      return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."), new Su(t);
    }

    function sx(t) {
      return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."), new Su(t);
    }

    function ox(t) {
      return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."), new Su(t);
    }

    function ax(t, e, n) {
      return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."), new Yn(t, e, n);
    }

    function lx(t, e) {
      return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead."), new Si(t, e).setUsage(Mn);
    }

    function cx(t, e) {
      return console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead."), new Ti(t, e);
    }

    function hx(t, e) {
      return console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead."), new Ei(t, e);
    }

    function ux(t, e) {
      return console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead."), new Ai(t, e);
    }

    function px(t, e) {
      return console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead."), new Li(t, e);
    }

    function dx(t, e) {
      return console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead."), new Ri(t, e);
    }

    function mx(t, e) {
      return console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead."), new Ci(t, e);
    }

    function fx(t, e) {
      return console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead."), new Pi(t, e);
    }

    function gx(t, e) {
      return console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead."), new Ii(t, e);
    }

    function xx(t, e) {
      return console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead."), new Bi(t, e);
    }

    function vx(t) {
      return console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper."), new fg(t);
    }

    function yx(t, e) {
      return console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead."), new lg(t, e);
    }

    function _x(t, e) {
      return console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead."), new wu(new Wu(t.geometry), new du({
        color: void 0 !== e ? e : 16777215
      }));
    }

    function bx(t, e) {
      return console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead."), new wu(new kp(t.geometry), new du({
        color: void 0 !== e ? e : 16777215
      }));
    }

    function wx(t) {
      return console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader."), new wd(t);
    }

    function Mx(t) {
      return console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader."), new Ad(t);
    }

    function Sx(t, e, n) {
      return console.warn("THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options )."), new Ts(t, n);
    }

    function Tx() {
      console.error("THREE.CanvasRenderer has been removed");
    }

    function Ex() {
      console.error("THREE.JSONLoader has been removed.");
    }

    exports.VertexColors = 2, Rd.create = function (t, e) {
      return console.log("THREE.Curve.create() has been deprecated"), t.prototype = Object.create(Rd.prototype), t.prototype.constructor = t, t.prototype.getPoint = e, t;
    }, rm.prototype.fromPoints = function (t) {
      return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."), this.setFromPoints(t);
    }, Qf.prototype.setColors = function () {
      console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.");
    }, Wf.prototype.update = function () {
      console.error("THREE.SkeletonHelper: update() no longer needs to be called.");
    }, _d.prototype.extractUrlBase = function (t) {
      return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."), Em.extractUrlBase(t);
    }, _d.Handlers = {
      add: function add() {
        console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.");
      },
      get: function get() {
        console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.");
      }
    }, Bf.prototype.center = function (t) {
      return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."), this.getCenter(t);
    }, Bf.prototype.empty = function () {
      return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."), this.isEmpty();
    }, Bf.prototype.isIntersectionBox = function (t) {
      return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(t);
    }, Bf.prototype.size = function (t) {
      return console.warn("THREE.Box2: .size() has been renamed to .getSize()."), this.getSize(t);
    }, Qn.prototype.center = function (t) {
      return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."), this.getCenter(t);
    }, Qn.prototype.empty = function () {
      return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."), this.isEmpty();
    }, Qn.prototype.isIntersectionBox = function (t) {
      return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(t);
    }, Qn.prototype.isIntersectionSphere = function (t) {
      return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."), this.intersectsSphere(t);
    }, Qn.prototype.size = function (t) {
      return console.warn("THREE.Box3: .size() has been renamed to .getSize()."), this.getSize(t);
    }, gr.prototype.empty = function () {
      return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."), this.isEmpty();
    }, Rs.prototype.setFromMatrix = function (t) {
      return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."), this.setFromProjectionMatrix(t);
    }, Of.prototype.center = function (t) {
      return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."), this.getCenter(t);
    }, Fn.random16 = function () {
      return console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead."), Math.random();
    }, Fn.nearestPowerOfTwo = function (t) {
      return console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo()."), Fn.floorPowerOfTwo(t);
    }, Fn.nextPowerOfTwo = function (t) {
      return console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo()."), Fn.ceilPowerOfTwo(t);
    }, zn.prototype.flattenToArrayOffset = function (t, e) {
      return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."), this.toArray(t, e);
    }, zn.prototype.multiplyVector3 = function (t) {
      return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."), t.applyMatrix3(this);
    }, zn.prototype.multiplyVector3Array = function () {
      console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.");
    }, zn.prototype.applyToBufferAttribute = function (t) {
      return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."), t.applyMatrix3(this);
    }, zn.prototype.applyToVector3Array = function () {
      console.error("THREE.Matrix3: .applyToVector3Array() has been removed.");
    }, zn.prototype.getInverse = function (t) {
      return console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."), this.copy(t).invert();
    }, Tr.prototype.extractPosition = function (t) {
      return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."), this.copyPosition(t);
    }, Tr.prototype.flattenToArrayOffset = function (t, e) {
      return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."), this.toArray(t, e);
    }, Tr.prototype.getPosition = function () {
      return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."), new Yn().setFromMatrixColumn(this, 3);
    }, Tr.prototype.setRotationFromQuaternion = function (t) {
      return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."), this.makeRotationFromQuaternion(t);
    }, Tr.prototype.multiplyToArray = function () {
      console.warn("THREE.Matrix4: .multiplyToArray() has been removed.");
    }, Tr.prototype.multiplyVector3 = function (t) {
      return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."), t.applyMatrix4(this);
    }, Tr.prototype.multiplyVector4 = function (t) {
      return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."), t.applyMatrix4(this);
    }, Tr.prototype.multiplyVector3Array = function () {
      console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.");
    }, Tr.prototype.rotateAxis = function (t) {
      console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."), t.transformDirection(this);
    }, Tr.prototype.crossVector = function (t) {
      return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."), t.applyMatrix4(this);
    }, Tr.prototype.translate = function () {
      console.error("THREE.Matrix4: .translate() has been removed.");
    }, Tr.prototype.rotateX = function () {
      console.error("THREE.Matrix4: .rotateX() has been removed.");
    }, Tr.prototype.rotateY = function () {
      console.error("THREE.Matrix4: .rotateY() has been removed.");
    }, Tr.prototype.rotateZ = function () {
      console.error("THREE.Matrix4: .rotateZ() has been removed.");
    }, Tr.prototype.rotateByAxis = function () {
      console.error("THREE.Matrix4: .rotateByAxis() has been removed.");
    }, Tr.prototype.applyToBufferAttribute = function (t) {
      return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."), t.applyMatrix4(this);
    }, Tr.prototype.applyToVector3Array = function () {
      console.error("THREE.Matrix4: .applyToVector3Array() has been removed.");
    }, Tr.prototype.makeFrustum = function (t, e, n, r, i, s) {
      return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."), this.makePerspective(t, e, r, n, i, s);
    }, Tr.prototype.getInverse = function (t) {
      return console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."), this.copy(t).invert();
    }, ti.prototype.isIntersectionLine = function (t) {
      return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."), this.intersectsLine(t);
    }, Xn.prototype.multiplyVector3 = function (t) {
      return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."), t.applyQuaternion(this);
    }, Xn.prototype.inverse = function () {
      return console.warn("THREE.Quaternion: .inverse() has been renamed to invert()."), this.invert();
    }, Sr.prototype.isIntersectionBox = function (t) {
      return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(t);
    }, Sr.prototype.isIntersectionPlane = function (t) {
      return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."), this.intersectsPlane(t);
    }, Sr.prototype.isIntersectionSphere = function (t) {
      return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."), this.intersectsSphere(t);
    }, ui.prototype.area = function () {
      return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."), this.getArea();
    }, ui.prototype.barycoordFromPoint = function (t, e) {
      return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."), this.getBarycoord(t, e);
    }, ui.prototype.midpoint = function (t) {
      return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."), this.getMidpoint(t);
    }, ui.prototypenormal = function (t) {
      return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."), this.getNormal(t);
    }, ui.prototype.plane = function (t) {
      return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."), this.getPlane(t);
    }, ui.barycoordFromPoint = function (t, e, n, r, i) {
      return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."), ui.getBarycoord(t, e, n, r, i);
    }, ui.normal = function (t, e, n, r) {
      return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."), ui.getNormal(t, e, n, r);
    }, im.prototype.extractAllPoints = function (t) {
      return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."), this.extractPoints(t);
    }, im.prototype.extrude = function (t) {
      return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."), new Ep(this, t);
    }, im.prototype.makeGeometry = function (t) {
      return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."), new Bp(this, t);
    }, On.prototype.fromAttribute = function (t, e, n) {
      return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(t, e, n);
    }, On.prototype.distanceToManhattan = function (t) {
      return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."), this.manhattanDistanceTo(t);
    }, On.prototype.lengthManhattan = function () {
      return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength();
    }, Yn.prototype.setEulerFromRotationMatrix = function () {
      console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.");
    }, Yn.prototype.setEulerFromQuaternion = function () {
      console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.");
    }, Yn.prototype.getPositionFromMatrix = function (t) {
      return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."), this.setFromMatrixPosition(t);
    }, Yn.prototype.getScaleFromMatrix = function (t) {
      return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."), this.setFromMatrixScale(t);
    }, Yn.prototype.getColumnFromMatrix = function (t, e) {
      return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."), this.setFromMatrixColumn(e, t);
    }, Yn.prototype.applyProjection = function (t) {
      return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."), this.applyMatrix4(t);
    }, Yn.prototype.fromAttribute = function (t, e, n) {
      return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(t, e, n);
    }, Yn.prototype.distanceToManhattan = function (t) {
      return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."), this.manhattanDistanceTo(t);
    }, Yn.prototype.lengthManhattan = function () {
      return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength();
    }, Wn.prototype.fromAttribute = function (t, e, n) {
      return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(t, e, n);
    }, Wn.prototype.lengthManhattan = function () {
      return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength();
    }, Jr.prototype.getChildByName = function (t) {
      return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."), this.getObjectByName(t);
    }, Jr.prototype.renderDepth = function () {
      console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.");
    }, Jr.prototype.translate = function (t, e) {
      return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."), this.translateOnAxis(e, t);
    }, Jr.prototype.getWorldRotation = function () {
      console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.");
    }, Jr.prototype.applyMatrix = function (t) {
      return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."), this.applyMatrix4(t);
    }, Object.defineProperties(Jr.prototype, {
      eulerOrder: {
        get: function get() {
          return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."), this.rotation.order;
        },
        set: function set(t) {
          console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."), this.rotation.order = t;
        }
      },
      useQuaternion: {
        get: function get() {
          console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
        },
        set: function set() {
          console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
        }
      }
    }), cs.prototype.setDrawMode = function () {
      console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.");
    }, Object.defineProperties(cs.prototype, {
      drawMode: {
        get: function get() {
          return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."), 0;
        },
        set: function set() {
          console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.");
        }
      }
    }), ru.prototype.initBones = function () {
      console.error("THREE.SkinnedMesh: initBones() has been removed.");
    }, Object.defineProperty(Rd.prototype, "__arcLengthDivisions", {
      get: function get() {
        return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."), this.arcLengthDivisions;
      },
      set: function set(t) {
        console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."), this.arcLengthDivisions = t;
      }
    }), _s.prototype.setLens = function (t, e) {
      console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."), void 0 !== e && (this.filmGauge = e), this.setFocalLength(t);
    }, Object.defineProperties(sm.prototype, {
      onlyShadow: {
        set: function set() {
          console.warn("THREE.Light: .onlyShadow has been removed.");
        }
      },
      shadowCameraFov: {
        set: function set(t) {
          console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."), this.shadow.camera.fov = t;
        }
      },
      shadowCameraLeft: {
        set: function set(t) {
          console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."), this.shadow.camera.left = t;
        }
      },
      shadowCameraRight: {
        set: function set(t) {
          console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."), this.shadow.camera.right = t;
        }
      },
      shadowCameraTop: {
        set: function set(t) {
          console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."), this.shadow.camera.top = t;
        }
      },
      shadowCameraBottom: {
        set: function set(t) {
          console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."), this.shadow.camera.bottom = t;
        }
      },
      shadowCameraNear: {
        set: function set(t) {
          console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."), this.shadow.camera.near = t;
        }
      },
      shadowCameraFar: {
        set: function set(t) {
          console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."), this.shadow.camera.far = t;
        }
      },
      shadowCameraVisible: {
        set: function set() {
          console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.");
        }
      },
      shadowBias: {
        set: function set(t) {
          console.warn("THREE.Light: .shadowBias is now .shadow.bias."), this.shadow.bias = t;
        }
      },
      shadowDarkness: {
        set: function set() {
          console.warn("THREE.Light: .shadowDarkness has been removed.");
        }
      },
      shadowMapWidth: {
        set: function set(t) {
          console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."), this.shadow.mapSize.width = t;
        }
      },
      shadowMapHeight: {
        set: function set(t) {
          console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."), this.shadow.mapSize.height = t;
        }
      }
    }), Object.defineProperties(Si.prototype, {
      length: {
        get: function get() {
          return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."), this.array.length;
        }
      },
      dynamic: {
        get: function get() {
          return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."), this.usage === Mn;
        },
        set: function set() {
          console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."), this.setUsage(Mn);
        }
      }
    }), Si.prototype.setDynamic = function (t) {
      return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."), this.setUsage(!0 === t ? Mn : wn), this;
    }, Si.prototype.copyIndicesArray = function () {
      console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.");
    }, Si.prototype.setArray = function () {
      console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
    }, ji.prototype.addIndex = function (t) {
      console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."), this.setIndex(t);
    }, ji.prototype.addAttribute = function (t, e) {
      return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."), e && e.isBufferAttribute || e && e.isInterleavedBufferAttribute ? "index" === t ? (console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."), this.setIndex(e), this) : this.setAttribute(t, e) : (console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."), this.setAttribute(t, new Si(arguments[1], arguments[2])));
    }, ji.prototype.addDrawCall = function (t, e, n) {
      void 0 !== n && console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."), console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."), this.addGroup(t, e);
    }, ji.prototype.clearDrawCalls = function () {
      console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."), this.clearGroups();
    }, ji.prototype.computeOffsets = function () {
      console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.");
    }, ji.prototype.removeAttribute = function (t) {
      return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."), this.deleteAttribute(t);
    }, ji.prototype.applyMatrix = function (t) {
      return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."), this.applyMatrix4(t);
    }, Object.defineProperties(ji.prototype, {
      drawcalls: {
        get: function get() {
          return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."), this.groups;
        }
      },
      offsets: {
        get: function get() {
          return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."), this.groups;
        }
      }
    }), Object.defineProperties(Am.prototype, {
      maxInstancedCount: {
        get: function get() {
          return console.warn("THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount."), this.instanceCount;
        },
        set: function set(t) {
          console.warn("THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount."), this.instanceCount = t;
        }
      }
    }), Object.defineProperties(Lf.prototype, {
      linePrecision: {
        get: function get() {
          return console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead."), this.params.Line.threshold;
        },
        set: function set(t) {
          console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead."), this.params.Line.threshold = t;
        }
      }
    }), Object.defineProperties(Ch.prototype, {
      dynamic: {
        get: function get() {
          return console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead."), this.usage === Mn;
        },
        set: function set(t) {
          console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead."), this.setUsage(t);
        }
      }
    }), Ch.prototype.setDynamic = function (t) {
      return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."), this.setUsage(!0 === t ? Mn : wn), this;
    }, Ch.prototype.setArray = function () {
      console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
    }, Ep.prototype.getArrays = function () {
      console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.");
    }, Ep.prototype.addShapeList = function () {
      console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.");
    }, Ep.prototype.addShape = function () {
      console.error("THREE.ExtrudeGeometry: .addShape() has been removed.");
    }, Rh.prototype.dispose = function () {
      console.error("THREE.Scene: .dispose() has been removed.");
    }, Tf.prototype.onUpdate = function () {
      return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."), this;
    }, Object.defineProperties(di.prototype, {
      wrapAround: {
        get: function get() {
          console.warn("THREE.Material: .wrapAround has been removed.");
        },
        set: function set() {
          console.warn("THREE.Material: .wrapAround has been removed.");
        }
      },
      overdraw: {
        get: function get() {
          console.warn("THREE.Material: .overdraw has been removed.");
        },
        set: function set() {
          console.warn("THREE.Material: .overdraw has been removed.");
        }
      },
      wrapRGB: {
        get: function get() {
          return console.warn("THREE.Material: .wrapRGB has been removed."), new _i();
        }
      },
      shading: {
        get: function get() {
          console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
        },
        set: function set(t) {
          console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."), this.flatShading = 1 === t;
        }
      },
      stencilMask: {
        get: function get() {
          return console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead."), this.stencilFuncMask;
        },
        set: function set(t) {
          console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead."), this.stencilFuncMask = t;
        }
      }
    }), Object.defineProperties(Xp.prototype, {
      transparency: {
        get: function get() {
          return console.warn("THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission."), this.transmission;
        },
        set: function set(t) {
          console.warn("THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission."), this.transmission = t;
        }
      }
    }), Object.defineProperties(vs.prototype, {
      derivatives: {
        get: function get() {
          return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."), this.extensions.derivatives;
        },
        set: function set(t) {
          console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."), this.extensions.derivatives = t;
        }
      }
    }), Th.prototype.clearTarget = function (t, e, n, r) {
      console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."), this.setRenderTarget(t), this.clear(e, n, r);
    }, Th.prototype.animate = function (t) {
      console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."), this.setAnimationLoop(t);
    }, Th.prototype.getCurrentRenderTarget = function () {
      return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."), this.getRenderTarget();
    }, Th.prototype.getMaxAnisotropy = function () {
      return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."), this.capabilities.getMaxAnisotropy();
    }, Th.prototype.getPrecision = function () {
      return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."), this.capabilities.precision;
    }, Th.prototype.resetGLState = function () {
      return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."), this.state.reset();
    }, Th.prototype.supportsFloatTextures = function () {
      return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."), this.extensions.get("OES_texture_float");
    }, Th.prototype.supportsHalfFloatTextures = function () {
      return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."), this.extensions.get("OES_texture_half_float");
    }, Th.prototype.supportsStandardDerivatives = function () {
      return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."), this.extensions.get("OES_standard_derivatives");
    }, Th.prototype.supportsCompressedTextureS3TC = function () {
      return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."), this.extensions.get("WEBGL_compressed_texture_s3tc");
    }, Th.prototype.supportsCompressedTexturePVRTC = function () {
      return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."), this.extensions.get("WEBGL_compressed_texture_pvrtc");
    }, Th.prototype.supportsBlendMinMax = function () {
      return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."), this.extensions.get("EXT_blend_minmax");
    }, Th.prototype.supportsVertexTextures = function () {
      return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."), this.capabilities.vertexTextures;
    }, Th.prototype.supportsInstancedArrays = function () {
      return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."), this.extensions.get("ANGLE_instanced_arrays");
    }, Th.prototype.enableScissorTest = function (t) {
      console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."), this.setScissorTest(t);
    }, Th.prototype.initMaterial = function () {
      console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
    }, Th.prototype.addPrePlugin = function () {
      console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
    }, Th.prototype.addPostPlugin = function () {
      console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
    }, Th.prototype.updateShadowMap = function () {
      console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
    }, Th.prototype.setFaceCulling = function () {
      console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.");
    }, Th.prototype.allocTextureUnit = function () {
      console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.");
    }, Th.prototype.setTexture = function () {
      console.warn("THREE.WebGLRenderer: .setTexture() has been removed.");
    }, Th.prototype.setTexture2D = function () {
      console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.");
    }, Th.prototype.setTextureCube = function () {
      console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.");
    }, Th.prototype.getActiveMipMapLevel = function () {
      return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."), this.getActiveMipmapLevel();
    }, Object.defineProperties(Th.prototype, {
      shadowMapEnabled: {
        get: function get() {
          return this.shadowMap.enabled;
        },
        set: function set(t) {
          console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."), this.shadowMap.enabled = t;
        }
      },
      shadowMapType: {
        get: function get() {
          return this.shadowMap.type;
        },
        set: function set(t) {
          console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."), this.shadowMap.type = t;
        }
      },
      shadowMapCullFace: {
        get: function get() {
          console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
        },
        set: function set() {
          console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
        }
      },
      context: {
        get: function get() {
          return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."), this.getContext();
        }
      },
      vr: {
        get: function get() {
          return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"), this.xr;
        }
      },
      gammaInput: {
        get: function get() {
          return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."), !1;
        },
        set: function set() {
          console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.");
        }
      },
      gammaOutput: {
        get: function get() {
          return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."), !1;
        },
        set: function set(t) {
          console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."), this.outputEncoding = !0 === t ? Ye : Xe;
        }
      },
      toneMappingWhitePoint: {
        get: function get() {
          return console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed."), 1;
        },
        set: function set() {
          console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.");
        }
      }
    }), Object.defineProperties(fh.prototype, {
      cullFace: {
        get: function get() {
          console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
        },
        set: function set() {
          console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
        }
      },
      renderReverseSided: {
        get: function get() {
          console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
        },
        set: function set() {
          console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
        }
      },
      renderSingleSided: {
        get: function get() {
          console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
        },
        set: function set() {
          console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
        }
      }
    }), Object.defineProperties(jn.prototype, {
      wrapS: {
        get: function get() {
          return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."), this.texture.wrapS;
        },
        set: function set(t) {
          console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."), this.texture.wrapS = t;
        }
      },
      wrapT: {
        get: function get() {
          return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."), this.texture.wrapT;
        },
        set: function set(t) {
          console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."), this.texture.wrapT = t;
        }
      },
      magFilter: {
        get: function get() {
          return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."), this.texture.magFilter;
        },
        set: function set(t) {
          console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."), this.texture.magFilter = t;
        }
      },
      minFilter: {
        get: function get() {
          return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."), this.texture.minFilter;
        },
        set: function set(t) {
          console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."), this.texture.minFilter = t;
        }
      },
      anisotropy: {
        get: function get() {
          return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."), this.texture.anisotropy;
        },
        set: function set(t) {
          console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."), this.texture.anisotropy = t;
        }
      },
      offset: {
        get: function get() {
          return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."), this.texture.offset;
        },
        set: function set(t) {
          console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."), this.texture.offset = t;
        }
      },
      repeat: {
        get: function get() {
          return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."), this.texture.repeat;
        },
        set: function set(t) {
          console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."), this.texture.repeat = t;
        }
      },
      format: {
        get: function get() {
          return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."), this.texture.format;
        },
        set: function set(t) {
          console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."), this.texture.format = t;
        }
      },
      type: {
        get: function get() {
          return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."), this.texture.type;
        },
        set: function set(t) {
          console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."), this.texture.type = t;
        }
      },
      generateMipmaps: {
        get: function get() {
          return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."), this.texture.generateMipmaps;
        },
        set: function set(t) {
          console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."), this.texture.generateMipmaps = t;
        }
      }
    }), ef.prototype.load = function (t) {
      console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
      var e = this;
      return new km().load(t, function (t) {
        e.setBuffer(t);
      }), this;
    }, lf.prototype.getData = function () {
      return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."), this.getFrequencyData();
    }, Ms.prototype.updateCubeMap = function (t, e) {
      return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."), this.update(t, e);
    }, Ms.prototype.clear = function (t, e, n, r) {
      return console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear()."), this.renderTarget.clear(t, e, n, r);
    }, Hn.crossOrigin = void 0, Hn.loadTexture = function (t, e, n, r) {
      console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");
      var i = new Ld();
      i.setCrossOrigin(this.crossOrigin);
      var s = i.load(t, n, void 0, r);
      return e && (s.mapping = e), s;
    }, Hn.loadTextureCube = function (t, e, n, r) {
      console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
      var i = new Ed();
      i.setCrossOrigin(this.crossOrigin);
      var s = i.load(t, n, void 0, r);
      return e && (s.mapping = e), s;
    }, Hn.loadCompressedTexture = function () {
      console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.");
    }, Hn.loadCompressedTextureCube = function () {
      console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.");
    };
    var Ax = {
      createMultiMaterialObject: function createMultiMaterialObject() {
        console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js");
      },
      detach: function detach() {
        console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js");
      },
      attach: function attach() {
        console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js");
      }
    };

    function Lx() {
      console.error("THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js");
    }

    exports.SceneUtils = Ax, "undefined" != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", {
      detail: {
        revision: "127"
      }
    })), "undefined" != typeof window && (window.__THREE__ ? console.warn("WARNING: Multiple instances of Three.js being imported.") : window.__THREE__ = "127");
  }, {}],
  "vwhv": [function (require, module, exports) {
    "use strict";

    function e(e, t, x) {
      x = x || 2;
      var i,
          u,
          v,
          y,
          o,
          p,
          a,
          l = t && t.length,
          h = l ? t[0] * x : e.length,
          s = n(e, 0, h, x, !0),
          c = [];
      if (!s || s.next === s.prev) return c;

      if (l && (s = f(e, t, s, x)), e.length > 80 * x) {
        i = v = e[0], u = y = e[1];

        for (var Z = x; Z < h; Z += x) {
          (o = e[Z]) < i && (i = o), (p = e[Z + 1]) < u && (u = p), o > v && (v = o), p > y && (y = p);
        }

        a = 0 !== (a = Math.max(v - i, y - u)) ? 1 / a : 0;
      }

      return r(s, c, x, i, u, a), c;
    }

    function n(e, n, t, r, x) {
      var i, u;
      if (x === D(e, n, t, r) > 0) for (i = n; i < t; i += r) {
        u = A(i, e[i], e[i + 1], u);
      } else for (i = t - r; i >= n; i -= r) {
        u = A(i, e[i], e[i + 1], u);
      }
      return u && w(u, u.next) && (B(u), u = u.next), u;
    }

    function t(e, n) {
      if (!e) return e;
      n || (n = e);
      var t,
          r = e;

      do {
        if (t = !1, r.steiner || !w(r, r.next) && 0 !== g(r.prev, r, r.next)) r = r.next;else {
          if (B(r), (r = n = r.prev) === r.next) break;
          t = !0;
        }
      } while (t || r !== n);

      return n;
    }

    function r(e, n, f, y, o, p, a) {
      if (e) {
        !a && p && l(e, y, o, p);

        for (var h, s, c = e; e.prev !== e.next;) {
          if (h = e.prev, s = e.next, p ? i(e, y, o, p) : x(e)) n.push(h.i / f), n.push(e.i / f), n.push(s.i / f), B(e), e = s.next, c = s.next;else if ((e = s) === c) {
            a ? 1 === a ? r(e = u(t(e), n, f), n, f, y, o, p, 2) : 2 === a && v(e, n, f, y, o, p) : r(t(e), n, f, y, o, p, 1);
            break;
          }
        }
      }
    }

    function x(e) {
      var n = e.prev,
          t = e,
          r = e.next;
      if (g(n, t, r) >= 0) return !1;

      for (var x = e.next.next; x !== e.prev;) {
        if (Z(n.x, n.y, t.x, t.y, r.x, r.y, x.x, x.y) && g(x.prev, x, x.next) >= 0) return !1;
        x = x.next;
      }

      return !0;
    }

    function i(e, n, t, r) {
      var x = e.prev,
          i = e,
          u = e.next;
      if (g(x, i, u) >= 0) return !1;

      for (var v = x.x < i.x ? x.x < u.x ? x.x : u.x : i.x < u.x ? i.x : u.x, f = x.y < i.y ? x.y < u.y ? x.y : u.y : i.y < u.y ? i.y : u.y, y = x.x > i.x ? x.x > u.x ? x.x : u.x : i.x > u.x ? i.x : u.x, o = x.y > i.y ? x.y > u.y ? x.y : u.y : i.y > u.y ? i.y : u.y, p = s(v, f, n, t, r), a = s(y, o, n, t, r), l = e.prevZ, h = e.nextZ; l && l.z >= p && h && h.z <= a;) {
        if (l !== e.prev && l !== e.next && Z(x.x, x.y, i.x, i.y, u.x, u.y, l.x, l.y) && g(l.prev, l, l.next) >= 0) return !1;
        if (l = l.prevZ, h !== e.prev && h !== e.next && Z(x.x, x.y, i.x, i.y, u.x, u.y, h.x, h.y) && g(h.prev, h, h.next) >= 0) return !1;
        h = h.nextZ;
      }

      for (; l && l.z >= p;) {
        if (l !== e.prev && l !== e.next && Z(x.x, x.y, i.x, i.y, u.x, u.y, l.x, l.y) && g(l.prev, l, l.next) >= 0) return !1;
        l = l.prevZ;
      }

      for (; h && h.z <= a;) {
        if (h !== e.prev && h !== e.next && Z(x.x, x.y, i.x, i.y, u.x, u.y, h.x, h.y) && g(h.prev, h, h.next) >= 0) return !1;
        h = h.nextZ;
      }

      return !0;
    }

    function u(e, n, r) {
      var x = e;

      do {
        var i = x.prev,
            u = x.next.next;
        !w(i, u) && M(i, x, x.next, u) && k(i, u) && k(u, i) && (n.push(i.i / r), n.push(x.i / r), n.push(u.i / r), B(x), B(x.next), x = e = u), x = x.next;
      } while (x !== e);

      return t(x);
    }

    function v(e, n, x, i, u, v) {
      var f = e;

      do {
        for (var y = f.next.next; y !== f.prev;) {
          if (f.i !== y.i && d(f, y)) {
            var o = q(f, y);
            return f = t(f, f.next), o = t(o, o.next), r(f, n, x, i, u, v), void r(o, n, x, i, u, v);
          }

          y = y.next;
        }

        f = f.next;
      } while (f !== e);
    }

    function f(e, r, x, i) {
      var u,
          v,
          f,
          p = [];

      for (u = 0, v = r.length; u < v; u++) {
        (f = n(e, r[u] * i, u < v - 1 ? r[u + 1] * i : e.length, i, !1)) === f.next && (f.steiner = !0), p.push(c(f));
      }

      for (p.sort(y), u = 0; u < p.length; u++) {
        o(p[u], x), x = t(x, x.next);
      }

      return x;
    }

    function y(e, n) {
      return e.x - n.x;
    }

    function o(e, n) {
      if (n = p(e, n)) {
        var r = q(n, e);
        t(n, n.next), t(r, r.next);
      }
    }

    function p(e, n) {
      var t,
          r = n,
          x = e.x,
          i = e.y,
          u = -1 / 0;

      do {
        if (i <= r.y && i >= r.next.y && r.next.y !== r.y) {
          var v = r.x + (i - r.y) * (r.next.x - r.x) / (r.next.y - r.y);

          if (v <= x && v > u) {
            if (u = v, v === x) {
              if (i === r.y) return r;
              if (i === r.next.y) return r.next;
            }

            t = r.x < r.next.x ? r : r.next;
          }
        }

        r = r.next;
      } while (r !== n);

      if (!t) return null;
      if (x === u) return t;
      var f,
          y = t,
          o = t.x,
          p = t.y,
          l = 1 / 0;
      r = t;

      do {
        x >= r.x && r.x >= o && x !== r.x && Z(i < p ? x : u, i, o, p, i < p ? u : x, i, r.x, r.y) && (f = Math.abs(i - r.y) / (x - r.x), k(r, e) && (f < l || f === l && (r.x > t.x || r.x === t.x && a(t, r))) && (t = r, l = f)), r = r.next;
      } while (r !== y);

      return t;
    }

    function a(e, n) {
      return g(e.prev, e, n.prev) < 0 && g(n.next, e, e.next) < 0;
    }

    function l(e, n, t, r) {
      var x = e;

      do {
        null === x.z && (x.z = s(x.x, x.y, n, t, r)), x.prevZ = x.prev, x.nextZ = x.next, x = x.next;
      } while (x !== e);

      x.prevZ.nextZ = null, x.prevZ = null, h(x);
    }

    function h(e) {
      var n,
          t,
          r,
          x,
          i,
          u,
          v,
          f,
          y = 1;

      do {
        for (t = e, e = null, i = null, u = 0; t;) {
          for (u++, r = t, v = 0, n = 0; n < y && (v++, r = r.nextZ); n++) {
            ;
          }

          for (f = y; v > 0 || f > 0 && r;) {
            0 !== v && (0 === f || !r || t.z <= r.z) ? (x = t, t = t.nextZ, v--) : (x = r, r = r.nextZ, f--), i ? i.nextZ = x : e = x, x.prevZ = i, i = x;
          }

          t = r;
        }

        i.nextZ = null, y *= 2;
      } while (u > 1);

      return e;
    }

    function s(e, n, t, r, x) {
      return (e = 1431655765 & ((e = 858993459 & ((e = 252645135 & ((e = 16711935 & ((e = 32767 * (e - t) * x) | e << 8)) | e << 4)) | e << 2)) | e << 1)) | (n = 1431655765 & ((n = 858993459 & ((n = 252645135 & ((n = 16711935 & ((n = 32767 * (n - r) * x) | n << 8)) | n << 4)) | n << 2)) | n << 1)) << 1;
    }

    function c(e) {
      var n = e,
          t = e;

      do {
        (n.x < t.x || n.x === t.x && n.y < t.y) && (t = n), n = n.next;
      } while (n !== e);

      return t;
    }

    function Z(e, n, t, r, x, i, u, v) {
      return (x - u) * (n - v) - (e - u) * (i - v) >= 0 && (e - u) * (r - v) - (t - u) * (n - v) >= 0 && (t - u) * (i - v) - (x - u) * (r - v) >= 0;
    }

    function d(e, n) {
      return e.next.i !== n.i && e.prev.i !== n.i && !b(e, n) && (k(e, n) && k(n, e) && j(e, n) && (g(e.prev, e, n.prev) || g(e, n.prev, n)) || w(e, n) && g(e.prev, e, e.next) > 0 && g(n.prev, n, n.next) > 0);
    }

    function g(e, n, t) {
      return (n.y - e.y) * (t.x - n.x) - (n.x - e.x) * (t.y - n.y);
    }

    function w(e, n) {
      return e.x === n.x && e.y === n.y;
    }

    function M(e, n, t, r) {
      var x = m(g(e, n, t)),
          i = m(g(e, n, r)),
          u = m(g(t, r, e)),
          v = m(g(t, r, n));
      return x !== i && u !== v || !(0 !== x || !z(e, t, n)) || !(0 !== i || !z(e, r, n)) || !(0 !== u || !z(t, e, r)) || !(0 !== v || !z(t, n, r));
    }

    function z(e, n, t) {
      return n.x <= Math.max(e.x, t.x) && n.x >= Math.min(e.x, t.x) && n.y <= Math.max(e.y, t.y) && n.y >= Math.min(e.y, t.y);
    }

    function m(e) {
      return e > 0 ? 1 : e < 0 ? -1 : 0;
    }

    function b(e, n) {
      var t = e;

      do {
        if (t.i !== e.i && t.next.i !== e.i && t.i !== n.i && t.next.i !== n.i && M(t, t.next, e, n)) return !0;
        t = t.next;
      } while (t !== e);

      return !1;
    }

    function k(e, n) {
      return g(e.prev, e, e.next) < 0 ? g(e, n, e.next) >= 0 && g(e, e.prev, n) >= 0 : g(e, n, e.prev) < 0 || g(e, e.next, n) < 0;
    }

    function j(e, n) {
      var t = e,
          r = !1,
          x = (e.x + n.x) / 2,
          i = (e.y + n.y) / 2;

      do {
        t.y > i != t.next.y > i && t.next.y !== t.y && x < (t.next.x - t.x) * (i - t.y) / (t.next.y - t.y) + t.x && (r = !r), t = t.next;
      } while (t !== e);

      return r;
    }

    function q(e, n) {
      var t = new C(e.i, e.x, e.y),
          r = new C(n.i, n.x, n.y),
          x = e.next,
          i = n.prev;
      return e.next = n, n.prev = e, t.next = x, x.prev = t, r.next = t, t.prev = r, i.next = r, r.prev = i, r;
    }

    function A(e, n, t, r) {
      var x = new C(e, n, t);
      return r ? (x.next = r.next, x.prev = r, r.next.prev = x, r.next = x) : (x.prev = x, x.next = x), x;
    }

    function B(e) {
      e.next.prev = e.prev, e.prev.next = e.next, e.prevZ && (e.prevZ.nextZ = e.nextZ), e.nextZ && (e.nextZ.prevZ = e.prevZ);
    }

    function C(e, n, t) {
      this.i = e, this.x = n, this.y = t, this.prev = null, this.next = null, this.z = null, this.prevZ = null, this.nextZ = null, this.steiner = !1;
    }

    function D(e, n, t, r) {
      for (var x = 0, i = n, u = t - r; i < t; i += r) {
        x += (e[u] - e[i]) * (e[i + 1] + e[u + 1]), u = i;
      }

      return x;
    }

    module.exports = e, module.exports.default = e, e.deviation = function (e, n, t, r) {
      var x = n && n.length,
          i = x ? n[0] * t : e.length,
          u = Math.abs(D(e, 0, i, t));
      if (x) for (var v = 0, f = n.length; v < f; v++) {
        var y = n[v] * t,
            o = v < f - 1 ? n[v + 1] * t : e.length;
        u -= Math.abs(D(e, y, o, t));
      }
      var p = 0;

      for (v = 0; v < r.length; v += 3) {
        var a = r[v] * t,
            l = r[v + 1] * t,
            h = r[v + 2] * t;
        p += Math.abs((e[a] - e[h]) * (e[l + 1] - e[a + 1]) - (e[a] - e[l]) * (e[h + 1] - e[a + 1]));
      }

      return 0 === u && 0 === p ? 0 : Math.abs((p - u) / u);
    }, e.flatten = function (e) {
      for (var n = e[0][0].length, t = {
        vertices: [],
        holes: [],
        dimensions: n
      }, r = 0, x = 0; x < e.length; x++) {
        for (var i = 0; i < e[x].length; i++) {
          for (var u = 0; u < n; u++) {
            t.vertices.push(e[x][i][u]);
          }
        }

        x > 0 && (r += e[x - 1].length, t.holes.push(r));
      }

      return t;
    };
  }, {}],
  "V10u": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: !0
    }), exports.ChunkParser = void 0;

    var e = require("three"),
        t = s(require("earcut"));

    function s(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }

    var r = /*#__PURE__*/function () {
      function r() {
        _classCallCheck(this, r);

        this.matrix = null, this.chunkSize = 2e3, this.meshVertices = [], this.meshObjIds = [], this.meshObjType = [], this.objectColors = {
          Building: 7641055,
          BuildingPart: 7641055,
          BuildingInstallation: 7641055,
          Bridge: 10066329,
          BridgePart: 10066329,
          BridgeInstallation: 10066329,
          BridgeConstructionElement: 10066329,
          CityObjectGroup: 16777139,
          CityFurniture: 13369344,
          GenericCityObject: 13369344,
          LandUse: 16777139,
          PlantCover: 3779641,
          Railway: 0,
          Road: 10066329,
          SolitaryVegetationObject: 3779641,
          TINRelief: 16767897,
          TransportSquare: 10066329,
          Tunnel: 10066329,
          TunnelPart: 10066329,
          TunnelInstallation: 10066329,
          WaterBody: 5089023
        }, this.onchunkload = null, this.objectIds = [];
      }

      _createClass(r, [{
        key: "parse",
        value: function parse(e) {
          this.meshVertices = [], this.meshObjIds = [], this.meshObjType = [];
          var t = 0;
          this.objectIds = Object.keys(e.CityObjects);

          for (var _s110 in e.CityObjects) {
            this.parseObject(_s110, e), t++ > this.chunkSize && (this.returnObjects(e), this.meshVertices = [], this.meshObjIds = [], this.meshObjType = [], t = 0);
          }

          this.returnObjects(e);
        }
      }, {
        key: "returnObjects",
        value: function returnObjects(e) {
          if (0 == this.meshVertices.length) return;
          var t = [];

          var _iterator2 = _createForOfIteratorHelper(this.meshVertices),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var _s111 = _step2.value;
              var _r217 = e.vertices[_s111];
              t.push.apply(t, _toConsumableArray(_r217));
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }

          this.onchunkload(t, this.meshObjIds, this.meshObjType);
        }
      }, {
        key: "parseObject",
        value: function parseObject(e, t) {
          var s = t.CityObjects[e];
          if (s.geometry && s.geometry.length > 0) for (var _r218 = 0; _r218 < s.geometry.length; _r218++) {
            var i = s.geometry[_r218].type;

            if ("Solid" == i) {
              var _i185 = s.geometry[_r218].boundaries;

              for (var _s112 = 0; _s112 < _i185.length; _s112++) {
                this.parseShell(_i185[_s112], e, t);
              }
            } else if ("MultiSurface" == i || "CompositeSurface" == i) {
              var _i186 = s.geometry[_r218].boundaries;
              this.parseShell(_i186, e, t);
            } else if ("MultiSolid" == i || "CompositeSolid" == i) {
              var _i187 = s.geometry[_r218].boundaries;

              for (var _s113 = 0; _s113 < _i187.length; _s113++) {
                for (var _r219 = 0; _r219 < _i187[_s113].length; _r219++) {
                  this.parseShell(_i187[_s113][_r219], e, t);
                }
              }
            }
          }
        }
      }, {
        key: "parseShell",
        value: function parseShell(e, s, _r213) {
          var i = this.meshVertices,
              l = this.meshObjIds,
              o = this.meshObjType;
          var h = this.objectIds.indexOf(s),
              n = Object.keys(this.objectColors).indexOf(_r213.CityObjects[s].type);

          for (var c = 0; c < e.length; c++) {
            var _s114 = [],
                u = [];

            for (var _t271 = 0; _t271 < e[c].length; _t271++) {
              _s114.length > 0 && u.push(_s114.length), _s114.push.apply(_s114, _toConsumableArray(e[c][_t271]));
            }

            if (3 == _s114.length) for (var _e257 = 0; _e257 < 3; _e257++) {
              i.push(_s114[_e257]), l.push(h), o.push(n);
            } else if (_s114.length > 3) {
              var _e258 = [];

              for (var _t272 = 0; _t272 < _s114.length; _t272++) {
                _e258.push({
                  x: _r213.vertices[_s114[_t272]][0],
                  y: _r213.vertices[_s114[_t272]][1],
                  z: _r213.vertices[_s114[_t272]][2]
                });
              }

              var _c32 = this.getNewellsNormal(_e258);

              var a = [];

              for (var _t273 = 0; _t273 < _e258.length; _t273++) {
                var _s115 = this.to_2d(_e258[_t273], _c32);

                a.push(_s115.x), a.push(_s115.y);
              }

              var d = (0, t.default)(a, u, 2);

              for (var _t274 = 0; _t274 < d.length; _t274 += 3) {
                for (var _e259 = 0; _e259 < 3; _e259++) {
                  var _r220 = _s114[d[_t274 + _e259]];
                  i.push(_r220), l.push(h), o.push(n);
                }
              }
            }
          }
        }
      }, {
        key: "getNewellsNormal",
        value: function getNewellsNormal(t) {
          var s = [0, 0, 0];

          for (var _e260 = 0; _e260 < t.length; _e260++) {
            var _r221 = _e260 + 1;

            _r221 == t.length && (_r221 = 0), s[0] = s[0] + (t[_e260].y - t[_r221].y) * (t[_e260].z + t[_r221].z), s[1] = s[1] + (t[_e260].z - t[_r221].z) * (t[_e260].x + t[_r221].x), s[2] = s[2] + (t[_e260].x - t[_r221].x) * (t[_e260].y + t[_r221].y);
          }

          return new e.Vector3(s[0], s[1], s[2]).normalize();
        }
      }, {
        key: "to_2d",
        value: function to_2d(t, s) {
          t = new e.Vector3(t.x, t.y, t.z);

          var _r216 = new e.Vector3(1.1, 1.1, 1.1);

          _r216.distanceTo(s) < .01 && _r216.add(new e.Vector3(1, 2, 3));

          var i = _r216.dot(s),
              l = s.clone();

          l.multiplyScalar(i), _r216.sub(l), _r216.normalize();
          var o = s.clone();
          return o.cross(_r216), {
            x: t.dot(_r216),
            y: t.dot(o)
          };
        }
      }]);

      return r;
    }();

    exports.ChunkParser = r;
  }, {
    "three": "dKqR",
    "earcut": "vwhv"
  }],
  "MHz2": [function (require, module, exports) {
    "use strict";

    var e = require("./ChunkParser.js");

    onmessage = function onmessage(o) {
      var s = new e.ChunkParser(),
          r = o.data[1];
      r && (r.chunkSize && (s.chunkSize = r.chunkSize), r.objectColors && (s.objectColors = r.objectColors)), s.onchunkload = function (e, o, s) {
        var r = new Float32Array(e).buffer;
        postMessage({
          v_buffer: r,
          objectIds: o,
          objectType: s
        }, [r]);
      }, s.parse(o.data[0]);
    };
  }, {
    "./ChunkParser.js": "V10u"
  }]
}, {}, ["MHz2"], null);
},{}],"../../../../../../usr/lib/node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "40395" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["../../../../../../usr/lib/node_modules/parcel-bundler/src/builtins/hmr-runtime.js","ParserWorker.4948cab7.js"], null)
//# sourceMappingURL=/ParserWorker.4948cab7.069117fa.js.map